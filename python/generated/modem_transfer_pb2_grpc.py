# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import modem_transfer_pb2 as modem__transfer__pb2


class ModemTransferServiceStub(object):
  """Tracking services for transferring modems between parties.
  Modems can be transferred between organizations for any number of reason, ranging from actually shipping to a different
  company to handing them over to a third party for installation.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Transfer = channel.unary_unary(
        '/hiber.modem.ModemTransferService/Transfer',
        request_serializer=modem__transfer__pb2.TransferModemsRequest.SerializeToString,
        response_deserializer=modem__transfer__pb2.TransferModemsRequest.Response.FromString,
        )
    self.List = channel.unary_unary(
        '/hiber.modem.ModemTransferService/List',
        request_serializer=modem__transfer__pb2.ListModemTransfersRequest.SerializeToString,
        response_deserializer=modem__transfer__pb2.ListModemTransfersRequest.Response.FromString,
        )
    self.Cancel = channel.unary_unary(
        '/hiber.modem.ModemTransferService/Cancel',
        request_serializer=modem__transfer__pb2.CancelModemTransferRequest.SerializeToString,
        response_deserializer=modem__transfer__pb2.CancelModemTransferRequest.Response.FromString,
        )
    self.Received = channel.unary_unary(
        '/hiber.modem.ModemTransferService/Received',
        request_serializer=modem__transfer__pb2.ReceivedModemTransferRequest.SerializeToString,
        response_deserializer=modem__transfer__pb2.ReceivedModemTransferRequest.Response.FromString,
        )
    self.NotReceived = channel.unary_unary(
        '/hiber.modem.ModemTransferService/NotReceived',
        request_serializer=modem__transfer__pb2.NotReceivedModemTransferRequest.SerializeToString,
        response_deserializer=modem__transfer__pb2.NotReceivedModemTransferRequest.Response.FromString,
        )


class ModemTransferServiceServicer(object):
  """Tracking services for transferring modems between parties.
  Modems can be transferred between organizations for any number of reason, ranging from actually shipping to a different
  company to handing them over to a third party for installation.
  """

  def Transfer(self, request, context):
    """Transfer modems to a different organization.
    As a result, the modem will get the outbound status for you, and the inbound status for the recipient.
    Note: this call can automatically generate a child organization for the recipient if it has no organization.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def List(self, request, context):
    """List transfers for modems. This could be used to list all active transfers on a selection of modems,
    or, for example, to list this history of all transfers for one modem.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Cancel(self, request, context):
    """Cancel a started transfer.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Received(self, request, context):
    """Mark inbound modems as received, adding them to your organization.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NotReceived(self, request, context):
    """Mark modems as not received when they were inbound but did not show up.
    If you do receive the modems after marking them as not received, you can claim them to still get them in
    your organization.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ModemTransferServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Transfer': grpc.unary_unary_rpc_method_handler(
          servicer.Transfer,
          request_deserializer=modem__transfer__pb2.TransferModemsRequest.FromString,
          response_serializer=modem__transfer__pb2.TransferModemsRequest.Response.SerializeToString,
      ),
      'List': grpc.unary_unary_rpc_method_handler(
          servicer.List,
          request_deserializer=modem__transfer__pb2.ListModemTransfersRequest.FromString,
          response_serializer=modem__transfer__pb2.ListModemTransfersRequest.Response.SerializeToString,
      ),
      'Cancel': grpc.unary_unary_rpc_method_handler(
          servicer.Cancel,
          request_deserializer=modem__transfer__pb2.CancelModemTransferRequest.FromString,
          response_serializer=modem__transfer__pb2.CancelModemTransferRequest.Response.SerializeToString,
      ),
      'Received': grpc.unary_unary_rpc_method_handler(
          servicer.Received,
          request_deserializer=modem__transfer__pb2.ReceivedModemTransferRequest.FromString,
          response_serializer=modem__transfer__pb2.ReceivedModemTransferRequest.Response.SerializeToString,
      ),
      'NotReceived': grpc.unary_unary_rpc_method_handler(
          servicer.NotReceived,
          request_deserializer=modem__transfer__pb2.NotReceivedModemTransferRequest.FromString,
          response_serializer=modem__transfer__pb2.NotReceivedModemTransferRequest.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'hiber.modem.ModemTransferService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ModemTransferReturnServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Prepare = channel.unary_unary(
        '/hiber.modem.ModemTransferReturnService/Prepare',
        request_serializer=modem__transfer__pb2.PrepareModemForReturnRequest.SerializeToString,
        response_deserializer=modem__transfer__pb2.PrepareModemForReturnRequest.Response.FromString,
        )
    self.Lines = channel.unary_unary(
        '/hiber.modem.ModemTransferReturnService/Lines',
        request_serializer=modem__transfer__pb2.ListModemTransferReturnLinesRequest.SerializeToString,
        response_deserializer=modem__transfer__pb2.ListModemTransferReturnLinesRequest.Response.FromString,
        )
    self.DeleteLine = channel.unary_unary(
        '/hiber.modem.ModemTransferReturnService/DeleteLine',
        request_serializer=modem__transfer__pb2.DeleteModemTransferReturnLinesRequest.SerializeToString,
        response_deserializer=modem__transfer__pb2.DeleteModemTransferReturnLinesRequest.Response.FromString,
        )
    self.Send = channel.unary_unary(
        '/hiber.modem.ModemTransferReturnService/Send',
        request_serializer=modem__transfer__pb2.SendReturnRequest.SerializeToString,
        response_deserializer=modem__transfer__pb2.SendReturnRequest.Response.FromString,
        )


class ModemTransferReturnServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Prepare(self, request, context):
    """If any problems are detected with the modems within the return period, mark them using this method.
    Modems marked using this method can be returned in one transfer, as long as they are returned to the same
    organization.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Lines(self, request, context):
    """List the return lines, either for a return transfer, or lines that have not been
    returned with a return transfer yet.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteLine(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Send(self, request, context):
    """Transfer modems marked for return back to the sender.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ModemTransferReturnServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Prepare': grpc.unary_unary_rpc_method_handler(
          servicer.Prepare,
          request_deserializer=modem__transfer__pb2.PrepareModemForReturnRequest.FromString,
          response_serializer=modem__transfer__pb2.PrepareModemForReturnRequest.Response.SerializeToString,
      ),
      'Lines': grpc.unary_unary_rpc_method_handler(
          servicer.Lines,
          request_deserializer=modem__transfer__pb2.ListModemTransferReturnLinesRequest.FromString,
          response_serializer=modem__transfer__pb2.ListModemTransferReturnLinesRequest.Response.SerializeToString,
      ),
      'DeleteLine': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteLine,
          request_deserializer=modem__transfer__pb2.DeleteModemTransferReturnLinesRequest.FromString,
          response_serializer=modem__transfer__pb2.DeleteModemTransferReturnLinesRequest.Response.SerializeToString,
      ),
      'Send': grpc.unary_unary_rpc_method_handler(
          servicer.Send,
          request_deserializer=modem__transfer__pb2.SendReturnRequest.FromString,
          response_serializer=modem__transfer__pb2.SendReturnRequest.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'hiber.modem.ModemTransferReturnService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
