# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import tag_pb2 as tag__pb2


class TagServiceStub(object):
  """Tag management api calls. You can already get tags for objects when you get their data, and even create new tags
  when updating them, so these calls are meant for easier tag management if you need it.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.List = channel.unary_unary(
        '/hiber.tag.TagService/List',
        request_serializer=tag__pb2.ListRequest.SerializeToString,
        response_deserializer=tag__pb2.ListRequest.Response.FromString,
        )
    self.Create = channel.unary_unary(
        '/hiber.tag.TagService/Create',
        request_serializer=tag__pb2.CreateRequest.SerializeToString,
        response_deserializer=tag__pb2.Tag.FromString,
        )
    self.Update = channel.unary_unary(
        '/hiber.tag.TagService/Update',
        request_serializer=tag__pb2.UpdateRequest.SerializeToString,
        response_deserializer=tag__pb2.Tag.FromString,
        )
    self.Delete = channel.unary_unary(
        '/hiber.tag.TagService/Delete',
        request_serializer=tag__pb2.DeleteRequest.SerializeToString,
        response_deserializer=tag__pb2.DeleteRequest.Response.FromString,
        )


class TagServiceServicer(object):
  """Tag management api calls. You can already get tags for objects when you get their data, and even create new tags
  when updating them, so these calls are meant for easier tag management if you need it.
  """

  def List(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Create(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Update(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TagServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'List': grpc.unary_unary_rpc_method_handler(
          servicer.List,
          request_deserializer=tag__pb2.ListRequest.FromString,
          response_serializer=tag__pb2.ListRequest.Response.SerializeToString,
      ),
      'Create': grpc.unary_unary_rpc_method_handler(
          servicer.Create,
          request_deserializer=tag__pb2.CreateRequest.FromString,
          response_serializer=tag__pb2.Tag.SerializeToString,
      ),
      'Update': grpc.unary_unary_rpc_method_handler(
          servicer.Update,
          request_deserializer=tag__pb2.UpdateRequest.FromString,
          response_serializer=tag__pb2.Tag.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=tag__pb2.DeleteRequest.FromString,
          response_serializer=tag__pb2.DeleteRequest.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'hiber.tag.TagService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
