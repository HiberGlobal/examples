/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var base_pb = require('./base_pb.js');
goog.object.extend(proto, base_pb);
var tag_pb = require('./tag_pb.js');
goog.object.extend(proto, tag_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.hiber.integration.slack.CreateSlackPublisherRequest', null, global);
goog.exportSymbol('proto.hiber.integration.slack.DeleteSlackPublisherRequest', null, global);
goog.exportSymbol('proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response', null, global);
goog.exportSymbol('proto.hiber.integration.slack.DisableSlackPublisherRequest', null, global);
goog.exportSymbol('proto.hiber.integration.slack.DisableSlackPublisherRequest.Response', null, global);
goog.exportSymbol('proto.hiber.integration.slack.EnableSlackPublisherRequest', null, global);
goog.exportSymbol('proto.hiber.integration.slack.EnableSlackPublisherRequest.Response', null, global);
goog.exportSymbol('proto.hiber.integration.slack.ListSlackPublishersRequest', null, global);
goog.exportSymbol('proto.hiber.integration.slack.ListSlackPublishersRequest.Response', null, global);
goog.exportSymbol('proto.hiber.integration.slack.SlackMessage', null, global);
goog.exportSymbol('proto.hiber.integration.slack.SlackPublisher', null, global);
goog.exportSymbol('proto.hiber.integration.slack.SlackPublisher.Data', null, global);
goog.exportSymbol('proto.hiber.integration.slack.SlackPublisherHistoryRequest', null, global);
goog.exportSymbol('proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response', null, global);
goog.exportSymbol('proto.hiber.integration.slack.SlackPublisherHistorySelection', null, global);
goog.exportSymbol('proto.hiber.integration.slack.SlackPublisherSelection', null, global);
goog.exportSymbol('proto.hiber.integration.slack.UpdateSlackPublisherRequest', null, global);
goog.exportSymbol('proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest', null, global);
goog.exportSymbol('proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.SlackPublisher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.integration.slack.SlackPublisher.repeatedFields_, null);
};
goog.inherits(proto.hiber.integration.slack.SlackPublisher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.SlackPublisher.displayName = 'proto.hiber.integration.slack.SlackPublisher';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.integration.slack.SlackPublisher.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.SlackPublisher.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.SlackPublisher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.SlackPublisher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.SlackPublisher.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    data: (f = msg.getData()) && proto.hiber.integration.slack.SlackPublisher.Data.toObject(includeInstance, f),
    filterEventTypes: (f = msg.getFilterEventTypes()) && base_pb.Filter.Events.toObject(includeInstance, f),
    filterModemNumbers: (f = msg.getFilterModemNumbers()) && base_pb.Filter.Modems.toObject(includeInstance, f),
    filterTags: (f = msg.getFilterTags()) && base_pb.Filter.Tags.toObject(includeInstance, f),
    health: jspb.Message.getFieldWithDefault(msg, 7, 0),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    tag_pb.Tag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.SlackPublisher}
 */
proto.hiber.integration.slack.SlackPublisher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.SlackPublisher;
  return proto.hiber.integration.slack.SlackPublisher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.SlackPublisher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.SlackPublisher}
 */
proto.hiber.integration.slack.SlackPublisher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.hiber.integration.slack.SlackPublisher.Data;
      reader.readMessage(value,proto.hiber.integration.slack.SlackPublisher.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 4:
      var value = new base_pb.Filter.Events;
      reader.readMessage(value,base_pb.Filter.Events.deserializeBinaryFromReader);
      msg.setFilterEventTypes(value);
      break;
    case 5:
      var value = new base_pb.Filter.Modems;
      reader.readMessage(value,base_pb.Filter.Modems.deserializeBinaryFromReader);
      msg.setFilterModemNumbers(value);
      break;
    case 6:
      var value = new base_pb.Filter.Tags;
      reader.readMessage(value,base_pb.Filter.Tags.deserializeBinaryFromReader);
      msg.setFilterTags(value);
      break;
    case 7:
      var value = /** @type {!proto.hiber.Health} */ (reader.readEnum());
      msg.setHealth(value);
      break;
    case 8:
      var value = new tag_pb.Tag;
      reader.readMessage(value,tag_pb.Tag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.SlackPublisher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.SlackPublisher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.SlackPublisher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.SlackPublisher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hiber.integration.slack.SlackPublisher.Data.serializeBinaryToWriter
    );
  }
  f = message.getFilterEventTypes();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      base_pb.Filter.Events.serializeBinaryToWriter
    );
  }
  f = message.getFilterModemNumbers();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      base_pb.Filter.Modems.serializeBinaryToWriter
    );
  }
  f = message.getFilterTags();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      base_pb.Filter.Tags.serializeBinaryToWriter
    );
  }
  f = message.getHealth();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      tag_pb.Tag.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.SlackPublisher.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.slack.SlackPublisher.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.SlackPublisher.Data.displayName = 'proto.hiber.integration.slack.SlackPublisher.Data';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.SlackPublisher.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.SlackPublisher.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.SlackPublisher.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.SlackPublisher.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 2, ""),
    disabled: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.SlackPublisher.Data}
 */
proto.hiber.integration.slack.SlackPublisher.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.SlackPublisher.Data;
  return proto.hiber.integration.slack.SlackPublisher.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.SlackPublisher.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.SlackPublisher.Data}
 */
proto.hiber.integration.slack.SlackPublisher.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.SlackPublisher.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.SlackPublisher.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.SlackPublisher.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.SlackPublisher.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDisabled();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.hiber.integration.slack.SlackPublisher.Data.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.SlackPublisher.Data.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string channel = 2;
 * @return {string}
 */
proto.hiber.integration.slack.SlackPublisher.Data.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.SlackPublisher.Data.prototype.setChannel = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool disabled = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackPublisher.Data.prototype.getDisabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.hiber.integration.slack.SlackPublisher.Data.prototype.setDisabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.hiber.integration.slack.SlackPublisher.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hiber.integration.slack.SlackPublisher.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.hiber.integration.slack.SlackPublisher.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.SlackPublisher.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Data data = 3;
 * @return {?proto.hiber.integration.slack.SlackPublisher.Data}
 */
proto.hiber.integration.slack.SlackPublisher.prototype.getData = function() {
  return /** @type{?proto.hiber.integration.slack.SlackPublisher.Data} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.slack.SlackPublisher.Data, 3));
};


/** @param {?proto.hiber.integration.slack.SlackPublisher.Data|undefined} value */
proto.hiber.integration.slack.SlackPublisher.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.slack.SlackPublisher.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackPublisher.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional hiber.Filter.Events filter_event_types = 4;
 * @return {?proto.hiber.Filter.Events}
 */
proto.hiber.integration.slack.SlackPublisher.prototype.getFilterEventTypes = function() {
  return /** @type{?proto.hiber.Filter.Events} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Events, 4));
};


/** @param {?proto.hiber.Filter.Events|undefined} value */
proto.hiber.integration.slack.SlackPublisher.prototype.setFilterEventTypes = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hiber.integration.slack.SlackPublisher.prototype.clearFilterEventTypes = function() {
  this.setFilterEventTypes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackPublisher.prototype.hasFilterEventTypes = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional hiber.Filter.Modems filter_modem_numbers = 5;
 * @return {?proto.hiber.Filter.Modems}
 */
proto.hiber.integration.slack.SlackPublisher.prototype.getFilterModemNumbers = function() {
  return /** @type{?proto.hiber.Filter.Modems} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Modems, 5));
};


/** @param {?proto.hiber.Filter.Modems|undefined} value */
proto.hiber.integration.slack.SlackPublisher.prototype.setFilterModemNumbers = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.hiber.integration.slack.SlackPublisher.prototype.clearFilterModemNumbers = function() {
  this.setFilterModemNumbers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackPublisher.prototype.hasFilterModemNumbers = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional hiber.Filter.Tags filter_tags = 6;
 * @return {?proto.hiber.Filter.Tags}
 */
proto.hiber.integration.slack.SlackPublisher.prototype.getFilterTags = function() {
  return /** @type{?proto.hiber.Filter.Tags} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Tags, 6));
};


/** @param {?proto.hiber.Filter.Tags|undefined} value */
proto.hiber.integration.slack.SlackPublisher.prototype.setFilterTags = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.hiber.integration.slack.SlackPublisher.prototype.clearFilterTags = function() {
  this.setFilterTags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackPublisher.prototype.hasFilterTags = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional hiber.Health health = 7;
 * @return {!proto.hiber.Health}
 */
proto.hiber.integration.slack.SlackPublisher.prototype.getHealth = function() {
  return /** @type {!proto.hiber.Health} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.hiber.Health} value */
proto.hiber.integration.slack.SlackPublisher.prototype.setHealth = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * repeated hiber.tag.Tag tags = 8;
 * @return {!Array<!proto.hiber.tag.Tag>}
 */
proto.hiber.integration.slack.SlackPublisher.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.hiber.tag.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, tag_pb.Tag, 8));
};


/** @param {!Array<!proto.hiber.tag.Tag>} value */
proto.hiber.integration.slack.SlackPublisher.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.hiber.tag.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.tag.Tag}
 */
proto.hiber.integration.slack.SlackPublisher.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.hiber.tag.Tag, opt_index);
};


proto.hiber.integration.slack.SlackPublisher.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.SlackMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.slack.SlackMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.SlackMessage.displayName = 'proto.hiber.integration.slack.SlackMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.SlackMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.SlackMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.SlackMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.SlackMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = msg.getTime()) && base_pb.Timestamp.toObject(includeInstance, f),
    publisherData: (f = msg.getPublisherData()) && proto.hiber.integration.slack.SlackPublisher.Data.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && base_pb.BytesOrHex.toObject(includeInstance, f),
    successful: jspb.Message.getFieldWithDefault(msg, 4, false),
    error: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.SlackMessage}
 */
proto.hiber.integration.slack.SlackMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.SlackMessage;
  return proto.hiber.integration.slack.SlackMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.SlackMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.SlackMessage}
 */
proto.hiber.integration.slack.SlackMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.Timestamp;
      reader.readMessage(value,base_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 2:
      var value = new proto.hiber.integration.slack.SlackPublisher.Data;
      reader.readMessage(value,proto.hiber.integration.slack.SlackPublisher.Data.deserializeBinaryFromReader);
      msg.setPublisherData(value);
      break;
    case 3:
      var value = new base_pb.BytesOrHex;
      reader.readMessage(value,base_pb.BytesOrHex.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccessful(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.SlackMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.SlackMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.SlackMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.SlackMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPublisherData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.slack.SlackPublisher.Data.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.BytesOrHex.serializeBinaryToWriter
    );
  }
  f = message.getSuccessful();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional hiber.Timestamp time = 1;
 * @return {?proto.hiber.Timestamp}
 */
proto.hiber.integration.slack.SlackMessage.prototype.getTime = function() {
  return /** @type{?proto.hiber.Timestamp} */ (
    jspb.Message.getWrapperField(this, base_pb.Timestamp, 1));
};


/** @param {?proto.hiber.Timestamp|undefined} value */
proto.hiber.integration.slack.SlackMessage.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hiber.integration.slack.SlackMessage.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackMessage.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SlackPublisher.Data publisher_data = 2;
 * @return {?proto.hiber.integration.slack.SlackPublisher.Data}
 */
proto.hiber.integration.slack.SlackMessage.prototype.getPublisherData = function() {
  return /** @type{?proto.hiber.integration.slack.SlackPublisher.Data} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.slack.SlackPublisher.Data, 2));
};


/** @param {?proto.hiber.integration.slack.SlackPublisher.Data|undefined} value */
proto.hiber.integration.slack.SlackMessage.prototype.setPublisherData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.slack.SlackMessage.prototype.clearPublisherData = function() {
  this.setPublisherData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackMessage.prototype.hasPublisherData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.BytesOrHex message = 3;
 * @return {?proto.hiber.BytesOrHex}
 */
proto.hiber.integration.slack.SlackMessage.prototype.getMessage = function() {
  return /** @type{?proto.hiber.BytesOrHex} */ (
    jspb.Message.getWrapperField(this, base_pb.BytesOrHex, 3));
};


/** @param {?proto.hiber.BytesOrHex|undefined} value */
proto.hiber.integration.slack.SlackMessage.prototype.setMessage = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.slack.SlackMessage.prototype.clearMessage = function() {
  this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackMessage.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool successful = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackMessage.prototype.getSuccessful = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.hiber.integration.slack.SlackMessage.prototype.setSuccessful = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string error = 5;
 * @return {string}
 */
proto.hiber.integration.slack.SlackMessage.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.SlackMessage.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.SlackPublisherSelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.integration.slack.SlackPublisherSelection.repeatedFields_, null);
};
goog.inherits(proto.hiber.integration.slack.SlackPublisherSelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.SlackPublisherSelection.displayName = 'proto.hiber.integration.slack.SlackPublisherSelection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.integration.slack.SlackPublisherSelection.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.SlackPublisherSelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.SlackPublisherSelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.SlackPublisherSelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    publishers: (f = msg.getPublishers()) && base_pb.Filter.Publishers.toObject(includeInstance, f),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    searchUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    searchChannel: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tags: (f = msg.getTags()) && tag_pb.TagSelection.toObject(includeInstance, f),
    healthList: jspb.Message.getRepeatedField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.SlackPublisherSelection}
 */
proto.hiber.integration.slack.SlackPublisherSelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.SlackPublisherSelection;
  return proto.hiber.integration.slack.SlackPublisherSelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.SlackPublisherSelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.SlackPublisherSelection}
 */
proto.hiber.integration.slack.SlackPublisherSelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.Filter.Publishers;
      reader.readMessage(value,base_pb.Filter.Publishers.deserializeBinaryFromReader);
      msg.setPublishers(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchChannel(value);
      break;
    case 5:
      var value = new tag_pb.TagSelection;
      reader.readMessage(value,tag_pb.TagSelection.deserializeBinaryFromReader);
      msg.setTags(value);
      break;
    case 6:
      var value = /** @type {!Array<!proto.hiber.Health>} */ (reader.readPackedEnum());
      msg.setHealthList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.SlackPublisherSelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.SlackPublisherSelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.SlackPublisherSelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublishers();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_pb.Filter.Publishers.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSearchUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSearchChannel();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTags();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      tag_pb.TagSelection.serializeBinaryToWriter
    );
  }
  f = message.getHealthList();
  if (f.length > 0) {
    writer.writePackedEnum(
      6,
      f
    );
  }
};


/**
 * optional hiber.Filter.Publishers publishers = 1;
 * @return {?proto.hiber.Filter.Publishers}
 */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.getPublishers = function() {
  return /** @type{?proto.hiber.Filter.Publishers} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Publishers, 1));
};


/** @param {?proto.hiber.Filter.Publishers|undefined} value */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.setPublishers = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hiber.integration.slack.SlackPublisherSelection.prototype.clearPublishers = function() {
  this.setPublishers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.hasPublishers = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string search_url = 3;
 * @return {string}
 */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.getSearchUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.setSearchUrl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string search_channel = 4;
 * @return {string}
 */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.getSearchChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.setSearchChannel = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional hiber.tag.TagSelection tags = 5;
 * @return {?proto.hiber.tag.TagSelection}
 */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.getTags = function() {
  return /** @type{?proto.hiber.tag.TagSelection} */ (
    jspb.Message.getWrapperField(this, tag_pb.TagSelection, 5));
};


/** @param {?proto.hiber.tag.TagSelection|undefined} value */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.setTags = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.hiber.integration.slack.SlackPublisherSelection.prototype.clearTags = function() {
  this.setTags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.hasTags = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated hiber.Health health = 6;
 * @return {!Array<!proto.hiber.Health>}
 */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.getHealthList = function() {
  return /** @type {!Array<!proto.hiber.Health>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<!proto.hiber.Health>} value */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.setHealthList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.hiber.Health} value
 * @param {number=} opt_index
 */
proto.hiber.integration.slack.SlackPublisherSelection.prototype.addHealth = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.hiber.integration.slack.SlackPublisherSelection.prototype.clearHealthList = function() {
  this.setHealthList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.ListSlackPublishersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.slack.ListSlackPublishersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.ListSlackPublishersRequest.displayName = 'proto.hiber.integration.slack.ListSlackPublishersRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.ListSlackPublishersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.ListSlackPublishersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.integration.slack.SlackPublisherSelection.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.ListSlackPublishersRequest}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.ListSlackPublishersRequest;
  return proto.hiber.integration.slack.ListSlackPublishersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.ListSlackPublishersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.ListSlackPublishersRequest}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.integration.slack.SlackPublisherSelection;
      reader.readMessage(value,proto.hiber.integration.slack.SlackPublisherSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    case 3:
      var value = new base_pb.Pagination;
      reader.readMessage(value,base_pb.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.ListSlackPublishersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.ListSlackPublishersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.slack.SlackPublisherSelection.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Pagination.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.integration.slack.ListSlackPublishersRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.integration.slack.ListSlackPublishersRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.ListSlackPublishersRequest.Response.displayName = 'proto.hiber.integration.slack.ListSlackPublishersRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.ListSlackPublishersRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.ListSlackPublishersRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    publishersList: jspb.Message.toObjectList(msg.getPublishersList(),
    proto.hiber.integration.slack.SlackPublisher.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.integration.slack.ListSlackPublishersRequest.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.ListSlackPublishersRequest.Response}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.ListSlackPublishersRequest.Response;
  return proto.hiber.integration.slack.ListSlackPublishersRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.ListSlackPublishersRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.ListSlackPublishersRequest.Response}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.integration.slack.SlackPublisher;
      reader.readMessage(value,proto.hiber.integration.slack.SlackPublisher.deserializeBinaryFromReader);
      msg.addPublishers(value);
      break;
    case 2:
      var value = new proto.hiber.integration.slack.ListSlackPublishersRequest;
      reader.readMessage(value,proto.hiber.integration.slack.ListSlackPublishersRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 3:
      var value = new base_pb.Pagination.Result;
      reader.readMessage(value,base_pb.Pagination.Result.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.ListSlackPublishersRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.ListSlackPublishersRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublishersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.integration.slack.SlackPublisher.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.slack.ListSlackPublishersRequest.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Pagination.Result.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SlackPublisher publishers = 1;
 * @return {!Array<!proto.hiber.integration.slack.SlackPublisher>}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response.prototype.getPublishersList = function() {
  return /** @type{!Array<!proto.hiber.integration.slack.SlackPublisher>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.integration.slack.SlackPublisher, 1));
};


/** @param {!Array<!proto.hiber.integration.slack.SlackPublisher>} value */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response.prototype.setPublishersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.integration.slack.SlackPublisher=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.integration.slack.SlackPublisher}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response.prototype.addPublishers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.integration.slack.SlackPublisher, opt_index);
};


proto.hiber.integration.slack.ListSlackPublishersRequest.Response.prototype.clearPublishersList = function() {
  this.setPublishersList([]);
};


/**
 * optional ListSlackPublishersRequest request = 2;
 * @return {?proto.hiber.integration.slack.ListSlackPublishersRequest}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.integration.slack.ListSlackPublishersRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.slack.ListSlackPublishersRequest, 2));
};


/** @param {?proto.hiber.integration.slack.ListSlackPublishersRequest|undefined} value */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.slack.ListSlackPublishersRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.Pagination.Result pagination = 3;
 * @return {?proto.hiber.Pagination.Result}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination.Result} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination.Result, 3));
};


/** @param {?proto.hiber.Pagination.Result|undefined} value */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.slack.ListSlackPublishersRequest.Response.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.Response.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.ListSlackPublishersRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SlackPublisherSelection selection = 2;
 * @return {?proto.hiber.integration.slack.SlackPublisherSelection}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.integration.slack.SlackPublisherSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.slack.SlackPublisherSelection, 2));
};


/** @param {?proto.hiber.integration.slack.SlackPublisherSelection|undefined} value */
proto.hiber.integration.slack.ListSlackPublishersRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.slack.ListSlackPublishersRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.Pagination pagination = 3;
 * @return {?proto.hiber.Pagination}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination, 3));
};


/** @param {?proto.hiber.Pagination|undefined} value */
proto.hiber.integration.slack.ListSlackPublishersRequest.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.slack.ListSlackPublishersRequest.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.ListSlackPublishersRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.SlackPublisherHistorySelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.slack.SlackPublisherHistorySelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.SlackPublisherHistorySelection.displayName = 'proto.hiber.integration.slack.SlackPublisherHistorySelection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.SlackPublisherHistorySelection.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.SlackPublisherHistorySelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.SlackPublisherHistorySelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.SlackPublisherHistorySelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeRange: (f = msg.getTimeRange()) && base_pb.TimeRange.toObject(includeInstance, f),
    onlyFailures: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.SlackPublisherHistorySelection}
 */
proto.hiber.integration.slack.SlackPublisherHistorySelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.SlackPublisherHistorySelection;
  return proto.hiber.integration.slack.SlackPublisherHistorySelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.SlackPublisherHistorySelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.SlackPublisherHistorySelection}
 */
proto.hiber.integration.slack.SlackPublisherHistorySelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.TimeRange;
      reader.readMessage(value,base_pb.TimeRange.deserializeBinaryFromReader);
      msg.setTimeRange(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnlyFailures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.SlackPublisherHistorySelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.SlackPublisherHistorySelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.SlackPublisherHistorySelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.SlackPublisherHistorySelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeRange();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_pb.TimeRange.serializeBinaryToWriter
    );
  }
  f = message.getOnlyFailures();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional hiber.TimeRange time_range = 1;
 * @return {?proto.hiber.TimeRange}
 */
proto.hiber.integration.slack.SlackPublisherHistorySelection.prototype.getTimeRange = function() {
  return /** @type{?proto.hiber.TimeRange} */ (
    jspb.Message.getWrapperField(this, base_pb.TimeRange, 1));
};


/** @param {?proto.hiber.TimeRange|undefined} value */
proto.hiber.integration.slack.SlackPublisherHistorySelection.prototype.setTimeRange = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hiber.integration.slack.SlackPublisherHistorySelection.prototype.clearTimeRange = function() {
  this.setTimeRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackPublisherHistorySelection.prototype.hasTimeRange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool only_failures = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackPublisherHistorySelection.prototype.getOnlyFailures = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.hiber.integration.slack.SlackPublisherHistorySelection.prototype.setOnlyFailures = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.slack.SlackPublisherHistoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.SlackPublisherHistoryRequest.displayName = 'proto.hiber.integration.slack.SlackPublisherHistoryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.SlackPublisherHistoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.SlackPublisherHistoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    selection: (f = msg.getSelection()) && proto.hiber.integration.slack.SlackPublisherHistorySelection.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.SlackPublisherHistoryRequest}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.SlackPublisherHistoryRequest;
  return proto.hiber.integration.slack.SlackPublisherHistoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.SlackPublisherHistoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.SlackPublisherHistoryRequest}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.hiber.integration.slack.SlackPublisherHistorySelection;
      reader.readMessage(value,proto.hiber.integration.slack.SlackPublisherHistorySelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    case 4:
      var value = new base_pb.Pagination;
      reader.readMessage(value,base_pb.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.SlackPublisherHistoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.SlackPublisherHistoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hiber.integration.slack.SlackPublisherHistorySelection.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      base_pb.Pagination.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.displayName = 'proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.hiber.integration.slack.SlackMessage.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.integration.slack.SlackPublisherHistoryRequest.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response;
  return proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.integration.slack.SlackMessage;
      reader.readMessage(value,proto.hiber.integration.slack.SlackMessage.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 2:
      var value = new proto.hiber.integration.slack.SlackPublisherHistoryRequest;
      reader.readMessage(value,proto.hiber.integration.slack.SlackPublisherHistoryRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 3:
      var value = new base_pb.Pagination.Result;
      reader.readMessage(value,base_pb.Pagination.Result.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.integration.slack.SlackMessage.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.slack.SlackPublisherHistoryRequest.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Pagination.Result.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SlackMessage items = 1;
 * @return {!Array<!proto.hiber.integration.slack.SlackMessage>}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.hiber.integration.slack.SlackMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.integration.slack.SlackMessage, 1));
};


/** @param {!Array<!proto.hiber.integration.slack.SlackMessage>} value */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.integration.slack.SlackMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.integration.slack.SlackMessage}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.integration.slack.SlackMessage, opt_index);
};


proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.prototype.clearItemsList = function() {
  this.setItemsList([]);
};


/**
 * optional SlackPublisherHistoryRequest request = 2;
 * @return {?proto.hiber.integration.slack.SlackPublisherHistoryRequest}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.integration.slack.SlackPublisherHistoryRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.slack.SlackPublisherHistoryRequest, 2));
};


/** @param {?proto.hiber.integration.slack.SlackPublisherHistoryRequest|undefined} value */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.Pagination.Result pagination = 3;
 * @return {?proto.hiber.Pagination.Result}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination.Result} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination.Result, 3));
};


/** @param {?proto.hiber.Pagination.Result|undefined} value */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.Response.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 id = 2;
 * @return {number}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional SlackPublisherHistorySelection selection = 3;
 * @return {?proto.hiber.integration.slack.SlackPublisherHistorySelection}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.integration.slack.SlackPublisherHistorySelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.slack.SlackPublisherHistorySelection, 3));
};


/** @param {?proto.hiber.integration.slack.SlackPublisherHistorySelection|undefined} value */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.slack.SlackPublisherHistoryRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional hiber.Pagination pagination = 4;
 * @return {?proto.hiber.Pagination}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination, 4));
};


/** @param {?proto.hiber.Pagination|undefined} value */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hiber.integration.slack.SlackPublisherHistoryRequest.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.SlackPublisherHistoryRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.integration.slack.CreateSlackPublisherRequest.repeatedFields_, null);
};
goog.inherits(proto.hiber.integration.slack.CreateSlackPublisherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.CreateSlackPublisherRequest.displayName = 'proto.hiber.integration.slack.CreateSlackPublisherRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.CreateSlackPublisherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.CreateSlackPublisherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    filterEventTypes: (f = msg.getFilterEventTypes()) && base_pb.Filter.Events.toObject(includeInstance, f),
    filterModemNumbers: (f = msg.getFilterModemNumbers()) && base_pb.Filter.Modems.toObject(includeInstance, f),
    filterTags: (f = msg.getFilterTags()) && base_pb.Filter.Tags.toObject(includeInstance, f),
    url: jspb.Message.getFieldWithDefault(msg, 6, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 7, ""),
    disabled: jspb.Message.getFieldWithDefault(msg, 8, false),
    tagsList: jspb.Message.getRepeatedField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.CreateSlackPublisherRequest}
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.CreateSlackPublisherRequest;
  return proto.hiber.integration.slack.CreateSlackPublisherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.CreateSlackPublisherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.CreateSlackPublisherRequest}
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new base_pb.Filter.Events;
      reader.readMessage(value,base_pb.Filter.Events.deserializeBinaryFromReader);
      msg.setFilterEventTypes(value);
      break;
    case 4:
      var value = new base_pb.Filter.Modems;
      reader.readMessage(value,base_pb.Filter.Modems.deserializeBinaryFromReader);
      msg.setFilterModemNumbers(value);
      break;
    case 5:
      var value = new base_pb.Filter.Tags;
      reader.readMessage(value,base_pb.Filter.Tags.deserializeBinaryFromReader);
      msg.setFilterTags(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisabled(value);
      break;
    case 10:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setTagsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.CreateSlackPublisherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.CreateSlackPublisherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFilterEventTypes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Filter.Events.serializeBinaryToWriter
    );
  }
  f = message.getFilterModemNumbers();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      base_pb.Filter.Modems.serializeBinaryToWriter
    );
  }
  f = message.getFilterTags();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      base_pb.Filter.Tags.serializeBinaryToWriter
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDisabled();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      10,
      f
    );
  }
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional hiber.Filter.Events filter_event_types = 3;
 * @return {?proto.hiber.Filter.Events}
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.getFilterEventTypes = function() {
  return /** @type{?proto.hiber.Filter.Events} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Events, 3));
};


/** @param {?proto.hiber.Filter.Events|undefined} value */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.setFilterEventTypes = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.clearFilterEventTypes = function() {
  this.setFilterEventTypes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.hasFilterEventTypes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional hiber.Filter.Modems filter_modem_numbers = 4;
 * @return {?proto.hiber.Filter.Modems}
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.getFilterModemNumbers = function() {
  return /** @type{?proto.hiber.Filter.Modems} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Modems, 4));
};


/** @param {?proto.hiber.Filter.Modems|undefined} value */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.setFilterModemNumbers = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.clearFilterModemNumbers = function() {
  this.setFilterModemNumbers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.hasFilterModemNumbers = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional hiber.Filter.Tags filter_tags = 5;
 * @return {?proto.hiber.Filter.Tags}
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.getFilterTags = function() {
  return /** @type{?proto.hiber.Filter.Tags} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Tags, 5));
};


/** @param {?proto.hiber.Filter.Tags|undefined} value */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.setFilterTags = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.clearFilterTags = function() {
  this.setFilterTags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.hasFilterTags = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string url = 6;
 * @return {string}
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string channel = 7;
 * @return {string}
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.setChannel = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool disabled = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.getDisabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.setDisabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * repeated int64 tags = 10;
 * @return {!Array<number>}
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.getTagsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array<number>} value */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.hiber.integration.slack.CreateSlackPublisherRequest.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.slack.EnableSlackPublisherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.EnableSlackPublisherRequest.displayName = 'proto.hiber.integration.slack.EnableSlackPublisherRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.EnableSlackPublisherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.EnableSlackPublisherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.integration.slack.SlackPublisherSelection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.EnableSlackPublisherRequest}
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.EnableSlackPublisherRequest;
  return proto.hiber.integration.slack.EnableSlackPublisherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.EnableSlackPublisherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.EnableSlackPublisherRequest}
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.integration.slack.SlackPublisherSelection;
      reader.readMessage(value,proto.hiber.integration.slack.SlackPublisherSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.EnableSlackPublisherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.EnableSlackPublisherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.slack.SlackPublisherSelection.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.integration.slack.EnableSlackPublisherRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.displayName = 'proto.hiber.integration.slack.EnableSlackPublisherRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.EnableSlackPublisherRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    publishersList: jspb.Message.toObjectList(msg.getPublishersList(),
    proto.hiber.integration.slack.SlackPublisher.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.integration.slack.EnableSlackPublisherRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.EnableSlackPublisherRequest.Response}
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.EnableSlackPublisherRequest.Response;
  return proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.EnableSlackPublisherRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.EnableSlackPublisherRequest.Response}
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.integration.slack.SlackPublisher;
      reader.readMessage(value,proto.hiber.integration.slack.SlackPublisher.deserializeBinaryFromReader);
      msg.addPublishers(value);
      break;
    case 2:
      var value = new proto.hiber.integration.slack.EnableSlackPublisherRequest;
      reader.readMessage(value,proto.hiber.integration.slack.EnableSlackPublisherRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.EnableSlackPublisherRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublishersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.integration.slack.SlackPublisher.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.slack.EnableSlackPublisherRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SlackPublisher publishers = 1;
 * @return {!Array<!proto.hiber.integration.slack.SlackPublisher>}
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.prototype.getPublishersList = function() {
  return /** @type{!Array<!proto.hiber.integration.slack.SlackPublisher>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.integration.slack.SlackPublisher, 1));
};


/** @param {!Array<!proto.hiber.integration.slack.SlackPublisher>} value */
proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.prototype.setPublishersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.integration.slack.SlackPublisher=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.integration.slack.SlackPublisher}
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.prototype.addPublishers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.integration.slack.SlackPublisher, opt_index);
};


proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.prototype.clearPublishersList = function() {
  this.setPublishersList([]);
};


/**
 * optional EnableSlackPublisherRequest request = 2;
 * @return {?proto.hiber.integration.slack.EnableSlackPublisherRequest}
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.integration.slack.EnableSlackPublisherRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.slack.EnableSlackPublisherRequest, 2));
};


/** @param {?proto.hiber.integration.slack.EnableSlackPublisherRequest|undefined} value */
proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.EnableSlackPublisherRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SlackPublisherSelection selection = 2;
 * @return {?proto.hiber.integration.slack.SlackPublisherSelection}
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.integration.slack.SlackPublisherSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.slack.SlackPublisherSelection, 2));
};


/** @param {?proto.hiber.integration.slack.SlackPublisherSelection|undefined} value */
proto.hiber.integration.slack.EnableSlackPublisherRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.slack.EnableSlackPublisherRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.EnableSlackPublisherRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.slack.DisableSlackPublisherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.DisableSlackPublisherRequest.displayName = 'proto.hiber.integration.slack.DisableSlackPublisherRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.DisableSlackPublisherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.DisableSlackPublisherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.integration.slack.SlackPublisherSelection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.DisableSlackPublisherRequest}
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.DisableSlackPublisherRequest;
  return proto.hiber.integration.slack.DisableSlackPublisherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.DisableSlackPublisherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.DisableSlackPublisherRequest}
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.integration.slack.SlackPublisherSelection;
      reader.readMessage(value,proto.hiber.integration.slack.SlackPublisherSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.DisableSlackPublisherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.DisableSlackPublisherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.slack.SlackPublisherSelection.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.integration.slack.DisableSlackPublisherRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.displayName = 'proto.hiber.integration.slack.DisableSlackPublisherRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.DisableSlackPublisherRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    publishersList: jspb.Message.toObjectList(msg.getPublishersList(),
    proto.hiber.integration.slack.SlackPublisher.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.integration.slack.DisableSlackPublisherRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.DisableSlackPublisherRequest.Response}
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.DisableSlackPublisherRequest.Response;
  return proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.DisableSlackPublisherRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.DisableSlackPublisherRequest.Response}
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.integration.slack.SlackPublisher;
      reader.readMessage(value,proto.hiber.integration.slack.SlackPublisher.deserializeBinaryFromReader);
      msg.addPublishers(value);
      break;
    case 2:
      var value = new proto.hiber.integration.slack.DisableSlackPublisherRequest;
      reader.readMessage(value,proto.hiber.integration.slack.DisableSlackPublisherRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.DisableSlackPublisherRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublishersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.integration.slack.SlackPublisher.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.slack.DisableSlackPublisherRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SlackPublisher publishers = 1;
 * @return {!Array<!proto.hiber.integration.slack.SlackPublisher>}
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.prototype.getPublishersList = function() {
  return /** @type{!Array<!proto.hiber.integration.slack.SlackPublisher>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.integration.slack.SlackPublisher, 1));
};


/** @param {!Array<!proto.hiber.integration.slack.SlackPublisher>} value */
proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.prototype.setPublishersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.integration.slack.SlackPublisher=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.integration.slack.SlackPublisher}
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.prototype.addPublishers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.integration.slack.SlackPublisher, opt_index);
};


proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.prototype.clearPublishersList = function() {
  this.setPublishersList([]);
};


/**
 * optional DisableSlackPublisherRequest request = 2;
 * @return {?proto.hiber.integration.slack.DisableSlackPublisherRequest}
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.integration.slack.DisableSlackPublisherRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.slack.DisableSlackPublisherRequest, 2));
};


/** @param {?proto.hiber.integration.slack.DisableSlackPublisherRequest|undefined} value */
proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.DisableSlackPublisherRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SlackPublisherSelection selection = 2;
 * @return {?proto.hiber.integration.slack.SlackPublisherSelection}
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.integration.slack.SlackPublisherSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.slack.SlackPublisherSelection, 2));
};


/** @param {?proto.hiber.integration.slack.SlackPublisherSelection|undefined} value */
proto.hiber.integration.slack.DisableSlackPublisherRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.slack.DisableSlackPublisherRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.DisableSlackPublisherRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.slack.UpdateSlackPublisherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.UpdateSlackPublisherRequest.displayName = 'proto.hiber.integration.slack.UpdateSlackPublisherRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.UpdateSlackPublisherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.UpdateSlackPublisherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filterEventTypes: (f = msg.getFilterEventTypes()) && base_pb.Filter.Events.Update.toObject(includeInstance, f),
    filterModemNumbers: (f = msg.getFilterModemNumbers()) && base_pb.Filter.Modems.Update.toObject(includeInstance, f),
    filterTags: (f = msg.getFilterTags()) && base_pb.Filter.Tags.Update.toObject(includeInstance, f),
    description: (f = msg.getDescription()) && base_pb.UpdateClearableString.toObject(includeInstance, f),
    url: jspb.Message.getFieldWithDefault(msg, 11, ""),
    channel: (f = msg.getChannel()) && base_pb.UpdateClearableString.toObject(includeInstance, f),
    active: (f = msg.getActive()) && base_pb.UpdateBoolean.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.UpdateSlackPublisherRequest}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.UpdateSlackPublisherRequest;
  return proto.hiber.integration.slack.UpdateSlackPublisherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.UpdateSlackPublisherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.UpdateSlackPublisherRequest}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 3:
      var value = new base_pb.Filter.Events.Update;
      reader.readMessage(value,base_pb.Filter.Events.Update.deserializeBinaryFromReader);
      msg.setFilterEventTypes(value);
      break;
    case 4:
      var value = new base_pb.Filter.Modems.Update;
      reader.readMessage(value,base_pb.Filter.Modems.Update.deserializeBinaryFromReader);
      msg.setFilterModemNumbers(value);
      break;
    case 5:
      var value = new base_pb.Filter.Tags.Update;
      reader.readMessage(value,base_pb.Filter.Tags.Update.deserializeBinaryFromReader);
      msg.setFilterTags(value);
      break;
    case 10:
      var value = new base_pb.UpdateClearableString;
      reader.readMessage(value,base_pb.UpdateClearableString.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 12:
      var value = new base_pb.UpdateClearableString;
      reader.readMessage(value,base_pb.UpdateClearableString.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 15:
      var value = new base_pb.UpdateBoolean;
      reader.readMessage(value,base_pb.UpdateBoolean.deserializeBinaryFromReader);
      msg.setActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.UpdateSlackPublisherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.UpdateSlackPublisherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFilterEventTypes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Filter.Events.Update.serializeBinaryToWriter
    );
  }
  f = message.getFilterModemNumbers();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      base_pb.Filter.Modems.Update.serializeBinaryToWriter
    );
  }
  f = message.getFilterTags();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      base_pb.Filter.Tags.Update.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      base_pb.UpdateClearableString.serializeBinaryToWriter
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      base_pb.UpdateClearableString.serializeBinaryToWriter
    );
  }
  f = message.getActive();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      base_pb.UpdateBoolean.serializeBinaryToWriter
    );
  }
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 id = 2;
 * @return {number}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional hiber.Filter.Events.Update filter_event_types = 3;
 * @return {?proto.hiber.Filter.Events.Update}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.getFilterEventTypes = function() {
  return /** @type{?proto.hiber.Filter.Events.Update} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Events.Update, 3));
};


/** @param {?proto.hiber.Filter.Events.Update|undefined} value */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.setFilterEventTypes = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.clearFilterEventTypes = function() {
  this.setFilterEventTypes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.hasFilterEventTypes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional hiber.Filter.Modems.Update filter_modem_numbers = 4;
 * @return {?proto.hiber.Filter.Modems.Update}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.getFilterModemNumbers = function() {
  return /** @type{?proto.hiber.Filter.Modems.Update} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Modems.Update, 4));
};


/** @param {?proto.hiber.Filter.Modems.Update|undefined} value */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.setFilterModemNumbers = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.clearFilterModemNumbers = function() {
  this.setFilterModemNumbers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.hasFilterModemNumbers = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional hiber.Filter.Tags.Update filter_tags = 5;
 * @return {?proto.hiber.Filter.Tags.Update}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.getFilterTags = function() {
  return /** @type{?proto.hiber.Filter.Tags.Update} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Tags.Update, 5));
};


/** @param {?proto.hiber.Filter.Tags.Update|undefined} value */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.setFilterTags = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.clearFilterTags = function() {
  this.setFilterTags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.hasFilterTags = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional hiber.UpdateClearableString description = 10;
 * @return {?proto.hiber.UpdateClearableString}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.getDescription = function() {
  return /** @type{?proto.hiber.UpdateClearableString} */ (
    jspb.Message.getWrapperField(this, base_pb.UpdateClearableString, 10));
};


/** @param {?proto.hiber.UpdateClearableString|undefined} value */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.setDescription = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.clearDescription = function() {
  this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string url = 11;
 * @return {string}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional hiber.UpdateClearableString channel = 12;
 * @return {?proto.hiber.UpdateClearableString}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.getChannel = function() {
  return /** @type{?proto.hiber.UpdateClearableString} */ (
    jspb.Message.getWrapperField(this, base_pb.UpdateClearableString, 12));
};


/** @param {?proto.hiber.UpdateClearableString|undefined} value */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.setChannel = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.clearChannel = function() {
  this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional hiber.UpdateBoolean active = 15;
 * @return {?proto.hiber.UpdateBoolean}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.getActive = function() {
  return /** @type{?proto.hiber.UpdateBoolean} */ (
    jspb.Message.getWrapperField(this, base_pb.UpdateBoolean, 15));
};


/** @param {?proto.hiber.UpdateBoolean|undefined} value */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.setActive = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.clearActive = function() {
  this.setActive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.UpdateSlackPublisherRequest.prototype.hasActive = function() {
  return jspb.Message.getField(this, 15) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.displayName = 'proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.integration.slack.SlackPublisherSelection.toObject(includeInstance, f),
    update: (f = msg.getUpdate()) && tag_pb.UpdateTagsForItem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest}
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest;
  return proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest}
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.integration.slack.SlackPublisherSelection;
      reader.readMessage(value,proto.hiber.integration.slack.SlackPublisherSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    case 3:
      var value = new tag_pb.UpdateTagsForItem;
      reader.readMessage(value,tag_pb.UpdateTagsForItem.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.slack.SlackPublisherSelection.serializeBinaryToWriter
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      tag_pb.UpdateTagsForItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response.displayName = 'proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    slackPublishersList: jspb.Message.toObjectList(msg.getSlackPublishersList(),
    proto.hiber.integration.slack.SlackPublisher.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response}
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response;
  return proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response}
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.integration.slack.SlackPublisher;
      reader.readMessage(value,proto.hiber.integration.slack.SlackPublisher.deserializeBinaryFromReader);
      msg.addSlackPublishers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlackPublishersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.integration.slack.SlackPublisher.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SlackPublisher slack_publishers = 1;
 * @return {!Array<!proto.hiber.integration.slack.SlackPublisher>}
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response.prototype.getSlackPublishersList = function() {
  return /** @type{!Array<!proto.hiber.integration.slack.SlackPublisher>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.integration.slack.SlackPublisher, 1));
};


/** @param {!Array<!proto.hiber.integration.slack.SlackPublisher>} value */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response.prototype.setSlackPublishersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.integration.slack.SlackPublisher=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.integration.slack.SlackPublisher}
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response.prototype.addSlackPublishers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.integration.slack.SlackPublisher, opt_index);
};


proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response.prototype.clearSlackPublishersList = function() {
  this.setSlackPublishersList([]);
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SlackPublisherSelection selection = 2;
 * @return {?proto.hiber.integration.slack.SlackPublisherSelection}
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.integration.slack.SlackPublisherSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.slack.SlackPublisherSelection, 2));
};


/** @param {?proto.hiber.integration.slack.SlackPublisherSelection|undefined} value */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.tag.UpdateTagsForItem update = 3;
 * @return {?proto.hiber.tag.UpdateTagsForItem}
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.prototype.getUpdate = function() {
  return /** @type{?proto.hiber.tag.UpdateTagsForItem} */ (
    jspb.Message.getWrapperField(this, tag_pb.UpdateTagsForItem, 3));
};


/** @param {?proto.hiber.tag.UpdateTagsForItem|undefined} value */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.prototype.setUpdate = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.prototype.clearUpdate = function() {
  this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.slack.UpdateSlackPublisherTagsRequest.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.DeleteSlackPublisherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.slack.DeleteSlackPublisherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.DeleteSlackPublisherRequest.displayName = 'proto.hiber.integration.slack.DeleteSlackPublisherRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.DeleteSlackPublisherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.DeleteSlackPublisherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.DeleteSlackPublisherRequest}
 */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.DeleteSlackPublisherRequest;
  return proto.hiber.integration.slack.DeleteSlackPublisherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.DeleteSlackPublisherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.DeleteSlackPublisherRequest}
 */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.DeleteSlackPublisherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.DeleteSlackPublisherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response.displayName = 'proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response}
 */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response;
  return proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response}
 */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 id = 2;
 * @return {number}
 */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hiber.integration.slack.DeleteSlackPublisherRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.hiber.integration.slack);
