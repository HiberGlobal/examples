/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var base_pb = require('./base_pb.js');
goog.object.extend(proto, base_pb);
var tag_pb = require('./tag_pb.js');
goog.object.extend(proto, tag_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.hiber.integration.mqtt.CreateMQTTPublisherRequest', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.DisableMQTTPublisherRequest', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.EnableMQTTPublisherRequest', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.ListMQTTPublishersRequest', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.MQTTMessage', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.MQTTPublisher', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.MQTTPublisher.ContentType', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.MQTTPublisher.Data', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.MQTTPublisher.Data.QoS', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.MQTTPublisherHistorySelection', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.MQTTPublisherSelection', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest', null, global);
goog.exportSymbol('proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.MQTTPublisher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.integration.mqtt.MQTTPublisher.repeatedFields_, null);
};
goog.inherits(proto.hiber.integration.mqtt.MQTTPublisher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.MQTTPublisher.displayName = 'proto.hiber.integration.mqtt.MQTTPublisher';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.integration.mqtt.MQTTPublisher.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.MQTTPublisher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.MQTTPublisher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.MQTTPublisher.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    data: (f = msg.getData()) && proto.hiber.integration.mqtt.MQTTPublisher.Data.toObject(includeInstance, f),
    filterEventTypes: (f = msg.getFilterEventTypes()) && base_pb.Filter.Events.toObject(includeInstance, f),
    filterModemNumbers: (f = msg.getFilterModemNumbers()) && base_pb.Filter.Modems.toObject(includeInstance, f),
    filterTags: (f = msg.getFilterTags()) && base_pb.Filter.Tags.toObject(includeInstance, f),
    health: jspb.Message.getFieldWithDefault(msg, 7, 0),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    tag_pb.Tag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.MQTTPublisher}
 */
proto.hiber.integration.mqtt.MQTTPublisher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.MQTTPublisher;
  return proto.hiber.integration.mqtt.MQTTPublisher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.MQTTPublisher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.MQTTPublisher}
 */
proto.hiber.integration.mqtt.MQTTPublisher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.hiber.integration.mqtt.MQTTPublisher.Data;
      reader.readMessage(value,proto.hiber.integration.mqtt.MQTTPublisher.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 4:
      var value = new base_pb.Filter.Events;
      reader.readMessage(value,base_pb.Filter.Events.deserializeBinaryFromReader);
      msg.setFilterEventTypes(value);
      break;
    case 5:
      var value = new base_pb.Filter.Modems;
      reader.readMessage(value,base_pb.Filter.Modems.deserializeBinaryFromReader);
      msg.setFilterModemNumbers(value);
      break;
    case 6:
      var value = new base_pb.Filter.Tags;
      reader.readMessage(value,base_pb.Filter.Tags.deserializeBinaryFromReader);
      msg.setFilterTags(value);
      break;
    case 7:
      var value = /** @type {!proto.hiber.Health} */ (reader.readEnum());
      msg.setHealth(value);
      break;
    case 8:
      var value = new tag_pb.Tag;
      reader.readMessage(value,tag_pb.Tag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.MQTTPublisher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.MQTTPublisher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.MQTTPublisher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hiber.integration.mqtt.MQTTPublisher.Data.serializeBinaryToWriter
    );
  }
  f = message.getFilterEventTypes();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      base_pb.Filter.Events.serializeBinaryToWriter
    );
  }
  f = message.getFilterModemNumbers();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      base_pb.Filter.Modems.serializeBinaryToWriter
    );
  }
  f = message.getFilterTags();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      base_pb.Filter.Tags.serializeBinaryToWriter
    );
  }
  f = message.getHealth();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      tag_pb.Tag.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.hiber.integration.mqtt.MQTTPublisher.ContentType = {
  DEFAULT: 0,
  JSON: 1,
  PROTO: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.mqtt.MQTTPublisher.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.MQTTPublisher.Data.displayName = 'proto.hiber.integration.mqtt.MQTTPublisher.Data';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.MQTTPublisher.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.MQTTPublisher.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contentType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    topic: jspb.Message.getFieldWithDefault(msg, 3, ""),
    qos: jspb.Message.getFieldWithDefault(msg, 4, 0),
    identifier: jspb.Message.getFieldWithDefault(msg, 5, ""),
    username: jspb.Message.getFieldWithDefault(msg, 6, ""),
    password: jspb.Message.getFieldWithDefault(msg, 7, ""),
    certificateId: jspb.Message.getFieldWithDefault(msg, 8, 0),
    certificateName: jspb.Message.getFieldWithDefault(msg, 10, ""),
    caCertificateId: jspb.Message.getFieldWithDefault(msg, 11, 0),
    caCertificateName: jspb.Message.getFieldWithDefault(msg, 12, ""),
    disabled: jspb.Message.getFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.MQTTPublisher.Data}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.MQTTPublisher.Data;
  return proto.hiber.integration.mqtt.MQTTPublisher.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.MQTTPublisher.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.MQTTPublisher.Data}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {!proto.hiber.integration.mqtt.MQTTPublisher.ContentType} */ (reader.readEnum());
      msg.setContentType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 4:
      var value = /** @type {!proto.hiber.integration.mqtt.MQTTPublisher.Data.QoS} */ (reader.readEnum());
      msg.setQos(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCertificateId(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertificateName(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCaCertificateId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaCertificateName(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.MQTTPublisher.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.MQTTPublisher.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContentType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getQos();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCertificateId();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getCertificateName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCaCertificateId();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getCaCertificateName();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getDisabled();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.QoS = {
  DEFAULT: 0,
  AT_MOST_ONCE: 1,
  AT_LEAST_ONCE: 2,
  EXACTLY_ONCE: 3
};

/**
 * optional string url = 1;
 * @return {string}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ContentType content_type = 2;
 * @return {!proto.hiber.integration.mqtt.MQTTPublisher.ContentType}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.getContentType = function() {
  return /** @type {!proto.hiber.integration.mqtt.MQTTPublisher.ContentType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hiber.integration.mqtt.MQTTPublisher.ContentType} value */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.setContentType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string topic = 3;
 * @return {string}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.setTopic = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional QoS qos = 4;
 * @return {!proto.hiber.integration.mqtt.MQTTPublisher.Data.QoS}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.getQos = function() {
  return /** @type {!proto.hiber.integration.mqtt.MQTTPublisher.Data.QoS} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.hiber.integration.mqtt.MQTTPublisher.Data.QoS} value */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.setQos = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string identifier = 5;
 * @return {string}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string username = 6;
 * @return {string}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string password = 7;
 * @return {string}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int64 certificate_id = 8;
 * @return {number}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.getCertificateId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.setCertificateId = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string certificate_name = 10;
 * @return {string}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.getCertificateName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.setCertificateName = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int64 ca_certificate_id = 11;
 * @return {number}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.getCaCertificateId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.setCaCertificateId = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string ca_certificate_name = 12;
 * @return {string}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.getCaCertificateName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.setCaCertificateName = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bool disabled = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.getDisabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.hiber.integration.mqtt.MQTTPublisher.Data.prototype.setDisabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Data data = 3;
 * @return {?proto.hiber.integration.mqtt.MQTTPublisher.Data}
 */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.getData = function() {
  return /** @type{?proto.hiber.integration.mqtt.MQTTPublisher.Data} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.mqtt.MQTTPublisher.Data, 3));
};


/** @param {?proto.hiber.integration.mqtt.MQTTPublisher.Data|undefined} value */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.mqtt.MQTTPublisher.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional hiber.Filter.Events filter_event_types = 4;
 * @return {?proto.hiber.Filter.Events}
 */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.getFilterEventTypes = function() {
  return /** @type{?proto.hiber.Filter.Events} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Events, 4));
};


/** @param {?proto.hiber.Filter.Events|undefined} value */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.setFilterEventTypes = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hiber.integration.mqtt.MQTTPublisher.prototype.clearFilterEventTypes = function() {
  this.setFilterEventTypes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.hasFilterEventTypes = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional hiber.Filter.Modems filter_modem_numbers = 5;
 * @return {?proto.hiber.Filter.Modems}
 */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.getFilterModemNumbers = function() {
  return /** @type{?proto.hiber.Filter.Modems} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Modems, 5));
};


/** @param {?proto.hiber.Filter.Modems|undefined} value */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.setFilterModemNumbers = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.hiber.integration.mqtt.MQTTPublisher.prototype.clearFilterModemNumbers = function() {
  this.setFilterModemNumbers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.hasFilterModemNumbers = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional hiber.Filter.Tags filter_tags = 6;
 * @return {?proto.hiber.Filter.Tags}
 */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.getFilterTags = function() {
  return /** @type{?proto.hiber.Filter.Tags} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Tags, 6));
};


/** @param {?proto.hiber.Filter.Tags|undefined} value */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.setFilterTags = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.hiber.integration.mqtt.MQTTPublisher.prototype.clearFilterTags = function() {
  this.setFilterTags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.hasFilterTags = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional hiber.Health health = 7;
 * @return {!proto.hiber.Health}
 */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.getHealth = function() {
  return /** @type {!proto.hiber.Health} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.hiber.Health} value */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.setHealth = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * repeated hiber.tag.Tag tags = 8;
 * @return {!Array<!proto.hiber.tag.Tag>}
 */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.hiber.tag.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, tag_pb.Tag, 8));
};


/** @param {!Array<!proto.hiber.tag.Tag>} value */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.hiber.tag.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.tag.Tag}
 */
proto.hiber.integration.mqtt.MQTTPublisher.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.hiber.tag.Tag, opt_index);
};


proto.hiber.integration.mqtt.MQTTPublisher.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.MQTTMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.mqtt.MQTTMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.MQTTMessage.displayName = 'proto.hiber.integration.mqtt.MQTTMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.MQTTMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.MQTTMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.MQTTMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.MQTTMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = msg.getTime()) && base_pb.Timestamp.toObject(includeInstance, f),
    publisherData: (f = msg.getPublisherData()) && proto.hiber.integration.mqtt.MQTTPublisher.Data.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && base_pb.BytesOrHex.toObject(includeInstance, f),
    successful: jspb.Message.getFieldWithDefault(msg, 4, false),
    error: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.MQTTMessage}
 */
proto.hiber.integration.mqtt.MQTTMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.MQTTMessage;
  return proto.hiber.integration.mqtt.MQTTMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.MQTTMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.MQTTMessage}
 */
proto.hiber.integration.mqtt.MQTTMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.Timestamp;
      reader.readMessage(value,base_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 2:
      var value = new proto.hiber.integration.mqtt.MQTTPublisher.Data;
      reader.readMessage(value,proto.hiber.integration.mqtt.MQTTPublisher.Data.deserializeBinaryFromReader);
      msg.setPublisherData(value);
      break;
    case 3:
      var value = new base_pb.BytesOrHex;
      reader.readMessage(value,base_pb.BytesOrHex.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccessful(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.MQTTMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.MQTTMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.MQTTMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.MQTTMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPublisherData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.mqtt.MQTTPublisher.Data.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.BytesOrHex.serializeBinaryToWriter
    );
  }
  f = message.getSuccessful();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional hiber.Timestamp time = 1;
 * @return {?proto.hiber.Timestamp}
 */
proto.hiber.integration.mqtt.MQTTMessage.prototype.getTime = function() {
  return /** @type{?proto.hiber.Timestamp} */ (
    jspb.Message.getWrapperField(this, base_pb.Timestamp, 1));
};


/** @param {?proto.hiber.Timestamp|undefined} value */
proto.hiber.integration.mqtt.MQTTMessage.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hiber.integration.mqtt.MQTTMessage.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTMessage.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MQTTPublisher.Data publisher_data = 2;
 * @return {?proto.hiber.integration.mqtt.MQTTPublisher.Data}
 */
proto.hiber.integration.mqtt.MQTTMessage.prototype.getPublisherData = function() {
  return /** @type{?proto.hiber.integration.mqtt.MQTTPublisher.Data} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.mqtt.MQTTPublisher.Data, 2));
};


/** @param {?proto.hiber.integration.mqtt.MQTTPublisher.Data|undefined} value */
proto.hiber.integration.mqtt.MQTTMessage.prototype.setPublisherData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.mqtt.MQTTMessage.prototype.clearPublisherData = function() {
  this.setPublisherData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTMessage.prototype.hasPublisherData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.BytesOrHex message = 3;
 * @return {?proto.hiber.BytesOrHex}
 */
proto.hiber.integration.mqtt.MQTTMessage.prototype.getMessage = function() {
  return /** @type{?proto.hiber.BytesOrHex} */ (
    jspb.Message.getWrapperField(this, base_pb.BytesOrHex, 3));
};


/** @param {?proto.hiber.BytesOrHex|undefined} value */
proto.hiber.integration.mqtt.MQTTMessage.prototype.setMessage = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.mqtt.MQTTMessage.prototype.clearMessage = function() {
  this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTMessage.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool successful = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTMessage.prototype.getSuccessful = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.hiber.integration.mqtt.MQTTMessage.prototype.setSuccessful = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string error = 5;
 * @return {string}
 */
proto.hiber.integration.mqtt.MQTTMessage.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.MQTTMessage.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.integration.mqtt.MQTTPublisherSelection.repeatedFields_, null);
};
goog.inherits(proto.hiber.integration.mqtt.MQTTPublisherSelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.MQTTPublisherSelection.displayName = 'proto.hiber.integration.mqtt.MQTTPublisherSelection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.repeatedFields_ = [5,6,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.MQTTPublisherSelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.MQTTPublisherSelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    publishers: (f = msg.getPublishers()) && base_pb.Filter.Publishers.toObject(includeInstance, f),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    searchUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    searchTopic: jspb.Message.getFieldWithDefault(msg, 4, ""),
    contentTypesList: jspb.Message.getRepeatedField(msg, 5),
    certificateIdsList: jspb.Message.getRepeatedField(msg, 6),
    tags: (f = msg.getTags()) && tag_pb.TagSelection.toObject(includeInstance, f),
    healthList: jspb.Message.getRepeatedField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.MQTTPublisherSelection}
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.MQTTPublisherSelection;
  return proto.hiber.integration.mqtt.MQTTPublisherSelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.MQTTPublisherSelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.MQTTPublisherSelection}
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.Filter.Publishers;
      reader.readMessage(value,base_pb.Filter.Publishers.deserializeBinaryFromReader);
      msg.setPublishers(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchTopic(value);
      break;
    case 5:
      var value = /** @type {!Array<!proto.hiber.integration.mqtt.MQTTPublisher.ContentType>} */ (reader.readPackedEnum());
      msg.setContentTypesList(value);
      break;
    case 6:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setCertificateIdsList(value);
      break;
    case 7:
      var value = new tag_pb.TagSelection;
      reader.readMessage(value,tag_pb.TagSelection.deserializeBinaryFromReader);
      msg.setTags(value);
      break;
    case 8:
      var value = /** @type {!Array<!proto.hiber.Health>} */ (reader.readPackedEnum());
      msg.setHealthList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.MQTTPublisherSelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.MQTTPublisherSelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublishers();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_pb.Filter.Publishers.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSearchUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSearchTopic();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContentTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
  f = message.getCertificateIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      6,
      f
    );
  }
  f = message.getTags();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      tag_pb.TagSelection.serializeBinaryToWriter
    );
  }
  f = message.getHealthList();
  if (f.length > 0) {
    writer.writePackedEnum(
      8,
      f
    );
  }
};


/**
 * optional hiber.Filter.Publishers publishers = 1;
 * @return {?proto.hiber.Filter.Publishers}
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.getPublishers = function() {
  return /** @type{?proto.hiber.Filter.Publishers} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Publishers, 1));
};


/** @param {?proto.hiber.Filter.Publishers|undefined} value */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.setPublishers = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.clearPublishers = function() {
  this.setPublishers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.hasPublishers = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string search_url = 3;
 * @return {string}
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.getSearchUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.setSearchUrl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string search_topic = 4;
 * @return {string}
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.getSearchTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.setSearchTopic = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated MQTTPublisher.ContentType content_types = 5;
 * @return {!Array<!proto.hiber.integration.mqtt.MQTTPublisher.ContentType>}
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.getContentTypesList = function() {
  return /** @type {!Array<!proto.hiber.integration.mqtt.MQTTPublisher.ContentType>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<!proto.hiber.integration.mqtt.MQTTPublisher.ContentType>} value */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.setContentTypesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.hiber.integration.mqtt.MQTTPublisher.ContentType} value
 * @param {number=} opt_index
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.addContentTypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.clearContentTypesList = function() {
  this.setContentTypesList([]);
};


/**
 * repeated int64 certificate_ids = 6;
 * @return {!Array<number>}
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.getCertificateIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<number>} value */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.setCertificateIdsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.addCertificateIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.clearCertificateIdsList = function() {
  this.setCertificateIdsList([]);
};


/**
 * optional hiber.tag.TagSelection tags = 7;
 * @return {?proto.hiber.tag.TagSelection}
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.getTags = function() {
  return /** @type{?proto.hiber.tag.TagSelection} */ (
    jspb.Message.getWrapperField(this, tag_pb.TagSelection, 7));
};


/** @param {?proto.hiber.tag.TagSelection|undefined} value */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.setTags = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.clearTags = function() {
  this.setTags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.hasTags = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated hiber.Health health = 8;
 * @return {!Array<!proto.hiber.Health>}
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.getHealthList = function() {
  return /** @type {!Array<!proto.hiber.Health>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<!proto.hiber.Health>} value */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.setHealthList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!proto.hiber.Health} value
 * @param {number=} opt_index
 */
proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.addHealth = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.hiber.integration.mqtt.MQTTPublisherSelection.prototype.clearHealthList = function() {
  this.setHealthList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.mqtt.ListMQTTPublishersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.ListMQTTPublishersRequest.displayName = 'proto.hiber.integration.mqtt.ListMQTTPublishersRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.ListMQTTPublishersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.ListMQTTPublishersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.integration.mqtt.MQTTPublisherSelection.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.ListMQTTPublishersRequest}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.ListMQTTPublishersRequest;
  return proto.hiber.integration.mqtt.ListMQTTPublishersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.ListMQTTPublishersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.ListMQTTPublishersRequest}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.integration.mqtt.MQTTPublisherSelection;
      reader.readMessage(value,proto.hiber.integration.mqtt.MQTTPublisherSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    case 3:
      var value = new base_pb.Pagination;
      reader.readMessage(value,base_pb.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.ListMQTTPublishersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.ListMQTTPublishersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.mqtt.MQTTPublisherSelection.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Pagination.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.displayName = 'proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    publishersList: jspb.Message.toObjectList(msg.getPublishersList(),
    proto.hiber.integration.mqtt.MQTTPublisher.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.integration.mqtt.ListMQTTPublishersRequest.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response;
  return proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.integration.mqtt.MQTTPublisher;
      reader.readMessage(value,proto.hiber.integration.mqtt.MQTTPublisher.deserializeBinaryFromReader);
      msg.addPublishers(value);
      break;
    case 2:
      var value = new proto.hiber.integration.mqtt.ListMQTTPublishersRequest;
      reader.readMessage(value,proto.hiber.integration.mqtt.ListMQTTPublishersRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 3:
      var value = new base_pb.Pagination.Result;
      reader.readMessage(value,base_pb.Pagination.Result.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublishersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.integration.mqtt.MQTTPublisher.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.mqtt.ListMQTTPublishersRequest.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Pagination.Result.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MQTTPublisher publishers = 1;
 * @return {!Array<!proto.hiber.integration.mqtt.MQTTPublisher>}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.prototype.getPublishersList = function() {
  return /** @type{!Array<!proto.hiber.integration.mqtt.MQTTPublisher>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.integration.mqtt.MQTTPublisher, 1));
};


/** @param {!Array<!proto.hiber.integration.mqtt.MQTTPublisher>} value */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.prototype.setPublishersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.integration.mqtt.MQTTPublisher=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.integration.mqtt.MQTTPublisher}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.prototype.addPublishers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.integration.mqtt.MQTTPublisher, opt_index);
};


proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.prototype.clearPublishersList = function() {
  this.setPublishersList([]);
};


/**
 * optional ListMQTTPublishersRequest request = 2;
 * @return {?proto.hiber.integration.mqtt.ListMQTTPublishersRequest}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.integration.mqtt.ListMQTTPublishersRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.mqtt.ListMQTTPublishersRequest, 2));
};


/** @param {?proto.hiber.integration.mqtt.ListMQTTPublishersRequest|undefined} value */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.Pagination.Result pagination = 3;
 * @return {?proto.hiber.Pagination.Result}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination.Result} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination.Result, 3));
};


/** @param {?proto.hiber.Pagination.Result|undefined} value */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.Response.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MQTTPublisherSelection selection = 2;
 * @return {?proto.hiber.integration.mqtt.MQTTPublisherSelection}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.integration.mqtt.MQTTPublisherSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.mqtt.MQTTPublisherSelection, 2));
};


/** @param {?proto.hiber.integration.mqtt.MQTTPublisherSelection|undefined} value */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.mqtt.ListMQTTPublishersRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.Pagination pagination = 3;
 * @return {?proto.hiber.Pagination}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination, 3));
};


/** @param {?proto.hiber.Pagination|undefined} value */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.mqtt.ListMQTTPublishersRequest.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.ListMQTTPublishersRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.MQTTPublisherHistorySelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.mqtt.MQTTPublisherHistorySelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.displayName = 'proto.hiber.integration.mqtt.MQTTPublisherHistorySelection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.MQTTPublisherHistorySelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeRange: (f = msg.getTimeRange()) && base_pb.TimeRange.toObject(includeInstance, f),
    onlyFailures: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.MQTTPublisherHistorySelection}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.MQTTPublisherHistorySelection;
  return proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.MQTTPublisherHistorySelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.MQTTPublisherHistorySelection}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.TimeRange;
      reader.readMessage(value,base_pb.TimeRange.deserializeBinaryFromReader);
      msg.setTimeRange(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnlyFailures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.MQTTPublisherHistorySelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeRange();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_pb.TimeRange.serializeBinaryToWriter
    );
  }
  f = message.getOnlyFailures();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional hiber.TimeRange time_range = 1;
 * @return {?proto.hiber.TimeRange}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.prototype.getTimeRange = function() {
  return /** @type{?proto.hiber.TimeRange} */ (
    jspb.Message.getWrapperField(this, base_pb.TimeRange, 1));
};


/** @param {?proto.hiber.TimeRange|undefined} value */
proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.prototype.setTimeRange = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.prototype.clearTimeRange = function() {
  this.setTimeRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.prototype.hasTimeRange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool only_failures = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.prototype.getOnlyFailures = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.prototype.setOnlyFailures = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.displayName = 'proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    selection: (f = msg.getSelection()) && proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest;
  return proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.hiber.integration.mqtt.MQTTPublisherHistorySelection;
      reader.readMessage(value,proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    case 4:
      var value = new base_pb.Pagination;
      reader.readMessage(value,base_pb.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hiber.integration.mqtt.MQTTPublisherHistorySelection.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      base_pb.Pagination.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.displayName = 'proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.hiber.integration.mqtt.MQTTMessage.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response;
  return proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.integration.mqtt.MQTTMessage;
      reader.readMessage(value,proto.hiber.integration.mqtt.MQTTMessage.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 2:
      var value = new proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest;
      reader.readMessage(value,proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 3:
      var value = new base_pb.Pagination.Result;
      reader.readMessage(value,base_pb.Pagination.Result.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.integration.mqtt.MQTTMessage.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Pagination.Result.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MQTTMessage items = 1;
 * @return {!Array<!proto.hiber.integration.mqtt.MQTTMessage>}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.hiber.integration.mqtt.MQTTMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.integration.mqtt.MQTTMessage, 1));
};


/** @param {!Array<!proto.hiber.integration.mqtt.MQTTMessage>} value */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.integration.mqtt.MQTTMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.integration.mqtt.MQTTMessage}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.integration.mqtt.MQTTMessage, opt_index);
};


proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.prototype.clearItemsList = function() {
  this.setItemsList([]);
};


/**
 * optional MQTTPublisherHistoryRequest request = 2;
 * @return {?proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest, 2));
};


/** @param {?proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest|undefined} value */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.Pagination.Result pagination = 3;
 * @return {?proto.hiber.Pagination.Result}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination.Result} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination.Result, 3));
};


/** @param {?proto.hiber.Pagination.Result|undefined} value */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 id = 2;
 * @return {number}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional MQTTPublisherHistorySelection selection = 3;
 * @return {?proto.hiber.integration.mqtt.MQTTPublisherHistorySelection}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.integration.mqtt.MQTTPublisherHistorySelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.mqtt.MQTTPublisherHistorySelection, 3));
};


/** @param {?proto.hiber.integration.mqtt.MQTTPublisherHistorySelection|undefined} value */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional hiber.Pagination pagination = 4;
 * @return {?proto.hiber.Pagination}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination, 4));
};


/** @param {?proto.hiber.Pagination|undefined} value */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.MQTTPublisherHistoryRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.repeatedFields_, null);
};
goog.inherits(proto.hiber.integration.mqtt.CreateMQTTPublisherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.displayName = 'proto.hiber.integration.mqtt.CreateMQTTPublisherRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.repeatedFields_ = [20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.CreateMQTTPublisherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    filterEventTypes: (f = msg.getFilterEventTypes()) && base_pb.Filter.Events.toObject(includeInstance, f),
    filterModemNumbers: (f = msg.getFilterModemNumbers()) && base_pb.Filter.Modems.toObject(includeInstance, f),
    filterTags: (f = msg.getFilterTags()) && base_pb.Filter.Tags.toObject(includeInstance, f),
    url: jspb.Message.getFieldWithDefault(msg, 10, ""),
    contentType: jspb.Message.getFieldWithDefault(msg, 11, 0),
    topic: jspb.Message.getFieldWithDefault(msg, 12, ""),
    qos: jspb.Message.getFieldWithDefault(msg, 13, 0),
    identifier: jspb.Message.getFieldWithDefault(msg, 14, ""),
    username: jspb.Message.getFieldWithDefault(msg, 15, ""),
    password: jspb.Message.getFieldWithDefault(msg, 16, ""),
    certificateId: jspb.Message.getFieldWithDefault(msg, 17, 0),
    disabled: jspb.Message.getFieldWithDefault(msg, 18, false),
    tagsList: jspb.Message.getRepeatedField(msg, 20)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.CreateMQTTPublisherRequest}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.CreateMQTTPublisherRequest;
  return proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.CreateMQTTPublisherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.CreateMQTTPublisherRequest}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new base_pb.Filter.Events;
      reader.readMessage(value,base_pb.Filter.Events.deserializeBinaryFromReader);
      msg.setFilterEventTypes(value);
      break;
    case 4:
      var value = new base_pb.Filter.Modems;
      reader.readMessage(value,base_pb.Filter.Modems.deserializeBinaryFromReader);
      msg.setFilterModemNumbers(value);
      break;
    case 5:
      var value = new base_pb.Filter.Tags;
      reader.readMessage(value,base_pb.Filter.Tags.deserializeBinaryFromReader);
      msg.setFilterTags(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 11:
      var value = /** @type {!proto.hiber.integration.mqtt.MQTTPublisher.ContentType} */ (reader.readEnum());
      msg.setContentType(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 13:
      var value = /** @type {!proto.hiber.integration.mqtt.MQTTPublisher.Data.QoS} */ (reader.readEnum());
      msg.setQos(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCertificateId(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisabled(value);
      break;
    case 20:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setTagsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.CreateMQTTPublisherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFilterEventTypes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Filter.Events.serializeBinaryToWriter
    );
  }
  f = message.getFilterModemNumbers();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      base_pb.Filter.Modems.serializeBinaryToWriter
    );
  }
  f = message.getFilterTags();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      base_pb.Filter.Tags.serializeBinaryToWriter
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getContentType();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getQos();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getCertificateId();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getDisabled();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      20,
      f
    );
  }
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional hiber.Filter.Events filter_event_types = 3;
 * @return {?proto.hiber.Filter.Events}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.getFilterEventTypes = function() {
  return /** @type{?proto.hiber.Filter.Events} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Events, 3));
};


/** @param {?proto.hiber.Filter.Events|undefined} value */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.setFilterEventTypes = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.clearFilterEventTypes = function() {
  this.setFilterEventTypes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.hasFilterEventTypes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional hiber.Filter.Modems filter_modem_numbers = 4;
 * @return {?proto.hiber.Filter.Modems}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.getFilterModemNumbers = function() {
  return /** @type{?proto.hiber.Filter.Modems} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Modems, 4));
};


/** @param {?proto.hiber.Filter.Modems|undefined} value */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.setFilterModemNumbers = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.clearFilterModemNumbers = function() {
  this.setFilterModemNumbers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.hasFilterModemNumbers = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional hiber.Filter.Tags filter_tags = 5;
 * @return {?proto.hiber.Filter.Tags}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.getFilterTags = function() {
  return /** @type{?proto.hiber.Filter.Tags} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Tags, 5));
};


/** @param {?proto.hiber.Filter.Tags|undefined} value */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.setFilterTags = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.clearFilterTags = function() {
  this.setFilterTags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.hasFilterTags = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string url = 10;
 * @return {string}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional MQTTPublisher.ContentType content_type = 11;
 * @return {!proto.hiber.integration.mqtt.MQTTPublisher.ContentType}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.getContentType = function() {
  return /** @type {!proto.hiber.integration.mqtt.MQTTPublisher.ContentType} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.hiber.integration.mqtt.MQTTPublisher.ContentType} value */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.setContentType = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional string topic = 12;
 * @return {string}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.setTopic = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional MQTTPublisher.Data.QoS qos = 13;
 * @return {!proto.hiber.integration.mqtt.MQTTPublisher.Data.QoS}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.getQos = function() {
  return /** @type {!proto.hiber.integration.mqtt.MQTTPublisher.Data.QoS} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {!proto.hiber.integration.mqtt.MQTTPublisher.Data.QoS} value */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.setQos = function(value) {
  jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional string identifier = 14;
 * @return {string}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string username = 15;
 * @return {string}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string password = 16;
 * @return {string}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional int64 certificate_id = 17;
 * @return {number}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.getCertificateId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.setCertificateId = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional bool disabled = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.getDisabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 18, false));
};


/** @param {boolean} value */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.setDisabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * repeated int64 tags = 20;
 * @return {!Array<number>}
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.getTagsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 20));
};


/** @param {!Array<number>} value */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 20, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 20, value, opt_index);
};


proto.hiber.integration.mqtt.CreateMQTTPublisherRequest.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.mqtt.EnableMQTTPublisherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.displayName = 'proto.hiber.integration.mqtt.EnableMQTTPublisherRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.EnableMQTTPublisherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.integration.mqtt.MQTTPublisherSelection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.EnableMQTTPublisherRequest}
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.EnableMQTTPublisherRequest;
  return proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.EnableMQTTPublisherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.EnableMQTTPublisherRequest}
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.integration.mqtt.MQTTPublisherSelection;
      reader.readMessage(value,proto.hiber.integration.mqtt.MQTTPublisherSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.EnableMQTTPublisherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.mqtt.MQTTPublisherSelection.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.displayName = 'proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    publishersList: jspb.Message.toObjectList(msg.getPublishersList(),
    proto.hiber.integration.mqtt.MQTTPublisher.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response}
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response;
  return proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response}
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.integration.mqtt.MQTTPublisher;
      reader.readMessage(value,proto.hiber.integration.mqtt.MQTTPublisher.deserializeBinaryFromReader);
      msg.addPublishers(value);
      break;
    case 2:
      var value = new proto.hiber.integration.mqtt.EnableMQTTPublisherRequest;
      reader.readMessage(value,proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublishersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.integration.mqtt.MQTTPublisher.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MQTTPublisher publishers = 1;
 * @return {!Array<!proto.hiber.integration.mqtt.MQTTPublisher>}
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.prototype.getPublishersList = function() {
  return /** @type{!Array<!proto.hiber.integration.mqtt.MQTTPublisher>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.integration.mqtt.MQTTPublisher, 1));
};


/** @param {!Array<!proto.hiber.integration.mqtt.MQTTPublisher>} value */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.prototype.setPublishersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.integration.mqtt.MQTTPublisher=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.integration.mqtt.MQTTPublisher}
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.prototype.addPublishers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.integration.mqtt.MQTTPublisher, opt_index);
};


proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.prototype.clearPublishersList = function() {
  this.setPublishersList([]);
};


/**
 * optional EnableMQTTPublisherRequest request = 2;
 * @return {?proto.hiber.integration.mqtt.EnableMQTTPublisherRequest}
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.integration.mqtt.EnableMQTTPublisherRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.mqtt.EnableMQTTPublisherRequest, 2));
};


/** @param {?proto.hiber.integration.mqtt.EnableMQTTPublisherRequest|undefined} value */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MQTTPublisherSelection selection = 2;
 * @return {?proto.hiber.integration.mqtt.MQTTPublisherSelection}
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.integration.mqtt.MQTTPublisherSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.mqtt.MQTTPublisherSelection, 2));
};


/** @param {?proto.hiber.integration.mqtt.MQTTPublisherSelection|undefined} value */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.EnableMQTTPublisherRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.mqtt.DisableMQTTPublisherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.displayName = 'proto.hiber.integration.mqtt.DisableMQTTPublisherRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.DisableMQTTPublisherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.integration.mqtt.MQTTPublisherSelection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.DisableMQTTPublisherRequest}
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.DisableMQTTPublisherRequest;
  return proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.DisableMQTTPublisherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.DisableMQTTPublisherRequest}
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.integration.mqtt.MQTTPublisherSelection;
      reader.readMessage(value,proto.hiber.integration.mqtt.MQTTPublisherSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.DisableMQTTPublisherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.mqtt.MQTTPublisherSelection.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.displayName = 'proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    publishersList: jspb.Message.toObjectList(msg.getPublishersList(),
    proto.hiber.integration.mqtt.MQTTPublisher.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response}
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response;
  return proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response}
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.integration.mqtt.MQTTPublisher;
      reader.readMessage(value,proto.hiber.integration.mqtt.MQTTPublisher.deserializeBinaryFromReader);
      msg.addPublishers(value);
      break;
    case 2:
      var value = new proto.hiber.integration.mqtt.DisableMQTTPublisherRequest;
      reader.readMessage(value,proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublishersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.integration.mqtt.MQTTPublisher.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MQTTPublisher publishers = 1;
 * @return {!Array<!proto.hiber.integration.mqtt.MQTTPublisher>}
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.prototype.getPublishersList = function() {
  return /** @type{!Array<!proto.hiber.integration.mqtt.MQTTPublisher>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.integration.mqtt.MQTTPublisher, 1));
};


/** @param {!Array<!proto.hiber.integration.mqtt.MQTTPublisher>} value */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.prototype.setPublishersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.integration.mqtt.MQTTPublisher=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.integration.mqtt.MQTTPublisher}
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.prototype.addPublishers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.integration.mqtt.MQTTPublisher, opt_index);
};


proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.prototype.clearPublishersList = function() {
  this.setPublishersList([]);
};


/**
 * optional DisableMQTTPublisherRequest request = 2;
 * @return {?proto.hiber.integration.mqtt.DisableMQTTPublisherRequest}
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.integration.mqtt.DisableMQTTPublisherRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.mqtt.DisableMQTTPublisherRequest, 2));
};


/** @param {?proto.hiber.integration.mqtt.DisableMQTTPublisherRequest|undefined} value */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MQTTPublisherSelection selection = 2;
 * @return {?proto.hiber.integration.mqtt.MQTTPublisherSelection}
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.integration.mqtt.MQTTPublisherSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.mqtt.MQTTPublisherSelection, 2));
};


/** @param {?proto.hiber.integration.mqtt.MQTTPublisherSelection|undefined} value */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.DisableMQTTPublisherRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.displayName = 'proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filterEventTypes: (f = msg.getFilterEventTypes()) && base_pb.Filter.Events.Update.toObject(includeInstance, f),
    filterModemNumbers: (f = msg.getFilterModemNumbers()) && base_pb.Filter.Modems.Update.toObject(includeInstance, f),
    filterTags: (f = msg.getFilterTags()) && base_pb.Filter.Tags.Update.toObject(includeInstance, f),
    description: (f = msg.getDescription()) && base_pb.UpdateClearableString.toObject(includeInstance, f),
    url: jspb.Message.getFieldWithDefault(msg, 11, ""),
    contentType: jspb.Message.getFieldWithDefault(msg, 12, 0),
    topic: jspb.Message.getFieldWithDefault(msg, 13, ""),
    qos: jspb.Message.getFieldWithDefault(msg, 14, 0),
    identifier: (f = msg.getIdentifier()) && base_pb.UpdateClearableString.toObject(includeInstance, f),
    username: (f = msg.getUsername()) && base_pb.UpdateClearableString.toObject(includeInstance, f),
    password: (f = msg.getPassword()) && base_pb.UpdateClearableString.toObject(includeInstance, f),
    certificateId: (f = msg.getCertificateId()) && base_pb.UpdateOptionalId.toObject(includeInstance, f),
    active: (f = msg.getActive()) && base_pb.UpdateBoolean.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest;
  return proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 3:
      var value = new base_pb.Filter.Events.Update;
      reader.readMessage(value,base_pb.Filter.Events.Update.deserializeBinaryFromReader);
      msg.setFilterEventTypes(value);
      break;
    case 4:
      var value = new base_pb.Filter.Modems.Update;
      reader.readMessage(value,base_pb.Filter.Modems.Update.deserializeBinaryFromReader);
      msg.setFilterModemNumbers(value);
      break;
    case 5:
      var value = new base_pb.Filter.Tags.Update;
      reader.readMessage(value,base_pb.Filter.Tags.Update.deserializeBinaryFromReader);
      msg.setFilterTags(value);
      break;
    case 10:
      var value = new base_pb.UpdateClearableString;
      reader.readMessage(value,base_pb.UpdateClearableString.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 12:
      var value = /** @type {!proto.hiber.integration.mqtt.MQTTPublisher.ContentType} */ (reader.readEnum());
      msg.setContentType(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 14:
      var value = /** @type {!proto.hiber.integration.mqtt.MQTTPublisher.Data.QoS} */ (reader.readEnum());
      msg.setQos(value);
      break;
    case 15:
      var value = new base_pb.UpdateClearableString;
      reader.readMessage(value,base_pb.UpdateClearableString.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    case 16:
      var value = new base_pb.UpdateClearableString;
      reader.readMessage(value,base_pb.UpdateClearableString.deserializeBinaryFromReader);
      msg.setUsername(value);
      break;
    case 17:
      var value = new base_pb.UpdateClearableString;
      reader.readMessage(value,base_pb.UpdateClearableString.deserializeBinaryFromReader);
      msg.setPassword(value);
      break;
    case 18:
      var value = new base_pb.UpdateOptionalId;
      reader.readMessage(value,base_pb.UpdateOptionalId.deserializeBinaryFromReader);
      msg.setCertificateId(value);
      break;
    case 19:
      var value = new base_pb.UpdateBoolean;
      reader.readMessage(value,base_pb.UpdateBoolean.deserializeBinaryFromReader);
      msg.setActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFilterEventTypes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Filter.Events.Update.serializeBinaryToWriter
    );
  }
  f = message.getFilterModemNumbers();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      base_pb.Filter.Modems.Update.serializeBinaryToWriter
    );
  }
  f = message.getFilterTags();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      base_pb.Filter.Tags.Update.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      base_pb.UpdateClearableString.serializeBinaryToWriter
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getContentType();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getQos();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      base_pb.UpdateClearableString.serializeBinaryToWriter
    );
  }
  f = message.getUsername();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      base_pb.UpdateClearableString.serializeBinaryToWriter
    );
  }
  f = message.getPassword();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      base_pb.UpdateClearableString.serializeBinaryToWriter
    );
  }
  f = message.getCertificateId();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      base_pb.UpdateOptionalId.serializeBinaryToWriter
    );
  }
  f = message.getActive();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      base_pb.UpdateBoolean.serializeBinaryToWriter
    );
  }
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 id = 2;
 * @return {number}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional hiber.Filter.Events.Update filter_event_types = 3;
 * @return {?proto.hiber.Filter.Events.Update}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.getFilterEventTypes = function() {
  return /** @type{?proto.hiber.Filter.Events.Update} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Events.Update, 3));
};


/** @param {?proto.hiber.Filter.Events.Update|undefined} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.setFilterEventTypes = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.clearFilterEventTypes = function() {
  this.setFilterEventTypes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.hasFilterEventTypes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional hiber.Filter.Modems.Update filter_modem_numbers = 4;
 * @return {?proto.hiber.Filter.Modems.Update}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.getFilterModemNumbers = function() {
  return /** @type{?proto.hiber.Filter.Modems.Update} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Modems.Update, 4));
};


/** @param {?proto.hiber.Filter.Modems.Update|undefined} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.setFilterModemNumbers = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.clearFilterModemNumbers = function() {
  this.setFilterModemNumbers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.hasFilterModemNumbers = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional hiber.Filter.Tags.Update filter_tags = 5;
 * @return {?proto.hiber.Filter.Tags.Update}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.getFilterTags = function() {
  return /** @type{?proto.hiber.Filter.Tags.Update} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Tags.Update, 5));
};


/** @param {?proto.hiber.Filter.Tags.Update|undefined} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.setFilterTags = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.clearFilterTags = function() {
  this.setFilterTags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.hasFilterTags = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional hiber.UpdateClearableString description = 10;
 * @return {?proto.hiber.UpdateClearableString}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.getDescription = function() {
  return /** @type{?proto.hiber.UpdateClearableString} */ (
    jspb.Message.getWrapperField(this, base_pb.UpdateClearableString, 10));
};


/** @param {?proto.hiber.UpdateClearableString|undefined} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.setDescription = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.clearDescription = function() {
  this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string url = 11;
 * @return {string}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional MQTTPublisher.ContentType content_type = 12;
 * @return {!proto.hiber.integration.mqtt.MQTTPublisher.ContentType}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.getContentType = function() {
  return /** @type {!proto.hiber.integration.mqtt.MQTTPublisher.ContentType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.hiber.integration.mqtt.MQTTPublisher.ContentType} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.setContentType = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional string topic = 13;
 * @return {string}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.setTopic = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional MQTTPublisher.Data.QoS qos = 14;
 * @return {!proto.hiber.integration.mqtt.MQTTPublisher.Data.QoS}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.getQos = function() {
  return /** @type {!proto.hiber.integration.mqtt.MQTTPublisher.Data.QoS} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {!proto.hiber.integration.mqtt.MQTTPublisher.Data.QoS} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.setQos = function(value) {
  jspb.Message.setProto3EnumField(this, 14, value);
};


/**
 * optional hiber.UpdateClearableString identifier = 15;
 * @return {?proto.hiber.UpdateClearableString}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.getIdentifier = function() {
  return /** @type{?proto.hiber.UpdateClearableString} */ (
    jspb.Message.getWrapperField(this, base_pb.UpdateClearableString, 15));
};


/** @param {?proto.hiber.UpdateClearableString|undefined} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.setIdentifier = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.clearIdentifier = function() {
  this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional hiber.UpdateClearableString username = 16;
 * @return {?proto.hiber.UpdateClearableString}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.getUsername = function() {
  return /** @type{?proto.hiber.UpdateClearableString} */ (
    jspb.Message.getWrapperField(this, base_pb.UpdateClearableString, 16));
};


/** @param {?proto.hiber.UpdateClearableString|undefined} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.setUsername = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.clearUsername = function() {
  this.setUsername(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional hiber.UpdateClearableString password = 17;
 * @return {?proto.hiber.UpdateClearableString}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.getPassword = function() {
  return /** @type{?proto.hiber.UpdateClearableString} */ (
    jspb.Message.getWrapperField(this, base_pb.UpdateClearableString, 17));
};


/** @param {?proto.hiber.UpdateClearableString|undefined} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.setPassword = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.clearPassword = function() {
  this.setPassword(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional hiber.UpdateOptionalId certificate_id = 18;
 * @return {?proto.hiber.UpdateOptionalId}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.getCertificateId = function() {
  return /** @type{?proto.hiber.UpdateOptionalId} */ (
    jspb.Message.getWrapperField(this, base_pb.UpdateOptionalId, 18));
};


/** @param {?proto.hiber.UpdateOptionalId|undefined} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.setCertificateId = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.clearCertificateId = function() {
  this.setCertificateId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.hasCertificateId = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional hiber.UpdateBoolean active = 19;
 * @return {?proto.hiber.UpdateBoolean}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.getActive = function() {
  return /** @type{?proto.hiber.UpdateBoolean} */ (
    jspb.Message.getWrapperField(this, base_pb.UpdateBoolean, 19));
};


/** @param {?proto.hiber.UpdateBoolean|undefined} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.setActive = function(value) {
  jspb.Message.setWrapperField(this, 19, value);
};


proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.clearActive = function() {
  this.setActive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherRequest.prototype.hasActive = function() {
  return jspb.Message.getField(this, 19) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.displayName = 'proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.integration.mqtt.MQTTPublisherSelection.toObject(includeInstance, f),
    update: (f = msg.getUpdate()) && tag_pb.UpdateTagsForItem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest;
  return proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.integration.mqtt.MQTTPublisherSelection;
      reader.readMessage(value,proto.hiber.integration.mqtt.MQTTPublisherSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    case 3:
      var value = new tag_pb.UpdateTagsForItem;
      reader.readMessage(value,tag_pb.UpdateTagsForItem.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.integration.mqtt.MQTTPublisherSelection.serializeBinaryToWriter
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      tag_pb.UpdateTagsForItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response.displayName = 'proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    mqttPublishersList: jspb.Message.toObjectList(msg.getMqttPublishersList(),
    proto.hiber.integration.mqtt.MQTTPublisher.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response;
  return proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.integration.mqtt.MQTTPublisher;
      reader.readMessage(value,proto.hiber.integration.mqtt.MQTTPublisher.deserializeBinaryFromReader);
      msg.addMqttPublishers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMqttPublishersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.integration.mqtt.MQTTPublisher.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MQTTPublisher mqtt_publishers = 1;
 * @return {!Array<!proto.hiber.integration.mqtt.MQTTPublisher>}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response.prototype.getMqttPublishersList = function() {
  return /** @type{!Array<!proto.hiber.integration.mqtt.MQTTPublisher>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.integration.mqtt.MQTTPublisher, 1));
};


/** @param {!Array<!proto.hiber.integration.mqtt.MQTTPublisher>} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response.prototype.setMqttPublishersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.integration.mqtt.MQTTPublisher=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.integration.mqtt.MQTTPublisher}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response.prototype.addMqttPublishers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.integration.mqtt.MQTTPublisher, opt_index);
};


proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response.prototype.clearMqttPublishersList = function() {
  this.setMqttPublishersList([]);
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MQTTPublisherSelection selection = 2;
 * @return {?proto.hiber.integration.mqtt.MQTTPublisherSelection}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.integration.mqtt.MQTTPublisherSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.integration.mqtt.MQTTPublisherSelection, 2));
};


/** @param {?proto.hiber.integration.mqtt.MQTTPublisherSelection|undefined} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.tag.UpdateTagsForItem update = 3;
 * @return {?proto.hiber.tag.UpdateTagsForItem}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.prototype.getUpdate = function() {
  return /** @type{?proto.hiber.tag.UpdateTagsForItem} */ (
    jspb.Message.getWrapperField(this, tag_pb.UpdateTagsForItem, 3));
};


/** @param {?proto.hiber.tag.UpdateTagsForItem|undefined} value */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.prototype.setUpdate = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.prototype.clearUpdate = function() {
  this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.displayName = 'proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest}
 */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest;
  return proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest}
 */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response.displayName = 'proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response}
 */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response;
  return proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response}
 */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 id = 2;
 * @return {number}
 */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hiber.integration.mqtt.DeleteMQTTPublisherRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.hiber.integration.mqtt);
