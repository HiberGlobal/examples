/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var base_pb = require('./base_pb.js');
var modem_pb = require('./modem_pb.js');
goog.exportSymbol('proto.hiber.map.GroundStation', null, global);
goog.exportSymbol('proto.hiber.map.MapBlock', null, global);
goog.exportSymbol('proto.hiber.map.MapRequest', null, global);
goog.exportSymbol('proto.hiber.map.MapRequest.Response', null, global);
goog.exportSymbol('proto.hiber.map.MapSelection', null, global);
goog.exportSymbol('proto.hiber.map.MapSelection.AreaRestriction', null, global);
goog.exportSymbol('proto.hiber.map.MapSelection.ShapeRestriction', null, global);
goog.exportSymbol('proto.hiber.map.MapTileItem', null, global);
goog.exportSymbol('proto.hiber.map.MapTileItem.Group', null, global);
goog.exportSymbol('proto.hiber.map.MapTileItem.Modem', null, global);
goog.exportSymbol('proto.hiber.map.Satellite', null, global);
goog.exportSymbol('proto.hiber.map.Satellite.Position', null, global);
goog.exportSymbol('proto.hiber.map.SatellitesRequest', null, global);
goog.exportSymbol('proto.hiber.map.SatellitesRequest.Response', null, global);
goog.exportSymbol('proto.hiber.map.TileCoordinate', null, global);
goog.exportSymbol('proto.hiber.map.TileMapRequest', null, global);
goog.exportSymbol('proto.hiber.map.TileMapRequest.Density', null, global);
goog.exportSymbol('proto.hiber.map.TileMapRequest.Response', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.GroundStation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.map.GroundStation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.GroundStation.displayName = 'proto.hiber.map.GroundStation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.GroundStation.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.GroundStation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.GroundStation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.GroundStation.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && base_pb.Location.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.GroundStation}
 */
proto.hiber.map.GroundStation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.GroundStation;
  return proto.hiber.map.GroundStation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.GroundStation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.GroundStation}
 */
proto.hiber.map.GroundStation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.Location;
      reader.readMessage(value,base_pb.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.GroundStation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.GroundStation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.GroundStation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.GroundStation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_pb.Location.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional hiber.Location location = 1;
 * @return {?proto.hiber.Location}
 */
proto.hiber.map.GroundStation.prototype.getLocation = function() {
  return /** @type{?proto.hiber.Location} */ (
    jspb.Message.getWrapperField(this, base_pb.Location, 1));
};


/** @param {?proto.hiber.Location|undefined} value */
proto.hiber.map.GroundStation.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hiber.map.GroundStation.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.GroundStation.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.hiber.map.GroundStation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.map.GroundStation.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.TileCoordinate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.map.TileCoordinate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.TileCoordinate.displayName = 'proto.hiber.map.TileCoordinate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.TileCoordinate.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.TileCoordinate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.TileCoordinate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.TileCoordinate.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.TileCoordinate}
 */
proto.hiber.map.TileCoordinate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.TileCoordinate;
  return proto.hiber.map.TileCoordinate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.TileCoordinate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.TileCoordinate}
 */
proto.hiber.map.TileCoordinate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.TileCoordinate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.TileCoordinate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.TileCoordinate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.TileCoordinate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.hiber.map.TileCoordinate.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hiber.map.TileCoordinate.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.hiber.map.TileCoordinate.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hiber.map.TileCoordinate.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.MapTileItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.hiber.map.MapTileItem.oneofGroups_);
};
goog.inherits(proto.hiber.map.MapTileItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.MapTileItem.displayName = 'proto.hiber.map.MapTileItem';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.hiber.map.MapTileItem.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.hiber.map.MapTileItem.ModemsCase = {
  MODEMS_NOT_SET: 0,
  MODEM: 3,
  MODEM_GROUP: 4
};

/**
 * @return {proto.hiber.map.MapTileItem.ModemsCase}
 */
proto.hiber.map.MapTileItem.prototype.getModemsCase = function() {
  return /** @type {proto.hiber.map.MapTileItem.ModemsCase} */(jspb.Message.computeOneofCase(this, proto.hiber.map.MapTileItem.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.MapTileItem.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.MapTileItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.MapTileItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapTileItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    tile: (f = msg.getTile()) && proto.hiber.map.TileCoordinate.toObject(includeInstance, f),
    inTile: (f = msg.getInTile()) && proto.hiber.map.TileCoordinate.toObject(includeInstance, f),
    modem: (f = msg.getModem()) && proto.hiber.map.MapTileItem.Modem.toObject(includeInstance, f),
    modemGroup: (f = msg.getModemGroup()) && proto.hiber.map.MapTileItem.Group.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.MapTileItem}
 */
proto.hiber.map.MapTileItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.MapTileItem;
  return proto.hiber.map.MapTileItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.MapTileItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.MapTileItem}
 */
proto.hiber.map.MapTileItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.map.TileCoordinate;
      reader.readMessage(value,proto.hiber.map.TileCoordinate.deserializeBinaryFromReader);
      msg.setTile(value);
      break;
    case 2:
      var value = new proto.hiber.map.TileCoordinate;
      reader.readMessage(value,proto.hiber.map.TileCoordinate.deserializeBinaryFromReader);
      msg.setInTile(value);
      break;
    case 3:
      var value = new proto.hiber.map.MapTileItem.Modem;
      reader.readMessage(value,proto.hiber.map.MapTileItem.Modem.deserializeBinaryFromReader);
      msg.setModem(value);
      break;
    case 4:
      var value = new proto.hiber.map.MapTileItem.Group;
      reader.readMessage(value,proto.hiber.map.MapTileItem.Group.deserializeBinaryFromReader);
      msg.setModemGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.MapTileItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.MapTileItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.MapTileItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapTileItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hiber.map.TileCoordinate.serializeBinaryToWriter
    );
  }
  f = message.getInTile();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.map.TileCoordinate.serializeBinaryToWriter
    );
  }
  f = message.getModem();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hiber.map.MapTileItem.Modem.serializeBinaryToWriter
    );
  }
  f = message.getModemGroup();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.hiber.map.MapTileItem.Group.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.MapTileItem.Modem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.map.MapTileItem.Modem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.MapTileItem.Modem.displayName = 'proto.hiber.map.MapTileItem.Modem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.MapTileItem.Modem.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.MapTileItem.Modem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.MapTileItem.Modem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapTileItem.Modem.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, ""),
    location: (f = msg.getLocation()) && base_pb.Location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.MapTileItem.Modem}
 */
proto.hiber.map.MapTileItem.Modem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.MapTileItem.Modem;
  return proto.hiber.map.MapTileItem.Modem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.MapTileItem.Modem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.MapTileItem.Modem}
 */
proto.hiber.map.MapTileItem.Modem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    case 2:
      var value = new base_pb.Location;
      reader.readMessage(value,base_pb.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.MapTileItem.Modem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.MapTileItem.Modem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.MapTileItem.Modem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapTileItem.Modem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_pb.Location.serializeBinaryToWriter
    );
  }
};


/**
 * optional string number = 1;
 * @return {string}
 */
proto.hiber.map.MapTileItem.Modem.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.map.MapTileItem.Modem.prototype.setNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional hiber.Location location = 2;
 * @return {?proto.hiber.Location}
 */
proto.hiber.map.MapTileItem.Modem.prototype.getLocation = function() {
  return /** @type{?proto.hiber.Location} */ (
    jspb.Message.getWrapperField(this, base_pb.Location, 2));
};


/** @param {?proto.hiber.Location|undefined} value */
proto.hiber.map.MapTileItem.Modem.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.map.MapTileItem.Modem.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.MapTileItem.Modem.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.MapTileItem.Group = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.map.MapTileItem.Group, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.MapTileItem.Group.displayName = 'proto.hiber.map.MapTileItem.Group';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.MapTileItem.Group.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.MapTileItem.Group.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.MapTileItem.Group} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapTileItem.Group.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    area: (f = msg.getArea()) && base_pb.Area.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.MapTileItem.Group}
 */
proto.hiber.map.MapTileItem.Group.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.MapTileItem.Group;
  return proto.hiber.map.MapTileItem.Group.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.MapTileItem.Group} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.MapTileItem.Group}
 */
proto.hiber.map.MapTileItem.Group.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 2:
      var value = new base_pb.Area;
      reader.readMessage(value,base_pb.Area.deserializeBinaryFromReader);
      msg.setArea(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.MapTileItem.Group.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.MapTileItem.Group.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.MapTileItem.Group} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapTileItem.Group.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getArea();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_pb.Area.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.hiber.map.MapTileItem.Group.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hiber.map.MapTileItem.Group.prototype.setCount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional hiber.Area area = 2;
 * @return {?proto.hiber.Area}
 */
proto.hiber.map.MapTileItem.Group.prototype.getArea = function() {
  return /** @type{?proto.hiber.Area} */ (
    jspb.Message.getWrapperField(this, base_pb.Area, 2));
};


/** @param {?proto.hiber.Area|undefined} value */
proto.hiber.map.MapTileItem.Group.prototype.setArea = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.map.MapTileItem.Group.prototype.clearArea = function() {
  this.setArea(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.MapTileItem.Group.prototype.hasArea = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TileCoordinate tile = 1;
 * @return {?proto.hiber.map.TileCoordinate}
 */
proto.hiber.map.MapTileItem.prototype.getTile = function() {
  return /** @type{?proto.hiber.map.TileCoordinate} */ (
    jspb.Message.getWrapperField(this, proto.hiber.map.TileCoordinate, 1));
};


/** @param {?proto.hiber.map.TileCoordinate|undefined} value */
proto.hiber.map.MapTileItem.prototype.setTile = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hiber.map.MapTileItem.prototype.clearTile = function() {
  this.setTile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.MapTileItem.prototype.hasTile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TileCoordinate in_tile = 2;
 * @return {?proto.hiber.map.TileCoordinate}
 */
proto.hiber.map.MapTileItem.prototype.getInTile = function() {
  return /** @type{?proto.hiber.map.TileCoordinate} */ (
    jspb.Message.getWrapperField(this, proto.hiber.map.TileCoordinate, 2));
};


/** @param {?proto.hiber.map.TileCoordinate|undefined} value */
proto.hiber.map.MapTileItem.prototype.setInTile = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.map.MapTileItem.prototype.clearInTile = function() {
  this.setInTile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.MapTileItem.prototype.hasInTile = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Modem modem = 3;
 * @return {?proto.hiber.map.MapTileItem.Modem}
 */
proto.hiber.map.MapTileItem.prototype.getModem = function() {
  return /** @type{?proto.hiber.map.MapTileItem.Modem} */ (
    jspb.Message.getWrapperField(this, proto.hiber.map.MapTileItem.Modem, 3));
};


/** @param {?proto.hiber.map.MapTileItem.Modem|undefined} value */
proto.hiber.map.MapTileItem.prototype.setModem = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.hiber.map.MapTileItem.oneofGroups_[0], value);
};


proto.hiber.map.MapTileItem.prototype.clearModem = function() {
  this.setModem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.MapTileItem.prototype.hasModem = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Group modem_group = 4;
 * @return {?proto.hiber.map.MapTileItem.Group}
 */
proto.hiber.map.MapTileItem.prototype.getModemGroup = function() {
  return /** @type{?proto.hiber.map.MapTileItem.Group} */ (
    jspb.Message.getWrapperField(this, proto.hiber.map.MapTileItem.Group, 4));
};


/** @param {?proto.hiber.map.MapTileItem.Group|undefined} value */
proto.hiber.map.MapTileItem.prototype.setModemGroup = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.hiber.map.MapTileItem.oneofGroups_[0], value);
};


proto.hiber.map.MapTileItem.prototype.clearModemGroup = function() {
  this.setModemGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.MapTileItem.prototype.hasModemGroup = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.TileMapRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.map.TileMapRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.TileMapRequest.displayName = 'proto.hiber.map.TileMapRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.TileMapRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.TileMapRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.TileMapRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.TileMapRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && base_pb.LocationSelection.toObject(includeInstance, f),
    level: jspb.Message.getFieldWithDefault(msg, 3, 0),
    modemSelection: (f = msg.getModemSelection()) && modem_pb.ModemSelection.toObject(includeInstance, f),
    includeSatellites: jspb.Message.getFieldWithDefault(msg, 5, false),
    includeGroundStations: jspb.Message.getFieldWithDefault(msg, 6, false),
    density: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.TileMapRequest}
 */
proto.hiber.map.TileMapRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.TileMapRequest;
  return proto.hiber.map.TileMapRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.TileMapRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.TileMapRequest}
 */
proto.hiber.map.TileMapRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new base_pb.LocationSelection;
      reader.readMessage(value,base_pb.LocationSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 4:
      var value = new modem_pb.ModemSelection;
      reader.readMessage(value,modem_pb.ModemSelection.deserializeBinaryFromReader);
      msg.setModemSelection(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeSatellites(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeGroundStations(value);
      break;
    case 7:
      var value = /** @type {!proto.hiber.map.TileMapRequest.Density} */ (reader.readEnum());
      msg.setDensity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.TileMapRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.TileMapRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.TileMapRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.TileMapRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_pb.LocationSelection.serializeBinaryToWriter
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getModemSelection();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modem_pb.ModemSelection.serializeBinaryToWriter
    );
  }
  f = message.getIncludeSatellites();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIncludeGroundStations();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDensity();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hiber.map.TileMapRequest.Density = {
  DEFAULT: 0,
  DENSE: 1,
  SPARSE: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.TileMapRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.map.TileMapRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.map.TileMapRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.TileMapRequest.Response.displayName = 'proto.hiber.map.TileMapRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.map.TileMapRequest.Response.repeatedFields_ = [1,2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.TileMapRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.TileMapRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.TileMapRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.TileMapRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    groundStationsList: jspb.Message.toObjectList(msg.getGroundStationsList(),
    proto.hiber.map.GroundStation.toObject, includeInstance),
    mapItemsList: jspb.Message.toObjectList(msg.getMapItemsList(),
    proto.hiber.map.MapTileItem.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.map.TileMapRequest.toObject(includeInstance, f),
    satellitesList: jspb.Message.toObjectList(msg.getSatellitesList(),
    proto.hiber.map.Satellite.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.TileMapRequest.Response}
 */
proto.hiber.map.TileMapRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.TileMapRequest.Response;
  return proto.hiber.map.TileMapRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.TileMapRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.TileMapRequest.Response}
 */
proto.hiber.map.TileMapRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.map.GroundStation;
      reader.readMessage(value,proto.hiber.map.GroundStation.deserializeBinaryFromReader);
      msg.addGroundStations(value);
      break;
    case 2:
      var value = new proto.hiber.map.MapTileItem;
      reader.readMessage(value,proto.hiber.map.MapTileItem.deserializeBinaryFromReader);
      msg.addMapItems(value);
      break;
    case 4:
      var value = new proto.hiber.map.TileMapRequest;
      reader.readMessage(value,proto.hiber.map.TileMapRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 5:
      var value = new proto.hiber.map.Satellite;
      reader.readMessage(value,proto.hiber.map.Satellite.deserializeBinaryFromReader);
      msg.addSatellites(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.TileMapRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.TileMapRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.TileMapRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.TileMapRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroundStationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.map.GroundStation.serializeBinaryToWriter
    );
  }
  f = message.getMapItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.hiber.map.MapTileItem.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.hiber.map.TileMapRequest.serializeBinaryToWriter
    );
  }
  f = message.getSatellitesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.hiber.map.Satellite.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GroundStation ground_stations = 1;
 * @return {!Array.<!proto.hiber.map.GroundStation>}
 */
proto.hiber.map.TileMapRequest.Response.prototype.getGroundStationsList = function() {
  return /** @type{!Array.<!proto.hiber.map.GroundStation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.map.GroundStation, 1));
};


/** @param {!Array.<!proto.hiber.map.GroundStation>} value */
proto.hiber.map.TileMapRequest.Response.prototype.setGroundStationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.map.GroundStation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.map.GroundStation}
 */
proto.hiber.map.TileMapRequest.Response.prototype.addGroundStations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.map.GroundStation, opt_index);
};


proto.hiber.map.TileMapRequest.Response.prototype.clearGroundStationsList = function() {
  this.setGroundStationsList([]);
};


/**
 * repeated MapTileItem map_items = 2;
 * @return {!Array.<!proto.hiber.map.MapTileItem>}
 */
proto.hiber.map.TileMapRequest.Response.prototype.getMapItemsList = function() {
  return /** @type{!Array.<!proto.hiber.map.MapTileItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.map.MapTileItem, 2));
};


/** @param {!Array.<!proto.hiber.map.MapTileItem>} value */
proto.hiber.map.TileMapRequest.Response.prototype.setMapItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.hiber.map.MapTileItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.map.MapTileItem}
 */
proto.hiber.map.TileMapRequest.Response.prototype.addMapItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.hiber.map.MapTileItem, opt_index);
};


proto.hiber.map.TileMapRequest.Response.prototype.clearMapItemsList = function() {
  this.setMapItemsList([]);
};


/**
 * optional TileMapRequest request = 4;
 * @return {?proto.hiber.map.TileMapRequest}
 */
proto.hiber.map.TileMapRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.map.TileMapRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.map.TileMapRequest, 4));
};


/** @param {?proto.hiber.map.TileMapRequest|undefined} value */
proto.hiber.map.TileMapRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hiber.map.TileMapRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.TileMapRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Satellite satellites = 5;
 * @return {!Array.<!proto.hiber.map.Satellite>}
 */
proto.hiber.map.TileMapRequest.Response.prototype.getSatellitesList = function() {
  return /** @type{!Array.<!proto.hiber.map.Satellite>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.map.Satellite, 5));
};


/** @param {!Array.<!proto.hiber.map.Satellite>} value */
proto.hiber.map.TileMapRequest.Response.prototype.setSatellitesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.hiber.map.Satellite=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.map.Satellite}
 */
proto.hiber.map.TileMapRequest.Response.prototype.addSatellites = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.hiber.map.Satellite, opt_index);
};


proto.hiber.map.TileMapRequest.Response.prototype.clearSatellitesList = function() {
  this.setSatellitesList([]);
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.map.TileMapRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.map.TileMapRequest.prototype.setOrganization = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional hiber.LocationSelection selection = 2;
 * @return {?proto.hiber.LocationSelection}
 */
proto.hiber.map.TileMapRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.LocationSelection} */ (
    jspb.Message.getWrapperField(this, base_pb.LocationSelection, 2));
};


/** @param {?proto.hiber.LocationSelection|undefined} value */
proto.hiber.map.TileMapRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.map.TileMapRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.TileMapRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 level = 3;
 * @return {number}
 */
proto.hiber.map.TileMapRequest.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.hiber.map.TileMapRequest.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional hiber.modem.ModemSelection modem_selection = 4;
 * @return {?proto.hiber.modem.ModemSelection}
 */
proto.hiber.map.TileMapRequest.prototype.getModemSelection = function() {
  return /** @type{?proto.hiber.modem.ModemSelection} */ (
    jspb.Message.getWrapperField(this, modem_pb.ModemSelection, 4));
};


/** @param {?proto.hiber.modem.ModemSelection|undefined} value */
proto.hiber.map.TileMapRequest.prototype.setModemSelection = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hiber.map.TileMapRequest.prototype.clearModemSelection = function() {
  this.setModemSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.TileMapRequest.prototype.hasModemSelection = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool include_satellites = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.map.TileMapRequest.prototype.getIncludeSatellites = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.hiber.map.TileMapRequest.prototype.setIncludeSatellites = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool include_ground_stations = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.map.TileMapRequest.prototype.getIncludeGroundStations = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.hiber.map.TileMapRequest.prototype.setIncludeGroundStations = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional Density density = 7;
 * @return {!proto.hiber.map.TileMapRequest.Density}
 */
proto.hiber.map.TileMapRequest.prototype.getDensity = function() {
  return /** @type {!proto.hiber.map.TileMapRequest.Density} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.hiber.map.TileMapRequest.Density} value */
proto.hiber.map.TileMapRequest.prototype.setDensity = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.Satellite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.map.Satellite.repeatedFields_, null);
};
goog.inherits(proto.hiber.map.Satellite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.Satellite.displayName = 'proto.hiber.map.Satellite';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.map.Satellite.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.Satellite.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.Satellite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.Satellite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.Satellite.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    positionsList: jspb.Message.toObjectList(msg.getPositionsList(),
    proto.hiber.map.Satellite.Position.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.Satellite}
 */
proto.hiber.map.Satellite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.Satellite;
  return proto.hiber.map.Satellite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.Satellite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.Satellite}
 */
proto.hiber.map.Satellite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.hiber.map.Satellite.Position;
      reader.readMessage(value,proto.hiber.map.Satellite.Position.deserializeBinaryFromReader);
      msg.addPositions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.Satellite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.Satellite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.Satellite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.Satellite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPositionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.hiber.map.Satellite.Position.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.Satellite.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.map.Satellite.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.Satellite.Position.displayName = 'proto.hiber.map.Satellite.Position';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.Satellite.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.Satellite.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.Satellite.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.Satellite.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = msg.getTime()) && base_pb.Timestamp.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && base_pb.Location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.Satellite.Position}
 */
proto.hiber.map.Satellite.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.Satellite.Position;
  return proto.hiber.map.Satellite.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.Satellite.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.Satellite.Position}
 */
proto.hiber.map.Satellite.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.Timestamp;
      reader.readMessage(value,base_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 2:
      var value = new base_pb.Location;
      reader.readMessage(value,base_pb.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.Satellite.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.Satellite.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.Satellite.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.Satellite.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_pb.Location.serializeBinaryToWriter
    );
  }
};


/**
 * optional hiber.Timestamp time = 1;
 * @return {?proto.hiber.Timestamp}
 */
proto.hiber.map.Satellite.Position.prototype.getTime = function() {
  return /** @type{?proto.hiber.Timestamp} */ (
    jspb.Message.getWrapperField(this, base_pb.Timestamp, 1));
};


/** @param {?proto.hiber.Timestamp|undefined} value */
proto.hiber.map.Satellite.Position.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hiber.map.Satellite.Position.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.Satellite.Position.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional hiber.Location location = 2;
 * @return {?proto.hiber.Location}
 */
proto.hiber.map.Satellite.Position.prototype.getLocation = function() {
  return /** @type{?proto.hiber.Location} */ (
    jspb.Message.getWrapperField(this, base_pb.Location, 2));
};


/** @param {?proto.hiber.Location|undefined} value */
proto.hiber.map.Satellite.Position.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.map.Satellite.Position.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.Satellite.Position.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.hiber.map.Satellite.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hiber.map.Satellite.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.hiber.map.Satellite.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.map.Satellite.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated Position positions = 3;
 * @return {!Array.<!proto.hiber.map.Satellite.Position>}
 */
proto.hiber.map.Satellite.prototype.getPositionsList = function() {
  return /** @type{!Array.<!proto.hiber.map.Satellite.Position>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.map.Satellite.Position, 3));
};


/** @param {!Array.<!proto.hiber.map.Satellite.Position>} value */
proto.hiber.map.Satellite.prototype.setPositionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.hiber.map.Satellite.Position=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.map.Satellite.Position}
 */
proto.hiber.map.Satellite.prototype.addPositions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.hiber.map.Satellite.Position, opt_index);
};


proto.hiber.map.Satellite.prototype.clearPositionsList = function() {
  this.setPositionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.SatellitesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.map.SatellitesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.SatellitesRequest.displayName = 'proto.hiber.map.SatellitesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.SatellitesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.SatellitesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.SatellitesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.SatellitesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.SatellitesRequest}
 */
proto.hiber.map.SatellitesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.SatellitesRequest;
  return proto.hiber.map.SatellitesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.SatellitesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.SatellitesRequest}
 */
proto.hiber.map.SatellitesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.SatellitesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.SatellitesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.SatellitesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.SatellitesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.SatellitesRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.map.SatellitesRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.map.SatellitesRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.SatellitesRequest.Response.displayName = 'proto.hiber.map.SatellitesRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.map.SatellitesRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.SatellitesRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.SatellitesRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.SatellitesRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.SatellitesRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    satellitesList: jspb.Message.toObjectList(msg.getSatellitesList(),
    proto.hiber.map.Satellite.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.SatellitesRequest.Response}
 */
proto.hiber.map.SatellitesRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.SatellitesRequest.Response;
  return proto.hiber.map.SatellitesRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.SatellitesRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.SatellitesRequest.Response}
 */
proto.hiber.map.SatellitesRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.map.Satellite;
      reader.readMessage(value,proto.hiber.map.Satellite.deserializeBinaryFromReader);
      msg.addSatellites(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.SatellitesRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.SatellitesRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.SatellitesRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.SatellitesRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSatellitesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.map.Satellite.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Satellite satellites = 1;
 * @return {!Array.<!proto.hiber.map.Satellite>}
 */
proto.hiber.map.SatellitesRequest.Response.prototype.getSatellitesList = function() {
  return /** @type{!Array.<!proto.hiber.map.Satellite>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.map.Satellite, 1));
};


/** @param {!Array.<!proto.hiber.map.Satellite>} value */
proto.hiber.map.SatellitesRequest.Response.prototype.setSatellitesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.map.Satellite=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.map.Satellite}
 */
proto.hiber.map.SatellitesRequest.Response.prototype.addSatellites = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.map.Satellite, opt_index);
};


proto.hiber.map.SatellitesRequest.Response.prototype.clearSatellitesList = function() {
  this.setSatellitesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.MapSelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.map.MapSelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.MapSelection.displayName = 'proto.hiber.map.MapSelection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.MapSelection.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.MapSelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.MapSelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapSelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    modems: (f = msg.getModems()) && base_pb.Filter.Modems.toObject(includeInstance, f),
    level: jspb.Message.getFieldWithDefault(msg, 3, 0),
    area: (f = msg.getArea()) && proto.hiber.map.MapSelection.AreaRestriction.toObject(includeInstance, f),
    shape: (f = msg.getShape()) && proto.hiber.map.MapSelection.ShapeRestriction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.MapSelection}
 */
proto.hiber.map.MapSelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.MapSelection;
  return proto.hiber.map.MapSelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.MapSelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.MapSelection}
 */
proto.hiber.map.MapSelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.Filter.Modems;
      reader.readMessage(value,base_pb.Filter.Modems.deserializeBinaryFromReader);
      msg.setModems(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 4:
      var value = new proto.hiber.map.MapSelection.AreaRestriction;
      reader.readMessage(value,proto.hiber.map.MapSelection.AreaRestriction.deserializeBinaryFromReader);
      msg.setArea(value);
      break;
    case 5:
      var value = new proto.hiber.map.MapSelection.ShapeRestriction;
      reader.readMessage(value,proto.hiber.map.MapSelection.ShapeRestriction.deserializeBinaryFromReader);
      msg.setShape(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.MapSelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.MapSelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.MapSelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapSelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModems();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_pb.Filter.Modems.serializeBinaryToWriter
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getArea();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.hiber.map.MapSelection.AreaRestriction.serializeBinaryToWriter
    );
  }
  f = message.getShape();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.hiber.map.MapSelection.ShapeRestriction.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.MapSelection.AreaRestriction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.map.MapSelection.AreaRestriction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.MapSelection.AreaRestriction.displayName = 'proto.hiber.map.MapSelection.AreaRestriction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.MapSelection.AreaRestriction.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.MapSelection.AreaRestriction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.MapSelection.AreaRestriction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapSelection.AreaRestriction.toObject = function(includeInstance, msg) {
  var f, obj = {
    bottomLeft: (f = msg.getBottomLeft()) && base_pb.Location.toObject(includeInstance, f),
    topRight: (f = msg.getTopRight()) && base_pb.Location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.MapSelection.AreaRestriction}
 */
proto.hiber.map.MapSelection.AreaRestriction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.MapSelection.AreaRestriction;
  return proto.hiber.map.MapSelection.AreaRestriction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.MapSelection.AreaRestriction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.MapSelection.AreaRestriction}
 */
proto.hiber.map.MapSelection.AreaRestriction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.Location;
      reader.readMessage(value,base_pb.Location.deserializeBinaryFromReader);
      msg.setBottomLeft(value);
      break;
    case 2:
      var value = new base_pb.Location;
      reader.readMessage(value,base_pb.Location.deserializeBinaryFromReader);
      msg.setTopRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.MapSelection.AreaRestriction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.MapSelection.AreaRestriction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.MapSelection.AreaRestriction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapSelection.AreaRestriction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBottomLeft();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_pb.Location.serializeBinaryToWriter
    );
  }
  f = message.getTopRight();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_pb.Location.serializeBinaryToWriter
    );
  }
};


/**
 * optional hiber.Location bottom_left = 1;
 * @return {?proto.hiber.Location}
 */
proto.hiber.map.MapSelection.AreaRestriction.prototype.getBottomLeft = function() {
  return /** @type{?proto.hiber.Location} */ (
    jspb.Message.getWrapperField(this, base_pb.Location, 1));
};


/** @param {?proto.hiber.Location|undefined} value */
proto.hiber.map.MapSelection.AreaRestriction.prototype.setBottomLeft = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hiber.map.MapSelection.AreaRestriction.prototype.clearBottomLeft = function() {
  this.setBottomLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.MapSelection.AreaRestriction.prototype.hasBottomLeft = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional hiber.Location top_right = 2;
 * @return {?proto.hiber.Location}
 */
proto.hiber.map.MapSelection.AreaRestriction.prototype.getTopRight = function() {
  return /** @type{?proto.hiber.Location} */ (
    jspb.Message.getWrapperField(this, base_pb.Location, 2));
};


/** @param {?proto.hiber.Location|undefined} value */
proto.hiber.map.MapSelection.AreaRestriction.prototype.setTopRight = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.map.MapSelection.AreaRestriction.prototype.clearTopRight = function() {
  this.setTopRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.MapSelection.AreaRestriction.prototype.hasTopRight = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.MapSelection.ShapeRestriction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.map.MapSelection.ShapeRestriction.repeatedFields_, null);
};
goog.inherits(proto.hiber.map.MapSelection.ShapeRestriction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.MapSelection.ShapeRestriction.displayName = 'proto.hiber.map.MapSelection.ShapeRestriction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.map.MapSelection.ShapeRestriction.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.MapSelection.ShapeRestriction.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.MapSelection.ShapeRestriction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.MapSelection.ShapeRestriction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapSelection.ShapeRestriction.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.toObjectList(msg.getPathList(),
    base_pb.Location.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.MapSelection.ShapeRestriction}
 */
proto.hiber.map.MapSelection.ShapeRestriction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.MapSelection.ShapeRestriction;
  return proto.hiber.map.MapSelection.ShapeRestriction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.MapSelection.ShapeRestriction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.MapSelection.ShapeRestriction}
 */
proto.hiber.map.MapSelection.ShapeRestriction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.Location;
      reader.readMessage(value,base_pb.Location.deserializeBinaryFromReader);
      msg.addPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.MapSelection.ShapeRestriction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.MapSelection.ShapeRestriction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.MapSelection.ShapeRestriction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapSelection.ShapeRestriction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      base_pb.Location.serializeBinaryToWriter
    );
  }
};


/**
 * repeated hiber.Location path = 1;
 * @return {!Array.<!proto.hiber.Location>}
 */
proto.hiber.map.MapSelection.ShapeRestriction.prototype.getPathList = function() {
  return /** @type{!Array.<!proto.hiber.Location>} */ (
    jspb.Message.getRepeatedWrapperField(this, base_pb.Location, 1));
};


/** @param {!Array.<!proto.hiber.Location>} value */
proto.hiber.map.MapSelection.ShapeRestriction.prototype.setPathList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.Location=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.Location}
 */
proto.hiber.map.MapSelection.ShapeRestriction.prototype.addPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.Location, opt_index);
};


proto.hiber.map.MapSelection.ShapeRestriction.prototype.clearPathList = function() {
  this.setPathList([]);
};


/**
 * optional hiber.Filter.Modems modems = 1;
 * @return {?proto.hiber.Filter.Modems}
 */
proto.hiber.map.MapSelection.prototype.getModems = function() {
  return /** @type{?proto.hiber.Filter.Modems} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Modems, 1));
};


/** @param {?proto.hiber.Filter.Modems|undefined} value */
proto.hiber.map.MapSelection.prototype.setModems = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hiber.map.MapSelection.prototype.clearModems = function() {
  this.setModems(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.MapSelection.prototype.hasModems = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 level = 3;
 * @return {number}
 */
proto.hiber.map.MapSelection.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.hiber.map.MapSelection.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional AreaRestriction area = 4;
 * @return {?proto.hiber.map.MapSelection.AreaRestriction}
 */
proto.hiber.map.MapSelection.prototype.getArea = function() {
  return /** @type{?proto.hiber.map.MapSelection.AreaRestriction} */ (
    jspb.Message.getWrapperField(this, proto.hiber.map.MapSelection.AreaRestriction, 4));
};


/** @param {?proto.hiber.map.MapSelection.AreaRestriction|undefined} value */
proto.hiber.map.MapSelection.prototype.setArea = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hiber.map.MapSelection.prototype.clearArea = function() {
  this.setArea(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.MapSelection.prototype.hasArea = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ShapeRestriction shape = 5;
 * @return {?proto.hiber.map.MapSelection.ShapeRestriction}
 */
proto.hiber.map.MapSelection.prototype.getShape = function() {
  return /** @type{?proto.hiber.map.MapSelection.ShapeRestriction} */ (
    jspb.Message.getWrapperField(this, proto.hiber.map.MapSelection.ShapeRestriction, 5));
};


/** @param {?proto.hiber.map.MapSelection.ShapeRestriction|undefined} value */
proto.hiber.map.MapSelection.prototype.setShape = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.hiber.map.MapSelection.prototype.clearShape = function() {
  this.setShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.MapSelection.prototype.hasShape = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.MapBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.map.MapBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.MapBlock.displayName = 'proto.hiber.map.MapBlock';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.MapBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.MapBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.MapBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    area: (f = msg.getArea()) && base_pb.Area.toObject(includeInstance, f),
    modemCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    errorPercentage: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.MapBlock}
 */
proto.hiber.map.MapBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.MapBlock;
  return proto.hiber.map.MapBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.MapBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.MapBlock}
 */
proto.hiber.map.MapBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.Area;
      reader.readMessage(value,base_pb.Area.deserializeBinaryFromReader);
      msg.setArea(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModemCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setErrorPercentage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.MapBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.MapBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.MapBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArea();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_pb.Area.serializeBinaryToWriter
    );
  }
  f = message.getModemCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getErrorPercentage();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional hiber.Area area = 1;
 * @return {?proto.hiber.Area}
 */
proto.hiber.map.MapBlock.prototype.getArea = function() {
  return /** @type{?proto.hiber.Area} */ (
    jspb.Message.getWrapperField(this, base_pb.Area, 1));
};


/** @param {?proto.hiber.Area|undefined} value */
proto.hiber.map.MapBlock.prototype.setArea = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hiber.map.MapBlock.prototype.clearArea = function() {
  this.setArea(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.MapBlock.prototype.hasArea = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 modem_count = 2;
 * @return {number}
 */
proto.hiber.map.MapBlock.prototype.getModemCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hiber.map.MapBlock.prototype.setModemCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 error_count = 3;
 * @return {number}
 */
proto.hiber.map.MapBlock.prototype.getErrorCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.hiber.map.MapBlock.prototype.setErrorCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float error_percentage = 4;
 * @return {number}
 */
proto.hiber.map.MapBlock.prototype.getErrorPercentage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.hiber.map.MapBlock.prototype.setErrorPercentage = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.MapRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.map.MapRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.MapRequest.displayName = 'proto.hiber.map.MapRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.MapRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.MapRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.MapRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.map.MapSelection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.MapRequest}
 */
proto.hiber.map.MapRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.MapRequest;
  return proto.hiber.map.MapRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.MapRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.MapRequest}
 */
proto.hiber.map.MapRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.map.MapSelection;
      reader.readMessage(value,proto.hiber.map.MapSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.MapRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.MapRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.MapRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.map.MapSelection.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.map.MapRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.map.MapRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.map.MapRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.map.MapRequest.Response.displayName = 'proto.hiber.map.MapRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.map.MapRequest.Response.repeatedFields_ = [1,2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.map.MapRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.map.MapRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.map.MapRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    groundStationsList: jspb.Message.toObjectList(msg.getGroundStationsList(),
    proto.hiber.map.GroundStation.toObject, includeInstance),
    mapBlocksList: jspb.Message.toObjectList(msg.getMapBlocksList(),
    proto.hiber.map.MapBlock.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.map.MapRequest.toObject(includeInstance, f),
    satellitesList: jspb.Message.toObjectList(msg.getSatellitesList(),
    proto.hiber.map.Satellite.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.map.MapRequest.Response}
 */
proto.hiber.map.MapRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.map.MapRequest.Response;
  return proto.hiber.map.MapRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.map.MapRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.map.MapRequest.Response}
 */
proto.hiber.map.MapRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.map.GroundStation;
      reader.readMessage(value,proto.hiber.map.GroundStation.deserializeBinaryFromReader);
      msg.addGroundStations(value);
      break;
    case 2:
      var value = new proto.hiber.map.MapBlock;
      reader.readMessage(value,proto.hiber.map.MapBlock.deserializeBinaryFromReader);
      msg.addMapBlocks(value);
      break;
    case 4:
      var value = new proto.hiber.map.MapRequest;
      reader.readMessage(value,proto.hiber.map.MapRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 5:
      var value = new proto.hiber.map.Satellite;
      reader.readMessage(value,proto.hiber.map.Satellite.deserializeBinaryFromReader);
      msg.addSatellites(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.map.MapRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.map.MapRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.map.MapRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.map.MapRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroundStationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.map.GroundStation.serializeBinaryToWriter
    );
  }
  f = message.getMapBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.hiber.map.MapBlock.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.hiber.map.MapRequest.serializeBinaryToWriter
    );
  }
  f = message.getSatellitesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.hiber.map.Satellite.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GroundStation ground_stations = 1;
 * @return {!Array.<!proto.hiber.map.GroundStation>}
 */
proto.hiber.map.MapRequest.Response.prototype.getGroundStationsList = function() {
  return /** @type{!Array.<!proto.hiber.map.GroundStation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.map.GroundStation, 1));
};


/** @param {!Array.<!proto.hiber.map.GroundStation>} value */
proto.hiber.map.MapRequest.Response.prototype.setGroundStationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.map.GroundStation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.map.GroundStation}
 */
proto.hiber.map.MapRequest.Response.prototype.addGroundStations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.map.GroundStation, opt_index);
};


proto.hiber.map.MapRequest.Response.prototype.clearGroundStationsList = function() {
  this.setGroundStationsList([]);
};


/**
 * repeated MapBlock map_blocks = 2;
 * @return {!Array.<!proto.hiber.map.MapBlock>}
 */
proto.hiber.map.MapRequest.Response.prototype.getMapBlocksList = function() {
  return /** @type{!Array.<!proto.hiber.map.MapBlock>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.map.MapBlock, 2));
};


/** @param {!Array.<!proto.hiber.map.MapBlock>} value */
proto.hiber.map.MapRequest.Response.prototype.setMapBlocksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.hiber.map.MapBlock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.map.MapBlock}
 */
proto.hiber.map.MapRequest.Response.prototype.addMapBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.hiber.map.MapBlock, opt_index);
};


proto.hiber.map.MapRequest.Response.prototype.clearMapBlocksList = function() {
  this.setMapBlocksList([]);
};


/**
 * optional MapRequest request = 4;
 * @return {?proto.hiber.map.MapRequest}
 */
proto.hiber.map.MapRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.map.MapRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.map.MapRequest, 4));
};


/** @param {?proto.hiber.map.MapRequest|undefined} value */
proto.hiber.map.MapRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hiber.map.MapRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.MapRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Satellite satellites = 5;
 * @return {!Array.<!proto.hiber.map.Satellite>}
 */
proto.hiber.map.MapRequest.Response.prototype.getSatellitesList = function() {
  return /** @type{!Array.<!proto.hiber.map.Satellite>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.map.Satellite, 5));
};


/** @param {!Array.<!proto.hiber.map.Satellite>} value */
proto.hiber.map.MapRequest.Response.prototype.setSatellitesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.hiber.map.Satellite=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.map.Satellite}
 */
proto.hiber.map.MapRequest.Response.prototype.addSatellites = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.hiber.map.Satellite, opt_index);
};


proto.hiber.map.MapRequest.Response.prototype.clearSatellitesList = function() {
  this.setSatellitesList([]);
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.map.MapRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.map.MapRequest.prototype.setOrganization = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional MapSelection selection = 2;
 * @return {?proto.hiber.map.MapSelection}
 */
proto.hiber.map.MapRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.map.MapSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.map.MapSelection, 2));
};


/** @param {?proto.hiber.map.MapSelection|undefined} value */
proto.hiber.map.MapRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.map.MapRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.map.MapRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.hiber.map);
