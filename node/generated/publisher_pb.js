/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var base_pb = require('./base_pb.js');
goog.object.extend(proto, base_pb);
var tag_pb = require('./tag_pb.js');
goog.object.extend(proto, tag_pb);
var webhook_pb = require('./webhook_pb.js');
goog.object.extend(proto, webhook_pb);
var email_notifications_pb = require('./email_notifications_pb.js');
goog.object.extend(proto, email_notifications_pb);
var integration_mqtt_pb = require('./integration_mqtt_pb.js');
goog.object.extend(proto, integration_mqtt_pb);
var integration_slack_pb = require('./integration_slack_pb.js');
goog.object.extend(proto, integration_slack_pb);
var integration_aws_iot_pb = require('./integration_aws_iot_pb.js');
goog.object.extend(proto, integration_aws_iot_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.hiber.publisher.Publisher', null, global);
goog.exportSymbol('proto.hiber.publisher.Publisher.ContentType', null, global);
goog.exportSymbol('proto.hiber.publisher.Publisher.Data', null, global);
goog.exportSymbol('proto.hiber.publisher.Publisher.Data.HTTPConfig', null, global);
goog.exportSymbol('proto.hiber.publisher.Publisher.Data.MQTTConfig', null, global);
goog.exportSymbol('proto.hiber.publisher.Publisher.Data.MQTTConfig.QoS', null, global);
goog.exportSymbol('proto.hiber.publisher.Publisher.Filters', null, global);
goog.exportSymbol('proto.hiber.publisher.Publisher.Type', null, global);
goog.exportSymbol('proto.hiber.publisher.UpdatePublisherRequest', null, global);
goog.exportSymbol('proto.hiber.publisher.UpdatePublisherRequest.UpdateModems', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.publisher.Publisher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.publisher.Publisher.repeatedFields_, proto.hiber.publisher.Publisher.oneofGroups_);
};
goog.inherits(proto.hiber.publisher.Publisher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.publisher.Publisher.displayName = 'proto.hiber.publisher.Publisher';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.publisher.Publisher.repeatedFields_ = [5];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.hiber.publisher.Publisher.oneofGroups_ = [[10,11,12,13,14]];

/**
 * @enum {number}
 */
proto.hiber.publisher.Publisher.DataCase = {
  DATA_NOT_SET: 0,
  HTTP: 10,
  MQTT: 11,
  AWS_IOT: 12,
  EMAIL: 13,
  SLACK: 14
};

/**
 * @return {proto.hiber.publisher.Publisher.DataCase}
 */
proto.hiber.publisher.Publisher.prototype.getDataCase = function() {
  return /** @type {proto.hiber.publisher.Publisher.DataCase} */(jspb.Message.computeOneofCase(this, proto.hiber.publisher.Publisher.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.publisher.Publisher.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.publisher.Publisher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.publisher.Publisher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.publisher.Publisher.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deprecatedData: (f = msg.getDeprecatedData()) && proto.hiber.publisher.Publisher.Data.toObject(includeInstance, f),
    filters: (f = msg.getFilters()) && proto.hiber.publisher.Publisher.Filters.toObject(includeInstance, f),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    tag_pb.Tag.toObject, includeInstance),
    health: jspb.Message.getFieldWithDefault(msg, 6, 0),
    type: jspb.Message.getFieldWithDefault(msg, 7, 0),
    inCooldownUntil: (f = msg.getInCooldownUntil()) && base_pb.Timestamp.toObject(includeInstance, f),
    disabled: jspb.Message.getFieldWithDefault(msg, 9, false),
    http: (f = msg.getHttp()) && webhook_pb.Webhook.WebhookData.toObject(includeInstance, f),
    mqtt: (f = msg.getMqtt()) && integration_mqtt_pb.MQTTPublisher.Data.toObject(includeInstance, f),
    awsIot: (f = msg.getAwsIot()) && integration_aws_iot_pb.AWSIoTConfiguration.toObject(includeInstance, f),
    email: (f = msg.getEmail()) && email_notifications_pb.EmailNotificationPreferences.toObject(includeInstance, f),
    slack: (f = msg.getSlack()) && integration_slack_pb.SlackPublisher.Data.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.publisher.Publisher}
 */
proto.hiber.publisher.Publisher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.publisher.Publisher;
  return proto.hiber.publisher.Publisher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.publisher.Publisher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.publisher.Publisher}
 */
proto.hiber.publisher.Publisher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.hiber.publisher.Publisher.Data;
      reader.readMessage(value,proto.hiber.publisher.Publisher.Data.deserializeBinaryFromReader);
      msg.setDeprecatedData(value);
      break;
    case 4:
      var value = new proto.hiber.publisher.Publisher.Filters;
      reader.readMessage(value,proto.hiber.publisher.Publisher.Filters.deserializeBinaryFromReader);
      msg.setFilters(value);
      break;
    case 5:
      var value = new tag_pb.Tag;
      reader.readMessage(value,tag_pb.Tag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    case 6:
      var value = /** @type {!proto.hiber.Health} */ (reader.readEnum());
      msg.setHealth(value);
      break;
    case 7:
      var value = /** @type {!proto.hiber.publisher.Publisher.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 8:
      var value = new base_pb.Timestamp;
      reader.readMessage(value,base_pb.Timestamp.deserializeBinaryFromReader);
      msg.setInCooldownUntil(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisabled(value);
      break;
    case 10:
      var value = new webhook_pb.Webhook.WebhookData;
      reader.readMessage(value,webhook_pb.Webhook.WebhookData.deserializeBinaryFromReader);
      msg.setHttp(value);
      break;
    case 11:
      var value = new integration_mqtt_pb.MQTTPublisher.Data;
      reader.readMessage(value,integration_mqtt_pb.MQTTPublisher.Data.deserializeBinaryFromReader);
      msg.setMqtt(value);
      break;
    case 12:
      var value = new integration_aws_iot_pb.AWSIoTConfiguration;
      reader.readMessage(value,integration_aws_iot_pb.AWSIoTConfiguration.deserializeBinaryFromReader);
      msg.setAwsIot(value);
      break;
    case 13:
      var value = new email_notifications_pb.EmailNotificationPreferences;
      reader.readMessage(value,email_notifications_pb.EmailNotificationPreferences.deserializeBinaryFromReader);
      msg.setEmail(value);
      break;
    case 14:
      var value = new integration_slack_pb.SlackPublisher.Data;
      reader.readMessage(value,integration_slack_pb.SlackPublisher.Data.deserializeBinaryFromReader);
      msg.setSlack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.publisher.Publisher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.publisher.Publisher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.publisher.Publisher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.publisher.Publisher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeprecatedData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hiber.publisher.Publisher.Data.serializeBinaryToWriter
    );
  }
  f = message.getFilters();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.hiber.publisher.Publisher.Filters.serializeBinaryToWriter
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      tag_pb.Tag.serializeBinaryToWriter
    );
  }
  f = message.getHealth();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getInCooldownUntil();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      base_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDisabled();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getHttp();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      webhook_pb.Webhook.WebhookData.serializeBinaryToWriter
    );
  }
  f = message.getMqtt();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      integration_mqtt_pb.MQTTPublisher.Data.serializeBinaryToWriter
    );
  }
  f = message.getAwsIot();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      integration_aws_iot_pb.AWSIoTConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getEmail();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      email_notifications_pb.EmailNotificationPreferences.serializeBinaryToWriter
    );
  }
  f = message.getSlack();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      integration_slack_pb.SlackPublisher.Data.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.hiber.publisher.Publisher.ContentType = {
  DEFAULT: 0,
  JSON: 1,
  PROTO: 2
};

/**
 * @enum {number}
 */
proto.hiber.publisher.Publisher.Type = {
  HTTP: 0,
  MQTT: 1,
  AWS_IOT: 2,
  EMAIL: 3,
  SLACK: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.publisher.Publisher.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.hiber.publisher.Publisher.Data.oneofGroups_);
};
goog.inherits(proto.hiber.publisher.Publisher.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.publisher.Publisher.Data.displayName = 'proto.hiber.publisher.Publisher.Data';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.hiber.publisher.Publisher.Data.oneofGroups_ = [[8,9]];

/**
 * @enum {number}
 */
proto.hiber.publisher.Publisher.Data.ConfigCase = {
  CONFIG_NOT_SET: 0,
  HTTP: 8,
  MQTT: 9
};

/**
 * @return {proto.hiber.publisher.Publisher.Data.ConfigCase}
 */
proto.hiber.publisher.Publisher.Data.prototype.getConfigCase = function() {
  return /** @type {proto.hiber.publisher.Publisher.Data.ConfigCase} */(jspb.Message.computeOneofCase(this, proto.hiber.publisher.Publisher.Data.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.publisher.Publisher.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.publisher.Publisher.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.publisher.Publisher.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.publisher.Publisher.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contentType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    disabled: jspb.Message.getFieldWithDefault(msg, 3, false),
    certificateId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    certificateName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    caCertificateId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    caCertificateName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    http: (f = msg.getHttp()) && proto.hiber.publisher.Publisher.Data.HTTPConfig.toObject(includeInstance, f),
    mqtt: (f = msg.getMqtt()) && proto.hiber.publisher.Publisher.Data.MQTTConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.publisher.Publisher.Data}
 */
proto.hiber.publisher.Publisher.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.publisher.Publisher.Data;
  return proto.hiber.publisher.Publisher.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.publisher.Publisher.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.publisher.Publisher.Data}
 */
proto.hiber.publisher.Publisher.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {!proto.hiber.publisher.Publisher.ContentType} */ (reader.readEnum());
      msg.setContentType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisabled(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCertificateId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertificateName(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCaCertificateId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaCertificateName(value);
      break;
    case 8:
      var value = new proto.hiber.publisher.Publisher.Data.HTTPConfig;
      reader.readMessage(value,proto.hiber.publisher.Publisher.Data.HTTPConfig.deserializeBinaryFromReader);
      msg.setHttp(value);
      break;
    case 9:
      var value = new proto.hiber.publisher.Publisher.Data.MQTTConfig;
      reader.readMessage(value,proto.hiber.publisher.Publisher.Data.MQTTConfig.deserializeBinaryFromReader);
      msg.setMqtt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.publisher.Publisher.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.publisher.Publisher.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.publisher.Publisher.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.publisher.Publisher.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContentType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDisabled();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getCertificateId();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCertificateName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCaCertificateId();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCaCertificateName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getHttp();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.hiber.publisher.Publisher.Data.HTTPConfig.serializeBinaryToWriter
    );
  }
  f = message.getMqtt();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.hiber.publisher.Publisher.Data.MQTTConfig.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.publisher.Publisher.Data.MQTTConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.publisher.Publisher.Data.MQTTConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.publisher.Publisher.Data.MQTTConfig.displayName = 'proto.hiber.publisher.Publisher.Data.MQTTConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.publisher.Publisher.Data.MQTTConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.publisher.Publisher.Data.MQTTConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.publisher.Publisher.Data.MQTTConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.publisher.Publisher.Data.MQTTConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: jspb.Message.getFieldWithDefault(msg, 1, ""),
    qos: jspb.Message.getFieldWithDefault(msg, 2, 0),
    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
    password: jspb.Message.getFieldWithDefault(msg, 4, ""),
    identifier: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.publisher.Publisher.Data.MQTTConfig}
 */
proto.hiber.publisher.Publisher.Data.MQTTConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.publisher.Publisher.Data.MQTTConfig;
  return proto.hiber.publisher.Publisher.Data.MQTTConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.publisher.Publisher.Data.MQTTConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.publisher.Publisher.Data.MQTTConfig}
 */
proto.hiber.publisher.Publisher.Data.MQTTConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {!proto.hiber.publisher.Publisher.Data.MQTTConfig.QoS} */ (reader.readEnum());
      msg.setQos(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.publisher.Publisher.Data.MQTTConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.publisher.Publisher.Data.MQTTConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.publisher.Publisher.Data.MQTTConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.publisher.Publisher.Data.MQTTConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQos();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hiber.publisher.Publisher.Data.MQTTConfig.QoS = {
  DEFAULT: 0,
  AT_MOST_ONCE: 1,
  AT_LEAST_ONCE: 2,
  EXACTLY_ONCE: 3
};

/**
 * optional string topic = 1;
 * @return {string}
 */
proto.hiber.publisher.Publisher.Data.MQTTConfig.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.publisher.Publisher.Data.MQTTConfig.prototype.setTopic = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional QoS qos = 2;
 * @return {!proto.hiber.publisher.Publisher.Data.MQTTConfig.QoS}
 */
proto.hiber.publisher.Publisher.Data.MQTTConfig.prototype.getQos = function() {
  return /** @type {!proto.hiber.publisher.Publisher.Data.MQTTConfig.QoS} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hiber.publisher.Publisher.Data.MQTTConfig.QoS} value */
proto.hiber.publisher.Publisher.Data.MQTTConfig.prototype.setQos = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.hiber.publisher.Publisher.Data.MQTTConfig.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.hiber.publisher.Publisher.Data.MQTTConfig.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string password = 4;
 * @return {string}
 */
proto.hiber.publisher.Publisher.Data.MQTTConfig.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.hiber.publisher.Publisher.Data.MQTTConfig.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string identifier = 5;
 * @return {string}
 */
proto.hiber.publisher.Publisher.Data.MQTTConfig.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.hiber.publisher.Publisher.Data.MQTTConfig.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.publisher.Publisher.Data.HTTPConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.publisher.Publisher.Data.HTTPConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.publisher.Publisher.Data.HTTPConfig.displayName = 'proto.hiber.publisher.Publisher.Data.HTTPConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.publisher.Publisher.Data.HTTPConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.publisher.Publisher.Data.HTTPConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.publisher.Publisher.Data.HTTPConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.publisher.Publisher.Data.HTTPConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    secret: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.publisher.Publisher.Data.HTTPConfig}
 */
proto.hiber.publisher.Publisher.Data.HTTPConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.publisher.Publisher.Data.HTTPConfig;
  return proto.hiber.publisher.Publisher.Data.HTTPConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.publisher.Publisher.Data.HTTPConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.publisher.Publisher.Data.HTTPConfig}
 */
proto.hiber.publisher.Publisher.Data.HTTPConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.publisher.Publisher.Data.HTTPConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.publisher.Publisher.Data.HTTPConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.publisher.Publisher.Data.HTTPConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.publisher.Publisher.Data.HTTPConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecret();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string secret = 1;
 * @return {string}
 */
proto.hiber.publisher.Publisher.Data.HTTPConfig.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.publisher.Publisher.Data.HTTPConfig.prototype.setSecret = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.hiber.publisher.Publisher.Data.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.publisher.Publisher.Data.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ContentType content_type = 2;
 * @return {!proto.hiber.publisher.Publisher.ContentType}
 */
proto.hiber.publisher.Publisher.Data.prototype.getContentType = function() {
  return /** @type {!proto.hiber.publisher.Publisher.ContentType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hiber.publisher.Publisher.ContentType} value */
proto.hiber.publisher.Publisher.Data.prototype.setContentType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool disabled = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.publisher.Publisher.Data.prototype.getDisabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.hiber.publisher.Publisher.Data.prototype.setDisabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int64 certificate_id = 4;
 * @return {number}
 */
proto.hiber.publisher.Publisher.Data.prototype.getCertificateId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.hiber.publisher.Publisher.Data.prototype.setCertificateId = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string certificate_name = 5;
 * @return {string}
 */
proto.hiber.publisher.Publisher.Data.prototype.getCertificateName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.hiber.publisher.Publisher.Data.prototype.setCertificateName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 ca_certificate_id = 6;
 * @return {number}
 */
proto.hiber.publisher.Publisher.Data.prototype.getCaCertificateId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.hiber.publisher.Publisher.Data.prototype.setCaCertificateId = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string ca_certificate_name = 7;
 * @return {string}
 */
proto.hiber.publisher.Publisher.Data.prototype.getCaCertificateName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.hiber.publisher.Publisher.Data.prototype.setCaCertificateName = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional HTTPConfig http = 8;
 * @return {?proto.hiber.publisher.Publisher.Data.HTTPConfig}
 */
proto.hiber.publisher.Publisher.Data.prototype.getHttp = function() {
  return /** @type{?proto.hiber.publisher.Publisher.Data.HTTPConfig} */ (
    jspb.Message.getWrapperField(this, proto.hiber.publisher.Publisher.Data.HTTPConfig, 8));
};


/** @param {?proto.hiber.publisher.Publisher.Data.HTTPConfig|undefined} value */
proto.hiber.publisher.Publisher.Data.prototype.setHttp = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.hiber.publisher.Publisher.Data.oneofGroups_[0], value);
};


proto.hiber.publisher.Publisher.Data.prototype.clearHttp = function() {
  this.setHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.publisher.Publisher.Data.prototype.hasHttp = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional MQTTConfig mqtt = 9;
 * @return {?proto.hiber.publisher.Publisher.Data.MQTTConfig}
 */
proto.hiber.publisher.Publisher.Data.prototype.getMqtt = function() {
  return /** @type{?proto.hiber.publisher.Publisher.Data.MQTTConfig} */ (
    jspb.Message.getWrapperField(this, proto.hiber.publisher.Publisher.Data.MQTTConfig, 9));
};


/** @param {?proto.hiber.publisher.Publisher.Data.MQTTConfig|undefined} value */
proto.hiber.publisher.Publisher.Data.prototype.setMqtt = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.hiber.publisher.Publisher.Data.oneofGroups_[0], value);
};


proto.hiber.publisher.Publisher.Data.prototype.clearMqtt = function() {
  this.setMqtt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.publisher.Publisher.Data.prototype.hasMqtt = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.publisher.Publisher.Filters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.publisher.Publisher.Filters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.publisher.Publisher.Filters.displayName = 'proto.hiber.publisher.Publisher.Filters';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.publisher.Publisher.Filters.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.publisher.Publisher.Filters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.publisher.Publisher.Filters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.publisher.Publisher.Filters.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventTypes: (f = msg.getEventTypes()) && base_pb.Filter.Events.toObject(includeInstance, f),
    modemNumbers: (f = msg.getModemNumbers()) && base_pb.Filter.Modems.toObject(includeInstance, f),
    tags: (f = msg.getTags()) && base_pb.Filter.Tags.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.publisher.Publisher.Filters}
 */
proto.hiber.publisher.Publisher.Filters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.publisher.Publisher.Filters;
  return proto.hiber.publisher.Publisher.Filters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.publisher.Publisher.Filters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.publisher.Publisher.Filters}
 */
proto.hiber.publisher.Publisher.Filters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.Filter.Events;
      reader.readMessage(value,base_pb.Filter.Events.deserializeBinaryFromReader);
      msg.setEventTypes(value);
      break;
    case 2:
      var value = new base_pb.Filter.Modems;
      reader.readMessage(value,base_pb.Filter.Modems.deserializeBinaryFromReader);
      msg.setModemNumbers(value);
      break;
    case 3:
      var value = new base_pb.Filter.Tags;
      reader.readMessage(value,base_pb.Filter.Tags.deserializeBinaryFromReader);
      msg.setTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.publisher.Publisher.Filters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.publisher.Publisher.Filters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.publisher.Publisher.Filters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.publisher.Publisher.Filters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventTypes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_pb.Filter.Events.serializeBinaryToWriter
    );
  }
  f = message.getModemNumbers();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_pb.Filter.Modems.serializeBinaryToWriter
    );
  }
  f = message.getTags();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Filter.Tags.serializeBinaryToWriter
    );
  }
};


/**
 * optional hiber.Filter.Events event_types = 1;
 * @return {?proto.hiber.Filter.Events}
 */
proto.hiber.publisher.Publisher.Filters.prototype.getEventTypes = function() {
  return /** @type{?proto.hiber.Filter.Events} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Events, 1));
};


/** @param {?proto.hiber.Filter.Events|undefined} value */
proto.hiber.publisher.Publisher.Filters.prototype.setEventTypes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hiber.publisher.Publisher.Filters.prototype.clearEventTypes = function() {
  this.setEventTypes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.publisher.Publisher.Filters.prototype.hasEventTypes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional hiber.Filter.Modems modem_numbers = 2;
 * @return {?proto.hiber.Filter.Modems}
 */
proto.hiber.publisher.Publisher.Filters.prototype.getModemNumbers = function() {
  return /** @type{?proto.hiber.Filter.Modems} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Modems, 2));
};


/** @param {?proto.hiber.Filter.Modems|undefined} value */
proto.hiber.publisher.Publisher.Filters.prototype.setModemNumbers = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.publisher.Publisher.Filters.prototype.clearModemNumbers = function() {
  this.setModemNumbers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.publisher.Publisher.Filters.prototype.hasModemNumbers = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.Filter.Tags tags = 3;
 * @return {?proto.hiber.Filter.Tags}
 */
proto.hiber.publisher.Publisher.Filters.prototype.getTags = function() {
  return /** @type{?proto.hiber.Filter.Tags} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Tags, 3));
};


/** @param {?proto.hiber.Filter.Tags|undefined} value */
proto.hiber.publisher.Publisher.Filters.prototype.setTags = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.publisher.Publisher.Filters.prototype.clearTags = function() {
  this.setTags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.publisher.Publisher.Filters.prototype.hasTags = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.hiber.publisher.Publisher.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hiber.publisher.Publisher.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.hiber.publisher.Publisher.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.publisher.Publisher.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Data deprecated_data = 3;
 * @return {?proto.hiber.publisher.Publisher.Data}
 */
proto.hiber.publisher.Publisher.prototype.getDeprecatedData = function() {
  return /** @type{?proto.hiber.publisher.Publisher.Data} */ (
    jspb.Message.getWrapperField(this, proto.hiber.publisher.Publisher.Data, 3));
};


/** @param {?proto.hiber.publisher.Publisher.Data|undefined} value */
proto.hiber.publisher.Publisher.prototype.setDeprecatedData = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.publisher.Publisher.prototype.clearDeprecatedData = function() {
  this.setDeprecatedData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.publisher.Publisher.prototype.hasDeprecatedData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Filters filters = 4;
 * @return {?proto.hiber.publisher.Publisher.Filters}
 */
proto.hiber.publisher.Publisher.prototype.getFilters = function() {
  return /** @type{?proto.hiber.publisher.Publisher.Filters} */ (
    jspb.Message.getWrapperField(this, proto.hiber.publisher.Publisher.Filters, 4));
};


/** @param {?proto.hiber.publisher.Publisher.Filters|undefined} value */
proto.hiber.publisher.Publisher.prototype.setFilters = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hiber.publisher.Publisher.prototype.clearFilters = function() {
  this.setFilters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.publisher.Publisher.prototype.hasFilters = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated hiber.tag.Tag tags = 5;
 * @return {!Array<!proto.hiber.tag.Tag>}
 */
proto.hiber.publisher.Publisher.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.hiber.tag.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, tag_pb.Tag, 5));
};


/** @param {!Array<!proto.hiber.tag.Tag>} value */
proto.hiber.publisher.Publisher.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.hiber.tag.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.tag.Tag}
 */
proto.hiber.publisher.Publisher.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.hiber.tag.Tag, opt_index);
};


proto.hiber.publisher.Publisher.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * optional hiber.Health health = 6;
 * @return {!proto.hiber.Health}
 */
proto.hiber.publisher.Publisher.prototype.getHealth = function() {
  return /** @type {!proto.hiber.Health} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.hiber.Health} value */
proto.hiber.publisher.Publisher.prototype.setHealth = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional Type type = 7;
 * @return {!proto.hiber.publisher.Publisher.Type}
 */
proto.hiber.publisher.Publisher.prototype.getType = function() {
  return /** @type {!proto.hiber.publisher.Publisher.Type} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.hiber.publisher.Publisher.Type} value */
proto.hiber.publisher.Publisher.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional hiber.Timestamp in_cooldown_until = 8;
 * @return {?proto.hiber.Timestamp}
 */
proto.hiber.publisher.Publisher.prototype.getInCooldownUntil = function() {
  return /** @type{?proto.hiber.Timestamp} */ (
    jspb.Message.getWrapperField(this, base_pb.Timestamp, 8));
};


/** @param {?proto.hiber.Timestamp|undefined} value */
proto.hiber.publisher.Publisher.prototype.setInCooldownUntil = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.hiber.publisher.Publisher.prototype.clearInCooldownUntil = function() {
  this.setInCooldownUntil(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.publisher.Publisher.prototype.hasInCooldownUntil = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool disabled = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.publisher.Publisher.prototype.getDisabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.hiber.publisher.Publisher.prototype.setDisabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional hiber.webhook.Webhook.WebhookData http = 10;
 * @return {?proto.hiber.webhook.Webhook.WebhookData}
 */
proto.hiber.publisher.Publisher.prototype.getHttp = function() {
  return /** @type{?proto.hiber.webhook.Webhook.WebhookData} */ (
    jspb.Message.getWrapperField(this, webhook_pb.Webhook.WebhookData, 10));
};


/** @param {?proto.hiber.webhook.Webhook.WebhookData|undefined} value */
proto.hiber.publisher.Publisher.prototype.setHttp = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.hiber.publisher.Publisher.oneofGroups_[0], value);
};


proto.hiber.publisher.Publisher.prototype.clearHttp = function() {
  this.setHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.publisher.Publisher.prototype.hasHttp = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional hiber.integration.mqtt.MQTTPublisher.Data mqtt = 11;
 * @return {?proto.hiber.integration.mqtt.MQTTPublisher.Data}
 */
proto.hiber.publisher.Publisher.prototype.getMqtt = function() {
  return /** @type{?proto.hiber.integration.mqtt.MQTTPublisher.Data} */ (
    jspb.Message.getWrapperField(this, integration_mqtt_pb.MQTTPublisher.Data, 11));
};


/** @param {?proto.hiber.integration.mqtt.MQTTPublisher.Data|undefined} value */
proto.hiber.publisher.Publisher.prototype.setMqtt = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.hiber.publisher.Publisher.oneofGroups_[0], value);
};


proto.hiber.publisher.Publisher.prototype.clearMqtt = function() {
  this.setMqtt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.publisher.Publisher.prototype.hasMqtt = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional hiber.integration.awsiot.AWSIoTConfiguration aws_iot = 12;
 * @return {?proto.hiber.integration.awsiot.AWSIoTConfiguration}
 */
proto.hiber.publisher.Publisher.prototype.getAwsIot = function() {
  return /** @type{?proto.hiber.integration.awsiot.AWSIoTConfiguration} */ (
    jspb.Message.getWrapperField(this, integration_aws_iot_pb.AWSIoTConfiguration, 12));
};


/** @param {?proto.hiber.integration.awsiot.AWSIoTConfiguration|undefined} value */
proto.hiber.publisher.Publisher.prototype.setAwsIot = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.hiber.publisher.Publisher.oneofGroups_[0], value);
};


proto.hiber.publisher.Publisher.prototype.clearAwsIot = function() {
  this.setAwsIot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.publisher.Publisher.prototype.hasAwsIot = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional hiber.email.EmailNotificationPreferences email = 13;
 * @return {?proto.hiber.email.EmailNotificationPreferences}
 */
proto.hiber.publisher.Publisher.prototype.getEmail = function() {
  return /** @type{?proto.hiber.email.EmailNotificationPreferences} */ (
    jspb.Message.getWrapperField(this, email_notifications_pb.EmailNotificationPreferences, 13));
};


/** @param {?proto.hiber.email.EmailNotificationPreferences|undefined} value */
proto.hiber.publisher.Publisher.prototype.setEmail = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.hiber.publisher.Publisher.oneofGroups_[0], value);
};


proto.hiber.publisher.Publisher.prototype.clearEmail = function() {
  this.setEmail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.publisher.Publisher.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional hiber.integration.slack.SlackPublisher.Data slack = 14;
 * @return {?proto.hiber.integration.slack.SlackPublisher.Data}
 */
proto.hiber.publisher.Publisher.prototype.getSlack = function() {
  return /** @type{?proto.hiber.integration.slack.SlackPublisher.Data} */ (
    jspb.Message.getWrapperField(this, integration_slack_pb.SlackPublisher.Data, 14));
};


/** @param {?proto.hiber.integration.slack.SlackPublisher.Data|undefined} value */
proto.hiber.publisher.Publisher.prototype.setSlack = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.hiber.publisher.Publisher.oneofGroups_[0], value);
};


proto.hiber.publisher.Publisher.prototype.clearSlack = function() {
  this.setSlack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.publisher.Publisher.prototype.hasSlack = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.publisher.UpdatePublisherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.publisher.UpdatePublisherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.publisher.UpdatePublisherRequest.displayName = 'proto.hiber.publisher.UpdatePublisherRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.publisher.UpdatePublisherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.publisher.UpdatePublisherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.publisher.UpdatePublisherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.publisher.UpdatePublisherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.publisher.UpdatePublisherRequest}
 */
proto.hiber.publisher.UpdatePublisherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.publisher.UpdatePublisherRequest;
  return proto.hiber.publisher.UpdatePublisherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.publisher.UpdatePublisherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.publisher.UpdatePublisherRequest}
 */
proto.hiber.publisher.UpdatePublisherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.publisher.UpdatePublisherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.publisher.UpdatePublisherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.publisher.UpdatePublisherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.publisher.UpdatePublisherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.publisher.UpdatePublisherRequest.UpdateModems = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.publisher.UpdatePublisherRequest.UpdateModems, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.publisher.UpdatePublisherRequest.UpdateModems.displayName = 'proto.hiber.publisher.UpdatePublisherRequest.UpdateModems';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.publisher.UpdatePublisherRequest.UpdateModems.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.publisher.UpdatePublisherRequest.UpdateModems.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.publisher.UpdatePublisherRequest.UpdateModems} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.publisher.UpdatePublisherRequest.UpdateModems.toObject = function(includeInstance, msg) {
  var f, obj = {
    updated: jspb.Message.getFieldWithDefault(msg, 1, false),
    value: (f = msg.getValue()) && base_pb.Filter.Modems.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.publisher.UpdatePublisherRequest.UpdateModems}
 */
proto.hiber.publisher.UpdatePublisherRequest.UpdateModems.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.publisher.UpdatePublisherRequest.UpdateModems;
  return proto.hiber.publisher.UpdatePublisherRequest.UpdateModems.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.publisher.UpdatePublisherRequest.UpdateModems} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.publisher.UpdatePublisherRequest.UpdateModems}
 */
proto.hiber.publisher.UpdatePublisherRequest.UpdateModems.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdated(value);
      break;
    case 2:
      var value = new base_pb.Filter.Modems;
      reader.readMessage(value,base_pb.Filter.Modems.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.publisher.UpdatePublisherRequest.UpdateModems.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.publisher.UpdatePublisherRequest.UpdateModems.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.publisher.UpdatePublisherRequest.UpdateModems} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.publisher.UpdatePublisherRequest.UpdateModems.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdated();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_pb.Filter.Modems.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool updated = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.publisher.UpdatePublisherRequest.UpdateModems.prototype.getUpdated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.hiber.publisher.UpdatePublisherRequest.UpdateModems.prototype.setUpdated = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional hiber.Filter.Modems value = 2;
 * @return {?proto.hiber.Filter.Modems}
 */
proto.hiber.publisher.UpdatePublisherRequest.UpdateModems.prototype.getValue = function() {
  return /** @type{?proto.hiber.Filter.Modems} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Modems, 2));
};


/** @param {?proto.hiber.Filter.Modems|undefined} value */
proto.hiber.publisher.UpdatePublisherRequest.UpdateModems.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.publisher.UpdatePublisherRequest.UpdateModems.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.publisher.UpdatePublisherRequest.UpdateModems.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.hiber.publisher);
