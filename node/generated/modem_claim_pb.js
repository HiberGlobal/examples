/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var base_pb = require('./base_pb.js');
var modem_pb = require('./modem_pb.js');
var tag_pb = require('./tag_pb.js');
goog.exportSymbol('proto.hiber.modem.AcceptModemClaimsRequest', null, global);
goog.exportSymbol('proto.hiber.modem.AcceptModemClaimsRequest.Response', null, global);
goog.exportSymbol('proto.hiber.modem.ClaimModemRequest', null, global);
goog.exportSymbol('proto.hiber.modem.ClaimModemRequest.ClaimModem', null, global);
goog.exportSymbol('proto.hiber.modem.ClaimModemRequest.Response', null, global);
goog.exportSymbol('proto.hiber.modem.ListModemClaimsRequest', null, global);
goog.exportSymbol('proto.hiber.modem.ListModemClaimsRequest.Response', null, global);
goog.exportSymbol('proto.hiber.modem.ModemClaim', null, global);
goog.exportSymbol('proto.hiber.modem.ModemClaim.RejectReason', null, global);
goog.exportSymbol('proto.hiber.modem.ModemClaim.Status', null, global);
goog.exportSymbol('proto.hiber.modem.ModemClaimSelection', null, global);
goog.exportSymbol('proto.hiber.modem.RejectModemClaimsRequest', null, global);
goog.exportSymbol('proto.hiber.modem.RejectModemClaimsRequest.Response', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.ModemClaim = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.modem.ModemClaim.repeatedFields_, null);
};
goog.inherits(proto.hiber.modem.ModemClaim, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.ModemClaim.displayName = 'proto.hiber.modem.ModemClaim';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.modem.ModemClaim.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.ModemClaim.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.ModemClaim.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.ModemClaim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.ModemClaim.toObject = function(includeInstance, msg) {
  var f, obj = {
    modemNumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rejectReason: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rejectComment: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdAt: (f = msg.getCreatedAt()) && base_pb.Timestamp.toObject(includeInstance, f),
    closedAt: (f = msg.getClosedAt()) && base_pb.Timestamp.toObject(includeInstance, f),
    claimingOrganization: jspb.Message.getFieldWithDefault(msg, 7, ""),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    tag_pb.Tag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.ModemClaim}
 */
proto.hiber.modem.ModemClaim.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.ModemClaim;
  return proto.hiber.modem.ModemClaim.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.ModemClaim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.ModemClaim}
 */
proto.hiber.modem.ModemClaim.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModemNumber(value);
      break;
    case 2:
      var value = /** @type {!proto.hiber.modem.ModemClaim.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {!proto.hiber.modem.ModemClaim.RejectReason} */ (reader.readEnum());
      msg.setRejectReason(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRejectComment(value);
      break;
    case 5:
      var value = new base_pb.Timestamp;
      reader.readMessage(value,base_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 6:
      var value = new base_pb.Timestamp;
      reader.readMessage(value,base_pb.Timestamp.deserializeBinaryFromReader);
      msg.setClosedAt(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setClaimingOrganization(value);
      break;
    case 8:
      var value = new tag_pb.Tag;
      reader.readMessage(value,tag_pb.Tag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.ModemClaim.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.ModemClaim.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.ModemClaim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.ModemClaim.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModemNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRejectReason();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRejectComment();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      base_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getClosedAt();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      base_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getClaimingOrganization();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      tag_pb.Tag.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.hiber.modem.ModemClaim.Status = {
  OPEN: 0,
  ACCEPTED: 1,
  REJECTED: 2
};

/**
 * @enum {number}
 */
proto.hiber.modem.ModemClaim.RejectReason = {
  NOT_SET: 0,
  UNKNOWN_RECIPIENT: 1,
  INVALID_CLAIM: 2,
  TRANSFERRED_INSTEAD: 3,
  OTHER: 4
};

/**
 * optional string modem_number = 1;
 * @return {string}
 */
proto.hiber.modem.ModemClaim.prototype.getModemNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.ModemClaim.prototype.setModemNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.hiber.modem.ModemClaim.Status}
 */
proto.hiber.modem.ModemClaim.prototype.getStatus = function() {
  return /** @type {!proto.hiber.modem.ModemClaim.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hiber.modem.ModemClaim.Status} value */
proto.hiber.modem.ModemClaim.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional RejectReason reject_reason = 3;
 * @return {!proto.hiber.modem.ModemClaim.RejectReason}
 */
proto.hiber.modem.ModemClaim.prototype.getRejectReason = function() {
  return /** @type {!proto.hiber.modem.ModemClaim.RejectReason} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.hiber.modem.ModemClaim.RejectReason} value */
proto.hiber.modem.ModemClaim.prototype.setRejectReason = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string reject_comment = 4;
 * @return {string}
 */
proto.hiber.modem.ModemClaim.prototype.getRejectComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.hiber.modem.ModemClaim.prototype.setRejectComment = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional hiber.Timestamp created_at = 5;
 * @return {?proto.hiber.Timestamp}
 */
proto.hiber.modem.ModemClaim.prototype.getCreatedAt = function() {
  return /** @type{?proto.hiber.Timestamp} */ (
    jspb.Message.getWrapperField(this, base_pb.Timestamp, 5));
};


/** @param {?proto.hiber.Timestamp|undefined} value */
proto.hiber.modem.ModemClaim.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.hiber.modem.ModemClaim.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.modem.ModemClaim.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional hiber.Timestamp closed_at = 6;
 * @return {?proto.hiber.Timestamp}
 */
proto.hiber.modem.ModemClaim.prototype.getClosedAt = function() {
  return /** @type{?proto.hiber.Timestamp} */ (
    jspb.Message.getWrapperField(this, base_pb.Timestamp, 6));
};


/** @param {?proto.hiber.Timestamp|undefined} value */
proto.hiber.modem.ModemClaim.prototype.setClosedAt = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.hiber.modem.ModemClaim.prototype.clearClosedAt = function() {
  this.setClosedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.modem.ModemClaim.prototype.hasClosedAt = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string claiming_organization = 7;
 * @return {string}
 */
proto.hiber.modem.ModemClaim.prototype.getClaimingOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.hiber.modem.ModemClaim.prototype.setClaimingOrganization = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * repeated hiber.tag.Tag tags = 8;
 * @return {!Array.<!proto.hiber.tag.Tag>}
 */
proto.hiber.modem.ModemClaim.prototype.getTagsList = function() {
  return /** @type{!Array.<!proto.hiber.tag.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, tag_pb.Tag, 8));
};


/** @param {!Array.<!proto.hiber.tag.Tag>} value */
proto.hiber.modem.ModemClaim.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.hiber.tag.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.tag.Tag}
 */
proto.hiber.modem.ModemClaim.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.hiber.tag.Tag, opt_index);
};


proto.hiber.modem.ModemClaim.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.ModemClaimSelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.modem.ModemClaimSelection.repeatedFields_, null);
};
goog.inherits(proto.hiber.modem.ModemClaimSelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.ModemClaimSelection.displayName = 'proto.hiber.modem.ModemClaimSelection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.modem.ModemClaimSelection.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.ModemClaimSelection.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.ModemClaimSelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.ModemClaimSelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.ModemClaimSelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    modems: (f = msg.getModems()) && base_pb.Filter.Modems.toObject(includeInstance, f),
    statusesList: jspb.Message.getRepeatedField(msg, 2),
    createdTimeRange: (f = msg.getCreatedTimeRange()) && base_pb.TimeRange.toObject(includeInstance, f),
    closedTimeRange: (f = msg.getClosedTimeRange()) && base_pb.TimeRange.toObject(includeInstance, f),
    ownedOnly: jspb.Message.getFieldWithDefault(msg, 5, false),
    claimedOnly: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.ModemClaimSelection}
 */
proto.hiber.modem.ModemClaimSelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.ModemClaimSelection;
  return proto.hiber.modem.ModemClaimSelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.ModemClaimSelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.ModemClaimSelection}
 */
proto.hiber.modem.ModemClaimSelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new base_pb.Filter.Modems;
      reader.readMessage(value,base_pb.Filter.Modems.deserializeBinaryFromReader);
      msg.setModems(value);
      break;
    case 2:
      var value = /** @type {!Array.<!proto.hiber.modem.ModemClaim.Status>} */ (reader.readPackedEnum());
      msg.setStatusesList(value);
      break;
    case 3:
      var value = new base_pb.TimeRange;
      reader.readMessage(value,base_pb.TimeRange.deserializeBinaryFromReader);
      msg.setCreatedTimeRange(value);
      break;
    case 4:
      var value = new base_pb.TimeRange;
      reader.readMessage(value,base_pb.TimeRange.deserializeBinaryFromReader);
      msg.setClosedTimeRange(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOwnedOnly(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClaimedOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.ModemClaimSelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.ModemClaimSelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.ModemClaimSelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.ModemClaimSelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModems();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      base_pb.Filter.Modems.serializeBinaryToWriter
    );
  }
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = message.getCreatedTimeRange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.TimeRange.serializeBinaryToWriter
    );
  }
  f = message.getClosedTimeRange();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      base_pb.TimeRange.serializeBinaryToWriter
    );
  }
  f = message.getOwnedOnly();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getClaimedOnly();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional hiber.Filter.Modems modems = 1;
 * @return {?proto.hiber.Filter.Modems}
 */
proto.hiber.modem.ModemClaimSelection.prototype.getModems = function() {
  return /** @type{?proto.hiber.Filter.Modems} */ (
    jspb.Message.getWrapperField(this, base_pb.Filter.Modems, 1));
};


/** @param {?proto.hiber.Filter.Modems|undefined} value */
proto.hiber.modem.ModemClaimSelection.prototype.setModems = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hiber.modem.ModemClaimSelection.prototype.clearModems = function() {
  this.setModems(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.modem.ModemClaimSelection.prototype.hasModems = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ModemClaim.Status statuses = 2;
 * @return {!Array.<!proto.hiber.modem.ModemClaim.Status>}
 */
proto.hiber.modem.ModemClaimSelection.prototype.getStatusesList = function() {
  return /** @type {!Array.<!proto.hiber.modem.ModemClaim.Status>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<!proto.hiber.modem.ModemClaim.Status>} value */
proto.hiber.modem.ModemClaimSelection.prototype.setStatusesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.hiber.modem.ModemClaim.Status} value
 * @param {number=} opt_index
 */
proto.hiber.modem.ModemClaimSelection.prototype.addStatuses = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.hiber.modem.ModemClaimSelection.prototype.clearStatusesList = function() {
  this.setStatusesList([]);
};


/**
 * optional hiber.TimeRange created_time_range = 3;
 * @return {?proto.hiber.TimeRange}
 */
proto.hiber.modem.ModemClaimSelection.prototype.getCreatedTimeRange = function() {
  return /** @type{?proto.hiber.TimeRange} */ (
    jspb.Message.getWrapperField(this, base_pb.TimeRange, 3));
};


/** @param {?proto.hiber.TimeRange|undefined} value */
proto.hiber.modem.ModemClaimSelection.prototype.setCreatedTimeRange = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.modem.ModemClaimSelection.prototype.clearCreatedTimeRange = function() {
  this.setCreatedTimeRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.modem.ModemClaimSelection.prototype.hasCreatedTimeRange = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional hiber.TimeRange closed_time_range = 4;
 * @return {?proto.hiber.TimeRange}
 */
proto.hiber.modem.ModemClaimSelection.prototype.getClosedTimeRange = function() {
  return /** @type{?proto.hiber.TimeRange} */ (
    jspb.Message.getWrapperField(this, base_pb.TimeRange, 4));
};


/** @param {?proto.hiber.TimeRange|undefined} value */
proto.hiber.modem.ModemClaimSelection.prototype.setClosedTimeRange = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hiber.modem.ModemClaimSelection.prototype.clearClosedTimeRange = function() {
  this.setClosedTimeRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.modem.ModemClaimSelection.prototype.hasClosedTimeRange = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool owned_only = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.modem.ModemClaimSelection.prototype.getOwnedOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.hiber.modem.ModemClaimSelection.prototype.setOwnedOnly = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool claimed_only = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.modem.ModemClaimSelection.prototype.getClaimedOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.hiber.modem.ModemClaimSelection.prototype.setClaimedOnly = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.ClaimModemRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.modem.ClaimModemRequest.repeatedFields_, null);
};
goog.inherits(proto.hiber.modem.ClaimModemRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.ClaimModemRequest.displayName = 'proto.hiber.modem.ClaimModemRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.modem.ClaimModemRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.ClaimModemRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.ClaimModemRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.ClaimModemRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.ClaimModemRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    claimsList: jspb.Message.toObjectList(msg.getClaimsList(),
    proto.hiber.modem.ClaimModemRequest.ClaimModem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.ClaimModemRequest}
 */
proto.hiber.modem.ClaimModemRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.ClaimModemRequest;
  return proto.hiber.modem.ClaimModemRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.ClaimModemRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.ClaimModemRequest}
 */
proto.hiber.modem.ClaimModemRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.modem.ClaimModemRequest.ClaimModem;
      reader.readMessage(value,proto.hiber.modem.ClaimModemRequest.ClaimModem.deserializeBinaryFromReader);
      msg.addClaims(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.ClaimModemRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.ClaimModemRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.ClaimModemRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.ClaimModemRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClaimsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.hiber.modem.ClaimModemRequest.ClaimModem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.ClaimModemRequest.ClaimModem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.ClaimModemRequest.ClaimModem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.ClaimModemRequest.ClaimModem.displayName = 'proto.hiber.modem.ClaimModemRequest.ClaimModem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.ClaimModemRequest.ClaimModem.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.ClaimModemRequest.ClaimModem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.ClaimModemRequest.ClaimModem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.ClaimModemRequest.ClaimModem.toObject = function(includeInstance, msg) {
  var f, obj = {
    modemNumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    verifier: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.ClaimModemRequest.ClaimModem}
 */
proto.hiber.modem.ClaimModemRequest.ClaimModem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.ClaimModemRequest.ClaimModem;
  return proto.hiber.modem.ClaimModemRequest.ClaimModem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.ClaimModemRequest.ClaimModem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.ClaimModemRequest.ClaimModem}
 */
proto.hiber.modem.ClaimModemRequest.ClaimModem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModemNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.ClaimModemRequest.ClaimModem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.ClaimModemRequest.ClaimModem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.ClaimModemRequest.ClaimModem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.ClaimModemRequest.ClaimModem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModemNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVerifier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string modem_number = 1;
 * @return {string}
 */
proto.hiber.modem.ClaimModemRequest.ClaimModem.prototype.getModemNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.ClaimModemRequest.ClaimModem.prototype.setModemNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string verifier = 2;
 * @return {string}
 */
proto.hiber.modem.ClaimModemRequest.ClaimModem.prototype.getVerifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.modem.ClaimModemRequest.ClaimModem.prototype.setVerifier = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.ClaimModemRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.modem.ClaimModemRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.modem.ClaimModemRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.ClaimModemRequest.Response.displayName = 'proto.hiber.modem.ClaimModemRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.modem.ClaimModemRequest.Response.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.ClaimModemRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.ClaimModemRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.ClaimModemRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.ClaimModemRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.hiber.modem.ClaimModemRequest.toObject(includeInstance, f),
    claimsList: jspb.Message.toObjectList(msg.getClaimsList(),
    proto.hiber.modem.ModemClaim.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.ClaimModemRequest.Response}
 */
proto.hiber.modem.ClaimModemRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.ClaimModemRequest.Response;
  return proto.hiber.modem.ClaimModemRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.ClaimModemRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.ClaimModemRequest.Response}
 */
proto.hiber.modem.ClaimModemRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.modem.ClaimModemRequest;
      reader.readMessage(value,proto.hiber.modem.ClaimModemRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.hiber.modem.ModemClaim;
      reader.readMessage(value,proto.hiber.modem.ModemClaim.deserializeBinaryFromReader);
      msg.addClaims(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.ClaimModemRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.ClaimModemRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.ClaimModemRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.ClaimModemRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hiber.modem.ClaimModemRequest.serializeBinaryToWriter
    );
  }
  f = message.getClaimsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.hiber.modem.ModemClaim.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClaimModemRequest request = 1;
 * @return {?proto.hiber.modem.ClaimModemRequest}
 */
proto.hiber.modem.ClaimModemRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.modem.ClaimModemRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.ClaimModemRequest, 1));
};


/** @param {?proto.hiber.modem.ClaimModemRequest|undefined} value */
proto.hiber.modem.ClaimModemRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hiber.modem.ClaimModemRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.modem.ClaimModemRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ModemClaim claims = 2;
 * @return {!Array.<!proto.hiber.modem.ModemClaim>}
 */
proto.hiber.modem.ClaimModemRequest.Response.prototype.getClaimsList = function() {
  return /** @type{!Array.<!proto.hiber.modem.ModemClaim>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.modem.ModemClaim, 2));
};


/** @param {!Array.<!proto.hiber.modem.ModemClaim>} value */
proto.hiber.modem.ClaimModemRequest.Response.prototype.setClaimsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.hiber.modem.ModemClaim=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.modem.ModemClaim}
 */
proto.hiber.modem.ClaimModemRequest.Response.prototype.addClaims = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.hiber.modem.ModemClaim, opt_index);
};


proto.hiber.modem.ClaimModemRequest.Response.prototype.clearClaimsList = function() {
  this.setClaimsList([]);
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.modem.ClaimModemRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.ClaimModemRequest.prototype.setOrganization = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated ClaimModem claims = 2;
 * @return {!Array.<!proto.hiber.modem.ClaimModemRequest.ClaimModem>}
 */
proto.hiber.modem.ClaimModemRequest.prototype.getClaimsList = function() {
  return /** @type{!Array.<!proto.hiber.modem.ClaimModemRequest.ClaimModem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.modem.ClaimModemRequest.ClaimModem, 2));
};


/** @param {!Array.<!proto.hiber.modem.ClaimModemRequest.ClaimModem>} value */
proto.hiber.modem.ClaimModemRequest.prototype.setClaimsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.hiber.modem.ClaimModemRequest.ClaimModem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.modem.ClaimModemRequest.ClaimModem}
 */
proto.hiber.modem.ClaimModemRequest.prototype.addClaims = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.hiber.modem.ClaimModemRequest.ClaimModem, opt_index);
};


proto.hiber.modem.ClaimModemRequest.prototype.clearClaimsList = function() {
  this.setClaimsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.ListModemClaimsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.ListModemClaimsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.ListModemClaimsRequest.displayName = 'proto.hiber.modem.ListModemClaimsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.ListModemClaimsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.ListModemClaimsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.ListModemClaimsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.ListModemClaimsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.modem.ModemClaimSelection.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.ListModemClaimsRequest}
 */
proto.hiber.modem.ListModemClaimsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.ListModemClaimsRequest;
  return proto.hiber.modem.ListModemClaimsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.ListModemClaimsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.ListModemClaimsRequest}
 */
proto.hiber.modem.ListModemClaimsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.modem.ModemClaimSelection;
      reader.readMessage(value,proto.hiber.modem.ModemClaimSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    case 3:
      var value = new base_pb.Pagination;
      reader.readMessage(value,base_pb.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.ListModemClaimsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.ListModemClaimsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.ListModemClaimsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.ListModemClaimsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.modem.ModemClaimSelection.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Pagination.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.ListModemClaimsRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.modem.ListModemClaimsRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.modem.ListModemClaimsRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.ListModemClaimsRequest.Response.displayName = 'proto.hiber.modem.ListModemClaimsRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.modem.ListModemClaimsRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.ListModemClaimsRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.ListModemClaimsRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.ListModemClaimsRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.ListModemClaimsRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    claimsList: jspb.Message.toObjectList(msg.getClaimsList(),
    proto.hiber.modem.ModemClaim.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.modem.ListModemClaimsRequest.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.ListModemClaimsRequest.Response}
 */
proto.hiber.modem.ListModemClaimsRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.ListModemClaimsRequest.Response;
  return proto.hiber.modem.ListModemClaimsRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.ListModemClaimsRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.ListModemClaimsRequest.Response}
 */
proto.hiber.modem.ListModemClaimsRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.modem.ModemClaim;
      reader.readMessage(value,proto.hiber.modem.ModemClaim.deserializeBinaryFromReader);
      msg.addClaims(value);
      break;
    case 2:
      var value = new proto.hiber.modem.ListModemClaimsRequest;
      reader.readMessage(value,proto.hiber.modem.ListModemClaimsRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 3:
      var value = new base_pb.Pagination.Result;
      reader.readMessage(value,base_pb.Pagination.Result.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.ListModemClaimsRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.ListModemClaimsRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.ListModemClaimsRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.ListModemClaimsRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClaimsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.modem.ModemClaim.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.modem.ListModemClaimsRequest.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Pagination.Result.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ModemClaim claims = 1;
 * @return {!Array.<!proto.hiber.modem.ModemClaim>}
 */
proto.hiber.modem.ListModemClaimsRequest.Response.prototype.getClaimsList = function() {
  return /** @type{!Array.<!proto.hiber.modem.ModemClaim>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.modem.ModemClaim, 1));
};


/** @param {!Array.<!proto.hiber.modem.ModemClaim>} value */
proto.hiber.modem.ListModemClaimsRequest.Response.prototype.setClaimsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.modem.ModemClaim=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.modem.ModemClaim}
 */
proto.hiber.modem.ListModemClaimsRequest.Response.prototype.addClaims = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.modem.ModemClaim, opt_index);
};


proto.hiber.modem.ListModemClaimsRequest.Response.prototype.clearClaimsList = function() {
  this.setClaimsList([]);
};


/**
 * optional ListModemClaimsRequest request = 2;
 * @return {?proto.hiber.modem.ListModemClaimsRequest}
 */
proto.hiber.modem.ListModemClaimsRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.modem.ListModemClaimsRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.ListModemClaimsRequest, 2));
};


/** @param {?proto.hiber.modem.ListModemClaimsRequest|undefined} value */
proto.hiber.modem.ListModemClaimsRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.modem.ListModemClaimsRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.modem.ListModemClaimsRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.Pagination.Result pagination = 3;
 * @return {?proto.hiber.Pagination.Result}
 */
proto.hiber.modem.ListModemClaimsRequest.Response.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination.Result} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination.Result, 3));
};


/** @param {?proto.hiber.Pagination.Result|undefined} value */
proto.hiber.modem.ListModemClaimsRequest.Response.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.modem.ListModemClaimsRequest.Response.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.modem.ListModemClaimsRequest.Response.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.modem.ListModemClaimsRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.ListModemClaimsRequest.prototype.setOrganization = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ModemClaimSelection selection = 2;
 * @return {?proto.hiber.modem.ModemClaimSelection}
 */
proto.hiber.modem.ListModemClaimsRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.modem.ModemClaimSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.ModemClaimSelection, 2));
};


/** @param {?proto.hiber.modem.ModemClaimSelection|undefined} value */
proto.hiber.modem.ListModemClaimsRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.modem.ListModemClaimsRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.modem.ListModemClaimsRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.Pagination pagination = 3;
 * @return {?proto.hiber.Pagination}
 */
proto.hiber.modem.ListModemClaimsRequest.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination, 3));
};


/** @param {?proto.hiber.Pagination|undefined} value */
proto.hiber.modem.ListModemClaimsRequest.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.modem.ListModemClaimsRequest.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.modem.ListModemClaimsRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.AcceptModemClaimsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.AcceptModemClaimsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.AcceptModemClaimsRequest.displayName = 'proto.hiber.modem.AcceptModemClaimsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.AcceptModemClaimsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.AcceptModemClaimsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.AcceptModemClaimsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.AcceptModemClaimsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.modem.ModemClaimSelection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.AcceptModemClaimsRequest}
 */
proto.hiber.modem.AcceptModemClaimsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.AcceptModemClaimsRequest;
  return proto.hiber.modem.AcceptModemClaimsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.AcceptModemClaimsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.AcceptModemClaimsRequest}
 */
proto.hiber.modem.AcceptModemClaimsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.modem.ModemClaimSelection;
      reader.readMessage(value,proto.hiber.modem.ModemClaimSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.AcceptModemClaimsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.AcceptModemClaimsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.AcceptModemClaimsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.AcceptModemClaimsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.modem.ModemClaimSelection.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.AcceptModemClaimsRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.modem.AcceptModemClaimsRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.modem.AcceptModemClaimsRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.AcceptModemClaimsRequest.Response.displayName = 'proto.hiber.modem.AcceptModemClaimsRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.modem.AcceptModemClaimsRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.AcceptModemClaimsRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.AcceptModemClaimsRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.AcceptModemClaimsRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.AcceptModemClaimsRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    claimsList: jspb.Message.toObjectList(msg.getClaimsList(),
    proto.hiber.modem.ModemClaim.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.modem.AcceptModemClaimsRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.AcceptModemClaimsRequest.Response}
 */
proto.hiber.modem.AcceptModemClaimsRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.AcceptModemClaimsRequest.Response;
  return proto.hiber.modem.AcceptModemClaimsRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.AcceptModemClaimsRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.AcceptModemClaimsRequest.Response}
 */
proto.hiber.modem.AcceptModemClaimsRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.modem.ModemClaim;
      reader.readMessage(value,proto.hiber.modem.ModemClaim.deserializeBinaryFromReader);
      msg.addClaims(value);
      break;
    case 2:
      var value = new proto.hiber.modem.AcceptModemClaimsRequest;
      reader.readMessage(value,proto.hiber.modem.AcceptModemClaimsRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.AcceptModemClaimsRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.AcceptModemClaimsRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.AcceptModemClaimsRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.AcceptModemClaimsRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClaimsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.modem.ModemClaim.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.modem.AcceptModemClaimsRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ModemClaim claims = 1;
 * @return {!Array.<!proto.hiber.modem.ModemClaim>}
 */
proto.hiber.modem.AcceptModemClaimsRequest.Response.prototype.getClaimsList = function() {
  return /** @type{!Array.<!proto.hiber.modem.ModemClaim>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.modem.ModemClaim, 1));
};


/** @param {!Array.<!proto.hiber.modem.ModemClaim>} value */
proto.hiber.modem.AcceptModemClaimsRequest.Response.prototype.setClaimsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.modem.ModemClaim=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.modem.ModemClaim}
 */
proto.hiber.modem.AcceptModemClaimsRequest.Response.prototype.addClaims = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.modem.ModemClaim, opt_index);
};


proto.hiber.modem.AcceptModemClaimsRequest.Response.prototype.clearClaimsList = function() {
  this.setClaimsList([]);
};


/**
 * optional AcceptModemClaimsRequest request = 2;
 * @return {?proto.hiber.modem.AcceptModemClaimsRequest}
 */
proto.hiber.modem.AcceptModemClaimsRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.modem.AcceptModemClaimsRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.AcceptModemClaimsRequest, 2));
};


/** @param {?proto.hiber.modem.AcceptModemClaimsRequest|undefined} value */
proto.hiber.modem.AcceptModemClaimsRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.modem.AcceptModemClaimsRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.modem.AcceptModemClaimsRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.modem.AcceptModemClaimsRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.AcceptModemClaimsRequest.prototype.setOrganization = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ModemClaimSelection selection = 2;
 * @return {?proto.hiber.modem.ModemClaimSelection}
 */
proto.hiber.modem.AcceptModemClaimsRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.modem.ModemClaimSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.ModemClaimSelection, 2));
};


/** @param {?proto.hiber.modem.ModemClaimSelection|undefined} value */
proto.hiber.modem.AcceptModemClaimsRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.modem.AcceptModemClaimsRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.modem.AcceptModemClaimsRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.RejectModemClaimsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.RejectModemClaimsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.RejectModemClaimsRequest.displayName = 'proto.hiber.modem.RejectModemClaimsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.RejectModemClaimsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.RejectModemClaimsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.RejectModemClaimsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.RejectModemClaimsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.modem.ModemClaimSelection.toObject(includeInstance, f),
    reason: jspb.Message.getFieldWithDefault(msg, 3, 0),
    reasonComment: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.RejectModemClaimsRequest}
 */
proto.hiber.modem.RejectModemClaimsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.RejectModemClaimsRequest;
  return proto.hiber.modem.RejectModemClaimsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.RejectModemClaimsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.RejectModemClaimsRequest}
 */
proto.hiber.modem.RejectModemClaimsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.modem.ModemClaimSelection;
      reader.readMessage(value,proto.hiber.modem.ModemClaimSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    case 3:
      var value = /** @type {!proto.hiber.modem.ModemClaim.RejectReason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReasonComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.RejectModemClaimsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.RejectModemClaimsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.RejectModemClaimsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.RejectModemClaimsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.modem.ModemClaimSelection.serializeBinaryToWriter
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getReasonComment();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.RejectModemClaimsRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.modem.RejectModemClaimsRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.modem.RejectModemClaimsRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.RejectModemClaimsRequest.Response.displayName = 'proto.hiber.modem.RejectModemClaimsRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.modem.RejectModemClaimsRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.RejectModemClaimsRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.RejectModemClaimsRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.RejectModemClaimsRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.RejectModemClaimsRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    claimsList: jspb.Message.toObjectList(msg.getClaimsList(),
    proto.hiber.modem.ModemClaim.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.modem.RejectModemClaimsRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.RejectModemClaimsRequest.Response}
 */
proto.hiber.modem.RejectModemClaimsRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.RejectModemClaimsRequest.Response;
  return proto.hiber.modem.RejectModemClaimsRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.RejectModemClaimsRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.RejectModemClaimsRequest.Response}
 */
proto.hiber.modem.RejectModemClaimsRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.modem.ModemClaim;
      reader.readMessage(value,proto.hiber.modem.ModemClaim.deserializeBinaryFromReader);
      msg.addClaims(value);
      break;
    case 2:
      var value = new proto.hiber.modem.RejectModemClaimsRequest;
      reader.readMessage(value,proto.hiber.modem.RejectModemClaimsRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.RejectModemClaimsRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.RejectModemClaimsRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.RejectModemClaimsRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.RejectModemClaimsRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClaimsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.modem.ModemClaim.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.modem.RejectModemClaimsRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ModemClaim claims = 1;
 * @return {!Array.<!proto.hiber.modem.ModemClaim>}
 */
proto.hiber.modem.RejectModemClaimsRequest.Response.prototype.getClaimsList = function() {
  return /** @type{!Array.<!proto.hiber.modem.ModemClaim>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.modem.ModemClaim, 1));
};


/** @param {!Array.<!proto.hiber.modem.ModemClaim>} value */
proto.hiber.modem.RejectModemClaimsRequest.Response.prototype.setClaimsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.modem.ModemClaim=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.modem.ModemClaim}
 */
proto.hiber.modem.RejectModemClaimsRequest.Response.prototype.addClaims = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.modem.ModemClaim, opt_index);
};


proto.hiber.modem.RejectModemClaimsRequest.Response.prototype.clearClaimsList = function() {
  this.setClaimsList([]);
};


/**
 * optional RejectModemClaimsRequest request = 2;
 * @return {?proto.hiber.modem.RejectModemClaimsRequest}
 */
proto.hiber.modem.RejectModemClaimsRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.modem.RejectModemClaimsRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.RejectModemClaimsRequest, 2));
};


/** @param {?proto.hiber.modem.RejectModemClaimsRequest|undefined} value */
proto.hiber.modem.RejectModemClaimsRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.modem.RejectModemClaimsRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.modem.RejectModemClaimsRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.modem.RejectModemClaimsRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.RejectModemClaimsRequest.prototype.setOrganization = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ModemClaimSelection selection = 2;
 * @return {?proto.hiber.modem.ModemClaimSelection}
 */
proto.hiber.modem.RejectModemClaimsRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.modem.ModemClaimSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.ModemClaimSelection, 2));
};


/** @param {?proto.hiber.modem.ModemClaimSelection|undefined} value */
proto.hiber.modem.RejectModemClaimsRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.modem.RejectModemClaimsRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.modem.RejectModemClaimsRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ModemClaim.RejectReason reason = 3;
 * @return {!proto.hiber.modem.ModemClaim.RejectReason}
 */
proto.hiber.modem.RejectModemClaimsRequest.prototype.getReason = function() {
  return /** @type {!proto.hiber.modem.ModemClaim.RejectReason} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.hiber.modem.ModemClaim.RejectReason} value */
proto.hiber.modem.RejectModemClaimsRequest.prototype.setReason = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string reason_comment = 4;
 * @return {string}
 */
proto.hiber.modem.RejectModemClaimsRequest.prototype.getReasonComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.hiber.modem.RejectModemClaimsRequest.prototype.setReasonComment = function(value) {
  jspb.Message.setField(this, 4, value);
};


goog.object.extend(exports, proto.hiber.modem);
