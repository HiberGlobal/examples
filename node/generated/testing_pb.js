/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var base_pb = require('./base_pb.js');
goog.exportSymbol('proto.hiber.testing.PushModemMessagesRequest', null, global);
goog.exportSymbol('proto.hiber.testing.PushModemMessagesRequest.MessageToPush', null, global);
goog.exportSymbol('proto.hiber.testing.PushModemMessagesRequest.Response', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.testing.PushModemMessagesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.testing.PushModemMessagesRequest.repeatedFields_, null);
};
goog.inherits(proto.hiber.testing.PushModemMessagesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.testing.PushModemMessagesRequest.displayName = 'proto.hiber.testing.PushModemMessagesRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.testing.PushModemMessagesRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.testing.PushModemMessagesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.testing.PushModemMessagesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.testing.PushModemMessagesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.testing.PushModemMessagesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.hiber.testing.PushModemMessagesRequest.MessageToPush.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.testing.PushModemMessagesRequest}
 */
proto.hiber.testing.PushModemMessagesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.testing.PushModemMessagesRequest;
  return proto.hiber.testing.PushModemMessagesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.testing.PushModemMessagesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.testing.PushModemMessagesRequest}
 */
proto.hiber.testing.PushModemMessagesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.testing.PushModemMessagesRequest.MessageToPush;
      reader.readMessage(value,proto.hiber.testing.PushModemMessagesRequest.MessageToPush.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.testing.PushModemMessagesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.testing.PushModemMessagesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.testing.PushModemMessagesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.testing.PushModemMessagesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.hiber.testing.PushModemMessagesRequest.MessageToPush.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.testing.PushModemMessagesRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.testing.PushModemMessagesRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.testing.PushModemMessagesRequest.Response.displayName = 'proto.hiber.testing.PushModemMessagesRequest.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.testing.PushModemMessagesRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.testing.PushModemMessagesRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.testing.PushModemMessagesRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.testing.PushModemMessagesRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.hiber.testing.PushModemMessagesRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.testing.PushModemMessagesRequest.Response}
 */
proto.hiber.testing.PushModemMessagesRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.testing.PushModemMessagesRequest.Response;
  return proto.hiber.testing.PushModemMessagesRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.testing.PushModemMessagesRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.testing.PushModemMessagesRequest.Response}
 */
proto.hiber.testing.PushModemMessagesRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.hiber.testing.PushModemMessagesRequest;
      reader.readMessage(value,proto.hiber.testing.PushModemMessagesRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.testing.PushModemMessagesRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.testing.PushModemMessagesRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.testing.PushModemMessagesRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.testing.PushModemMessagesRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.testing.PushModemMessagesRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional PushModemMessagesRequest request = 2;
 * @return {?proto.hiber.testing.PushModemMessagesRequest}
 */
proto.hiber.testing.PushModemMessagesRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.testing.PushModemMessagesRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.testing.PushModemMessagesRequest, 2));
};


/** @param {?proto.hiber.testing.PushModemMessagesRequest|undefined} value */
proto.hiber.testing.PushModemMessagesRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.testing.PushModemMessagesRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.testing.PushModemMessagesRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.testing.PushModemMessagesRequest.MessageToPush, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.testing.PushModemMessagesRequest.MessageToPush.displayName = 'proto.hiber.testing.PushModemMessagesRequest.MessageToPush';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.testing.PushModemMessagesRequest.MessageToPush.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.testing.PushModemMessagesRequest.MessageToPush} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.toObject = function(includeInstance, msg) {
  var f, obj = {
    modemNumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: (f = msg.getTime()) && base_pb.Timestamp.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && base_pb.Location.toObject(includeInstance, f),
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.testing.PushModemMessagesRequest.MessageToPush}
 */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.testing.PushModemMessagesRequest.MessageToPush;
  return proto.hiber.testing.PushModemMessagesRequest.MessageToPush.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.testing.PushModemMessagesRequest.MessageToPush} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.testing.PushModemMessagesRequest.MessageToPush}
 */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModemNumber(value);
      break;
    case 2:
      var value = new base_pb.Timestamp;
      reader.readMessage(value,base_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 3:
      var value = new base_pb.Location;
      reader.readMessage(value,base_pb.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.testing.PushModemMessagesRequest.MessageToPush.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.testing.PushModemMessagesRequest.MessageToPush} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModemNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Location.serializeBinaryToWriter
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string modem_number = 1;
 * @return {string}
 */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.prototype.getModemNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.prototype.setModemNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional hiber.Timestamp time = 2;
 * @return {?proto.hiber.Timestamp}
 */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.prototype.getTime = function() {
  return /** @type{?proto.hiber.Timestamp} */ (
    jspb.Message.getWrapperField(this, base_pb.Timestamp, 2));
};


/** @param {?proto.hiber.Timestamp|undefined} value */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.testing.PushModemMessagesRequest.MessageToPush.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.Location location = 3;
 * @return {?proto.hiber.Location}
 */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.prototype.getLocation = function() {
  return /** @type{?proto.hiber.Location} */ (
    jspb.Message.getWrapperField(this, base_pb.Location, 3));
};


/** @param {?proto.hiber.Location|undefined} value */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.testing.PushModemMessagesRequest.MessageToPush.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes content = 4;
 * @return {!(string|Uint8Array)}
 */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes content = 4;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.hiber.testing.PushModemMessagesRequest.MessageToPush.prototype.setContent = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.testing.PushModemMessagesRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.testing.PushModemMessagesRequest.prototype.setOrganization = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated MessageToPush messages = 2;
 * @return {!Array.<!proto.hiber.testing.PushModemMessagesRequest.MessageToPush>}
 */
proto.hiber.testing.PushModemMessagesRequest.prototype.getMessagesList = function() {
  return /** @type{!Array.<!proto.hiber.testing.PushModemMessagesRequest.MessageToPush>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.testing.PushModemMessagesRequest.MessageToPush, 2));
};


/** @param {!Array.<!proto.hiber.testing.PushModemMessagesRequest.MessageToPush>} value */
proto.hiber.testing.PushModemMessagesRequest.prototype.setMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.hiber.testing.PushModemMessagesRequest.MessageToPush=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.testing.PushModemMessagesRequest.MessageToPush}
 */
proto.hiber.testing.PushModemMessagesRequest.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.hiber.testing.PushModemMessagesRequest.MessageToPush, opt_index);
};


proto.hiber.testing.PushModemMessagesRequest.prototype.clearMessagesList = function() {
  this.setMessagesList([]);
};


goog.object.extend(exports, proto.hiber.testing);
