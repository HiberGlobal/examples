/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var base_pb = require('./base_pb.js');
goog.object.extend(proto, base_pb);
var modem_pb = require('./modem_pb.js');
goog.object.extend(proto, modem_pb);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.ModemMessageBodyParser', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Endian', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest', null, global);
goog.exportSymbol('proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.ModemMessageBodyParser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.displayName = 'proto.hiber.modem.message.bodyparser.ModemMessageBodyParser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.ModemMessageBodyParser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contentKsy: jspb.Message.getFieldWithDefault(msg, 3, ""),
    simpleParser: (f = msg.getSimpleParser()) && proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.ModemMessageBodyParser}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.ModemMessageBodyParser;
  return proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.ModemMessageBodyParser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.ModemMessageBodyParser}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentKsy(value);
      break;
    case 4:
      var value = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.deserializeBinaryFromReader);
      msg.setSimpleParser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.ModemMessageBodyParser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContentKsy();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSimpleParser();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string content_ksy = 3;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.prototype.getContentKsy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.prototype.setContentKsy = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional SimpleModemMessageBodyParser simple_parser = 4;
 * @return {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.prototype.getSimpleParser = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser, 4));
};


/** @param {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser|undefined} value */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.prototype.setSimpleParser = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.prototype.clearSimpleParser = function() {
  this.setSimpleParser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.prototype.hasSimpleParser = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.repeatedFields_, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.displayName = 'proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.repeatedFields_ = [3,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    documentation: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.toObject, includeInstance),
    defaultEndian: jspb.Message.getFieldWithDefault(msg, 4, 0),
    defaultTextEncoding: jspb.Message.getFieldWithDefault(msg, 5, ""),
    customTypesList: jspb.Message.toObjectList(msg.getCustomTypesList(),
    proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser;
  return proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocumentation(value);
      break;
    case 3:
      var value = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    case 4:
      var value = /** @type {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Endian} */ (reader.readEnum());
      msg.setDefaultEndian(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultTextEncoding(value);
      break;
    case 6:
      var value = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.deserializeBinaryFromReader);
      msg.addCustomTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDocumentation();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.serializeBinaryToWriter
    );
  }
  f = message.getDefaultEndian();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getDefaultTextEncoding();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCustomTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Endian = {
  DEFAULT: 0,
  LITTLE_ENDIAN: 1,
  BIG_ENDIAN: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.oneofGroups_);
};
goog.inherits(proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.displayName = 'proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.oneofGroups_ = [[3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.TypeCase = {
  TYPE_NOT_SET: 0,
  INTEGER: 3,
  FLOAT: 4,
  BYTES: 5,
  STRING: 6,
  MAGIC: 7,
  CUSTOM_TYPE: 8
};

/**
 * @return {proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.TypeCase}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.getTypeCase = function() {
  return /** @type {proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.TypeCase} */(jspb.Message.computeOneofCase(this, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    documentation: jspb.Message.getFieldWithDefault(msg, 2, ""),
    integer: (f = msg.getInteger()) && proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.toObject(includeInstance, f),
    pb_float: (f = msg.getFloat()) && proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.toObject(includeInstance, f),
    bytes: (f = msg.getBytes()) && proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.toObject(includeInstance, f),
    string: (f = msg.getString()) && proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.toObject(includeInstance, f),
    magic: msg.getMagic_asB64(),
    customType: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field;
  return proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocumentation(value);
      break;
    case 3:
      var value = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.deserializeBinaryFromReader);
      msg.setInteger(value);
      break;
    case 4:
      var value = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.deserializeBinaryFromReader);
      msg.setFloat(value);
      break;
    case 5:
      var value = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.deserializeBinaryFromReader);
      msg.setBytes(value);
      break;
    case 6:
      var value = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.deserializeBinaryFromReader);
      msg.setString(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMagic(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDocumentation();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInteger();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.serializeBinaryToWriter
    );
  }
  f = message.getFloat();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.serializeBinaryToWriter
    );
  }
  f = message.getBytes();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.serializeBinaryToWriter
    );
  }
  f = message.getString();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.displayName = 'proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.toObject = function(includeInstance, msg) {
  var f, obj = {
    sizeBytes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    signed: jspb.Message.getFieldWithDefault(msg, 4, false),
    endian: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer;
  return proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSizeBytes(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSigned(value);
      break;
    case 5:
      var value = /** @type {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Endian} */ (reader.readEnum());
      msg.setEndian(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSizeBytes();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSigned();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getEndian();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional int32 size_bytes = 3;
 * @return {number}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.prototype.getSizeBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.prototype.setSizeBytes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool signed = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.prototype.getSigned = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.prototype.setSigned = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional Endian endian = 5;
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Endian}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.prototype.getEndian = function() {
  return /** @type {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Endian} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Endian} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer.prototype.setEndian = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.displayName = 'proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.toObject = function(includeInstance, msg) {
  var f, obj = {
    sizeBytes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endian: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float;
  return proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSizeBytes(value);
      break;
    case 5:
      var value = /** @type {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Endian} */ (reader.readEnum());
      msg.setEndian(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSizeBytes();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEndian();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional int32 size_bytes = 3;
 * @return {number}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.prototype.getSizeBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.prototype.setSizeBytes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Endian endian = 5;
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Endian}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.prototype.getEndian = function() {
  return /** @type {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Endian} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Endian} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float.prototype.setEndian = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.displayName = 'proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: (f = msg.getSize()) && proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes;
  return proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.deserializeBinaryFromReader);
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.serializeBinaryToWriter
    );
  }
};


/**
 * optional DelimitedSize size = 3;
 * @return {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.prototype.getSize = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize, 3));
};


/** @param {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize|undefined} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.prototype.setSize = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.prototype.clearSize = function() {
  this.setSize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes.prototype.hasSize = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.displayName = 'proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: (f = msg.getSize()) && proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.toObject(includeInstance, f),
    encoding: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String;
  return proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.deserializeBinaryFromReader);
      msg.setSize(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncoding(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.serializeBinaryToWriter
    );
  }
  f = message.getEncoding();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional DelimitedSize size = 3;
 * @return {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.prototype.getSize = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize, 3));
};


/** @param {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize|undefined} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.prototype.setSize = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.prototype.clearSize = function() {
  this.setSize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.prototype.hasSize = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string encoding = 4;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.prototype.getEncoding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String.prototype.setEncoding = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string documentation = 2;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.getDocumentation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.setDocumentation = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Integer integer = 3;
 * @return {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.getInteger = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer, 3));
};


/** @param {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Integer|undefined} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.setInteger = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.oneofGroups_[0], value);
};


proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.clearInteger = function() {
  this.setInteger(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.hasInteger = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Float float = 4;
 * @return {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.getFloat = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float, 4));
};


/** @param {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Float|undefined} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.setFloat = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.oneofGroups_[0], value);
};


proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.clearFloat = function() {
  this.setFloat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.hasFloat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Bytes bytes = 5;
 * @return {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.getBytes = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes, 5));
};


/** @param {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.Bytes|undefined} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.setBytes = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.oneofGroups_[0], value);
};


proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.clearBytes = function() {
  this.setBytes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.hasBytes = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional String string = 6;
 * @return {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.getString = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String, 6));
};


/** @param {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.String|undefined} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.setString = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.oneofGroups_[0], value);
};


proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.clearString = function() {
  this.setString(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.hasString = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes magic = 7;
 * @return {!(string|Uint8Array)}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.getMagic = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes magic = 7;
 * This is a type-conversion wrapper around `getMagic()`
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.getMagic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMagic()));
};


/**
 * optional bytes magic = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMagic()`
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.getMagic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMagic()));
};


/** @param {!(string|Uint8Array)} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.setMagic = function(value) {
  jspb.Message.setOneofField(this, 7, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.oneofGroups_[0], value);
};


proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.clearMagic = function() {
  jspb.Message.setOneofField(this, 7, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.hasMagic = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string custom_type = 8;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.getCustomType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.setCustomType = function(value) {
  jspb.Message.setOneofField(this, 8, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.oneofGroups_[0], value);
};


proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.clearCustomType = function() {
  jspb.Message.setOneofField(this, 8, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field.prototype.hasCustomType = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.oneofGroups_);
};
goog.inherits(proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.displayName = 'proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.SizeCase = {
  SIZE_NOT_SET: 0,
  SIZE_BYTES: 1,
  END_OF_STREAM: 2,
  FIELD_NAME: 3
};

/**
 * @return {proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.SizeCase}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.getSizeCase = function() {
  return /** @type {proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.SizeCase} */(jspb.Message.computeOneofCase(this, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.toObject = function(includeInstance, msg) {
  var f, obj = {
    sizeBytes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endOfStream: jspb.Message.getFieldWithDefault(msg, 2, false),
    fieldName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    terminator: msg.getTerminator_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize;
  return proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSizeBytes(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEndOfStream(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTerminator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTerminator_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional int32 size_bytes = 1;
 * @return {number}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.getSizeBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.setSizeBytes = function(value) {
  jspb.Message.setOneofField(this, 1, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.oneofGroups_[0], value);
};


proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.clearSizeBytes = function() {
  jspb.Message.setOneofField(this, 1, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.hasSizeBytes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool end_of_stream = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.getEndOfStream = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.setEndOfStream = function(value) {
  jspb.Message.setOneofField(this, 2, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.oneofGroups_[0], value);
};


proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.clearEndOfStream = function() {
  jspb.Message.setOneofField(this, 2, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.hasEndOfStream = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string field_name = 3;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.setFieldName = function(value) {
  jspb.Message.setOneofField(this, 3, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.oneofGroups_[0], value);
};


proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.clearFieldName = function() {
  jspb.Message.setOneofField(this, 3, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.hasFieldName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes terminator = 4;
 * @return {!(string|Uint8Array)}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.getTerminator = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes terminator = 4;
 * This is a type-conversion wrapper around `getTerminator()`
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.getTerminator_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTerminator()));
};


/**
 * optional bytes terminator = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTerminator()`
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.getTerminator_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTerminator()));
};


/** @param {!(string|Uint8Array)} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.DelimitedSize.prototype.setTerminator = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string documentation = 2;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.getDocumentation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.setDocumentation = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Field fields = 3;
 * @return {!Array<!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field>}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field, 3));
};


/** @param {!Array<!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field>} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.setFieldsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Field, opt_index);
};


proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.clearFieldsList = function() {
  this.setFieldsList([]);
};


/**
 * optional Endian default_endian = 4;
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Endian}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.getDefaultEndian = function() {
  return /** @type {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Endian} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.Endian} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.setDefaultEndian = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string default_text_encoding = 5;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.getDefaultTextEncoding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.setDefaultTextEncoding = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated SimpleModemMessageBodyParser custom_types = 6;
 * @return {!Array<!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser>}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.getCustomTypesList = function() {
  return /** @type{!Array<!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser, 6));
};


/** @param {!Array<!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser>} value */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.setCustomTypesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser}
 */
proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.addCustomTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser, opt_index);
};


proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.prototype.clearCustomTypesList = function() {
  this.setCustomTypesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.repeatedFields_, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.displayName = 'proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: jspb.Message.getRepeatedField(msg, 1),
    search: jspb.Message.getFieldWithDefault(msg, 2, ""),
    onlySimple: jspb.Message.getFieldWithDefault(msg, 3, false),
    onlyKsyFile: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection;
  return proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setIdsList(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearch(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnlySimple(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnlyKsyFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getSearch();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOnlySimple();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getOnlyKsyFile();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * repeated int32 ids = 1;
 * @return {!Array<number>}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.prototype.getIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.prototype.addIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.prototype.clearIdsList = function() {
  this.setIdsList([]);
};


/**
 * optional string search = 2;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.prototype.getSearch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.prototype.setSearch = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool only_simple = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.prototype.getOnlySimple = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.prototype.setOnlySimple = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool only_ksy_file = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.prototype.getOnlyKsyFile = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.prototype.setOnlyKsyFile = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.displayName = 'proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest;
  return proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    case 3:
      var value = new base_pb.Pagination;
      reader.readMessage(value,base_pb.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Pagination.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.displayName = 'proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    parsersList: jspb.Message.toObjectList(msg.getParsersList(),
    proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.toObject, includeInstance),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.Result.toObject(includeInstance, f),
    request: (f = msg.getRequest()) && proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response;
  return proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.modem.message.bodyparser.ModemMessageBodyParser;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.deserializeBinaryFromReader);
      msg.addParsers(value);
      break;
    case 2:
      var value = new base_pb.Pagination.Result;
      reader.readMessage(value,base_pb.Pagination.Result.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    case 3:
      var value = new proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_pb.Pagination.Result.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ModemMessageBodyParser parsers = 1;
 * @return {!Array<!proto.hiber.modem.message.bodyparser.ModemMessageBodyParser>}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.prototype.getParsersList = function() {
  return /** @type{!Array<!proto.hiber.modem.message.bodyparser.ModemMessageBodyParser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.modem.message.bodyparser.ModemMessageBodyParser, 1));
};


/** @param {!Array<!proto.hiber.modem.message.bodyparser.ModemMessageBodyParser>} value */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.prototype.setParsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.modem.message.bodyparser.ModemMessageBodyParser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.modem.message.bodyparser.ModemMessageBodyParser}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.prototype.addParsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.modem.message.bodyparser.ModemMessageBodyParser, opt_index);
};


proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.prototype.clearParsersList = function() {
  this.setParsersList([]);
};


/**
 * optional hiber.Pagination.Result pagination = 2;
 * @return {?proto.hiber.Pagination.Result}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination.Result} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination.Result, 2));
};


/** @param {?proto.hiber.Pagination.Result|undefined} value */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ListModemMessageBodyParsersRequest request = 3;
 * @return {?proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest, 3));
};


/** @param {?proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest|undefined} value */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ModemMessageBodyParserSelection selection = 2;
 * @return {?proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection, 2));
};


/** @param {?proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection|undefined} value */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.Pagination pagination = 3;
 * @return {?proto.hiber.Pagination}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination, 3));
};


/** @param {?proto.hiber.Pagination|undefined} value */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.ListModemMessageBodyParsersRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest.displayName = 'proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contentKsy: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest}
 */
proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest;
  return proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest}
 */
proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentKsy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContentKsy();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string content_ksy = 3;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest.prototype.getContentKsy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.UploadModemMessageBodyParserRequest.prototype.setContentKsy = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest.displayName = 'proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    contentKsy: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest}
 */
proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest;
  return proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest}
 */
proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentKsy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getContentKsy();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string content_ksy = 3;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest.prototype.getContentKsy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.UpdateUploadedModemMessageBodyParserRequest.prototype.setContentKsy = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest.displayName = 'proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parser: (f = msg.getParser()) && proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest}
 */
proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest;
  return proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest}
 */
proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.deserializeBinaryFromReader);
      msg.setParser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.serializeBinaryToWriter
    );
  }
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SimpleModemMessageBodyParser parser = 2;
 * @return {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser}
 */
proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest.prototype.getParser = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser, 2));
};


/** @param {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser|undefined} value */
proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest.prototype.setParser = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest.prototype.clearParser = function() {
  this.setParser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.CreateSimpleModemMessageBodyParserRequest.prototype.hasParser = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.displayName = 'proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    parser: (f = msg.getParser()) && proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest}
 */
proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest;
  return proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest}
 */
proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.deserializeBinaryFromReader);
      msg.setParser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getParser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser.serializeBinaryToWriter
    );
  }
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional SimpleModemMessageBodyParser parser = 3;
 * @return {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser}
 */
proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.prototype.getParser = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser, 3));
};


/** @param {?proto.hiber.modem.message.bodyparser.SimpleModemMessageBodyParser|undefined} value */
proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.prototype.setParser = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.prototype.clearParser = function() {
  this.setParser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.UpdateSimpleModemMessageBodyParserRequest.prototype.hasParser = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest.displayName = 'proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest}
 */
proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest;
  return proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest}
 */
proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.RenameModemMessageBodyParserRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.displayName = 'proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest}
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest;
  return proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest}
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response.displayName = 'proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response}
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response;
  return proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response}
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ModemMessageBodyParserSelection selection = 2;
 * @return {?proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection}
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection, 2));
};


/** @param {?proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection|undefined} value */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.DeleteModemMessageBodyParserRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.displayName = 'proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.toObject(includeInstance, f),
    modemSelection: (f = msg.getModemSelection()) && modem_pb.ModemSelection.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest;
  return proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    case 3:
      var value = new modem_pb.ModemSelection;
      reader.readMessage(value,modem_pb.ModemSelection.deserializeBinaryFromReader);
      msg.setModemSelection(value);
      break;
    case 4:
      var value = new base_pb.Pagination;
      reader.readMessage(value,base_pb.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.serializeBinaryToWriter
    );
  }
  f = message.getModemSelection();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modem_pb.ModemSelection.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      base_pb.Pagination.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.displayName = 'proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    assignedParsersList: jspb.Message.toObjectList(msg.getAssignedParsersList(),
    proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response;
  return proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.deserializeBinaryFromReader);
      msg.addAssignedParsers(value);
      break;
    case 2:
      var value = new proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 3:
      var value = new base_pb.Pagination.Result;
      reader.readMessage(value,base_pb.Pagination.Result.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssignedParsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Pagination.Result.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.repeatedFields_, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.displayName = 'proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.toObject = function(includeInstance, msg) {
  var f, obj = {
    modemNumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parsersList: jspb.Message.toObjectList(msg.getParsersList(),
    proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers;
  return proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModemNumber(value);
      break;
    case 2:
      var value = new proto.hiber.modem.message.bodyparser.ModemMessageBodyParser;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.deserializeBinaryFromReader);
      msg.addParsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModemNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.hiber.modem.message.bodyparser.ModemMessageBodyParser.serializeBinaryToWriter
    );
  }
};


/**
 * optional string modem_number = 1;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.prototype.getModemNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.prototype.setModemNumber = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ModemMessageBodyParser parsers = 2;
 * @return {!Array<!proto.hiber.modem.message.bodyparser.ModemMessageBodyParser>}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.prototype.getParsersList = function() {
  return /** @type{!Array<!proto.hiber.modem.message.bodyparser.ModemMessageBodyParser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.modem.message.bodyparser.ModemMessageBodyParser, 2));
};


/** @param {!Array<!proto.hiber.modem.message.bodyparser.ModemMessageBodyParser>} value */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.prototype.setParsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.hiber.modem.message.bodyparser.ModemMessageBodyParser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.modem.message.bodyparser.ModemMessageBodyParser}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.prototype.addParsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.hiber.modem.message.bodyparser.ModemMessageBodyParser, opt_index);
};


proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.prototype.clearParsersList = function() {
  this.setParsersList([]);
};


/**
 * repeated AssignedParsers assigned_parsers = 1;
 * @return {!Array<!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers>}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.prototype.getAssignedParsersList = function() {
  return /** @type{!Array<!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers, 1));
};


/** @param {!Array<!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers>} value */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.prototype.setAssignedParsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.prototype.addAssignedParsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers, opt_index);
};


proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.prototype.clearAssignedParsersList = function() {
  this.setAssignedParsersList([]);
};


/**
 * optional ListAssignedParsersRequest request = 2;
 * @return {?proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest, 2));
};


/** @param {?proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest|undefined} value */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.Pagination.Result pagination = 3;
 * @return {?proto.hiber.Pagination.Result}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination.Result} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination.Result, 3));
};


/** @param {?proto.hiber.Pagination.Result|undefined} value */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ModemMessageBodyParserSelection selection = 2;
 * @return {?proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection, 2));
};


/** @param {?proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection|undefined} value */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.modem.ModemSelection modem_selection = 3;
 * @return {?proto.hiber.modem.ModemSelection}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.prototype.getModemSelection = function() {
  return /** @type{?proto.hiber.modem.ModemSelection} */ (
    jspb.Message.getWrapperField(this, modem_pb.ModemSelection, 3));
};


/** @param {?proto.hiber.modem.ModemSelection|undefined} value */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.prototype.setModemSelection = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.prototype.clearModemSelection = function() {
  this.setModemSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.prototype.hasModemSelection = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional hiber.Pagination pagination = 4;
 * @return {?proto.hiber.Pagination}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination, 4));
};


/** @param {?proto.hiber.Pagination|undefined} value */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.displayName = 'proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.toObject(includeInstance, f),
    modemSelection: (f = msg.getModemSelection()) && modem_pb.ModemSelection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest;
  return proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    case 3:
      var value = new modem_pb.ModemSelection;
      reader.readMessage(value,modem_pb.ModemSelection.deserializeBinaryFromReader);
      msg.setModemSelection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.serializeBinaryToWriter
    );
  }
  f = message.getModemSelection();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modem_pb.ModemSelection.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.displayName = 'proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    assignedParsersList: jspb.Message.toObjectList(msg.getAssignedParsersList(),
    proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response;
  return proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.deserializeBinaryFromReader);
      msg.addAssignedParsers(value);
      break;
    case 2:
      var value = new proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssignedParsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ListAssignedParsersRequest.Response.AssignedParsers assigned_parsers = 3;
 * @return {!Array<!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers>}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.prototype.getAssignedParsersList = function() {
  return /** @type{!Array<!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers, 3));
};


/** @param {!Array<!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers>} value */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.prototype.setAssignedParsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.prototype.addAssignedParsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers, opt_index);
};


proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.prototype.clearAssignedParsersList = function() {
  this.setAssignedParsersList([]);
};


/**
 * optional AssignModemMessageBodyParserToModemsRequest request = 2;
 * @return {?proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest, 2));
};


/** @param {?proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest|undefined} value */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ModemMessageBodyParserSelection selection = 2;
 * @return {?proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection, 2));
};


/** @param {?proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection|undefined} value */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.modem.ModemSelection modem_selection = 3;
 * @return {?proto.hiber.modem.ModemSelection}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.prototype.getModemSelection = function() {
  return /** @type{?proto.hiber.modem.ModemSelection} */ (
    jspb.Message.getWrapperField(this, modem_pb.ModemSelection, 3));
};


/** @param {?proto.hiber.modem.ModemSelection|undefined} value */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.prototype.setModemSelection = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.prototype.clearModemSelection = function() {
  this.setModemSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.AssignModemMessageBodyParserToModemsRequest.prototype.hasModemSelection = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.displayName = 'proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.toObject(includeInstance, f),
    modemSelection: (f = msg.getModemSelection()) && modem_pb.ModemSelection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest;
  return proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    case 3:
      var value = new modem_pb.ModemSelection;
      reader.readMessage(value,modem_pb.ModemSelection.deserializeBinaryFromReader);
      msg.setModemSelection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection.serializeBinaryToWriter
    );
  }
  f = message.getModemSelection();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modem_pb.ModemSelection.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.displayName = 'proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    assignedParsersList: jspb.Message.toObjectList(msg.getAssignedParsersList(),
    proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response;
  return proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.deserializeBinaryFromReader);
      msg.addAssignedParsers(value);
      break;
    case 2:
      var value = new proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest;
      reader.readMessage(value,proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssignedParsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ListAssignedParsersRequest.Response.AssignedParsers assigned_parsers = 3;
 * @return {!Array<!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers>}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.prototype.getAssignedParsersList = function() {
  return /** @type{!Array<!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers, 3));
};


/** @param {!Array<!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers>} value */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.prototype.setAssignedParsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.prototype.addAssignedParsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.hiber.modem.message.bodyparser.ListAssignedParsersRequest.Response.AssignedParsers, opt_index);
};


proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.prototype.clearAssignedParsersList = function() {
  this.setAssignedParsersList([]);
};


/**
 * optional RemoveModemMessageBodyParserFromModemsRequest request = 2;
 * @return {?proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest, 2));
};


/** @param {?proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest|undefined} value */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ModemMessageBodyParserSelection selection = 2;
 * @return {?proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection, 2));
};


/** @param {?proto.hiber.modem.message.bodyparser.ModemMessageBodyParserSelection|undefined} value */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.modem.ModemSelection modem_selection = 3;
 * @return {?proto.hiber.modem.ModemSelection}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.prototype.getModemSelection = function() {
  return /** @type{?proto.hiber.modem.ModemSelection} */ (
    jspb.Message.getWrapperField(this, modem_pb.ModemSelection, 3));
};


/** @param {?proto.hiber.modem.ModemSelection|undefined} value */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.prototype.setModemSelection = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.prototype.clearModemSelection = function() {
  this.setModemSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.modem.message.bodyparser.RemoveModemMessageBodyParserFromModemsRequest.prototype.hasModemSelection = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.hiber.modem.message.bodyparser);
