/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var base_pb = require('./base_pb.js');
goog.object.extend(proto, base_pb);
goog.exportSymbol('proto.hiber.certificate.Certificate', null, global);
goog.exportSymbol('proto.hiber.certificate.CertificateSelection', null, global);
goog.exportSymbol('proto.hiber.certificate.DeleteCertificateRequest', null, global);
goog.exportSymbol('proto.hiber.certificate.DeleteCertificateRequest.Response', null, global);
goog.exportSymbol('proto.hiber.certificate.ListCertificatesRequest', null, global);
goog.exportSymbol('proto.hiber.certificate.ListCertificatesRequest.Response', null, global);
goog.exportSymbol('proto.hiber.certificate.RenameCertificateRequest', null, global);
goog.exportSymbol('proto.hiber.certificate.RenameCertificateRequest.Response', null, global);
goog.exportSymbol('proto.hiber.certificate.UploadCertificateRequest', null, global);
goog.exportSymbol('proto.hiber.certificate.UploadCertificateRequest.Response', null, global);
goog.exportSymbol('proto.hiber.certificate.UploadCertificateRequest.UploadCertificate', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.certificate.Certificate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.certificate.Certificate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.certificate.Certificate.displayName = 'proto.hiber.certificate.Certificate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.certificate.Certificate.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.certificate.Certificate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.certificate.Certificate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.Certificate.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    certificate: (f = msg.getCertificate()) && base_pb.BytesOrHex.toObject(includeInstance, f),
    hasPrivateKey: jspb.Message.getFieldWithDefault(msg, 4, false),
    caCertificateName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    caCertificateId: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.certificate.Certificate}
 */
proto.hiber.certificate.Certificate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.certificate.Certificate;
  return proto.hiber.certificate.Certificate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.certificate.Certificate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.certificate.Certificate}
 */
proto.hiber.certificate.Certificate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new base_pb.BytesOrHex;
      reader.readMessage(value,base_pb.BytesOrHex.deserializeBinaryFromReader);
      msg.setCertificate(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasPrivateKey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaCertificateName(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCaCertificateId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.certificate.Certificate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.certificate.Certificate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.certificate.Certificate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.Certificate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCertificate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.BytesOrHex.serializeBinaryToWriter
    );
  }
  f = message.getHasPrivateKey();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCaCertificateName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCaCertificateId();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.hiber.certificate.Certificate.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hiber.certificate.Certificate.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.hiber.certificate.Certificate.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.certificate.Certificate.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional hiber.BytesOrHex certificate = 3;
 * @return {?proto.hiber.BytesOrHex}
 */
proto.hiber.certificate.Certificate.prototype.getCertificate = function() {
  return /** @type{?proto.hiber.BytesOrHex} */ (
    jspb.Message.getWrapperField(this, base_pb.BytesOrHex, 3));
};


/** @param {?proto.hiber.BytesOrHex|undefined} value */
proto.hiber.certificate.Certificate.prototype.setCertificate = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.certificate.Certificate.prototype.clearCertificate = function() {
  this.setCertificate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.certificate.Certificate.prototype.hasCertificate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool has_private_key = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.certificate.Certificate.prototype.getHasPrivateKey = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.hiber.certificate.Certificate.prototype.setHasPrivateKey = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string ca_certificate_name = 5;
 * @return {string}
 */
proto.hiber.certificate.Certificate.prototype.getCaCertificateName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.hiber.certificate.Certificate.prototype.setCaCertificateName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 ca_certificate_id = 6;
 * @return {number}
 */
proto.hiber.certificate.Certificate.prototype.getCaCertificateId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.hiber.certificate.Certificate.prototype.setCaCertificateId = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.certificate.CertificateSelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.certificate.CertificateSelection.repeatedFields_, null);
};
goog.inherits(proto.hiber.certificate.CertificateSelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.certificate.CertificateSelection.displayName = 'proto.hiber.certificate.CertificateSelection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.certificate.CertificateSelection.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.certificate.CertificateSelection.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.certificate.CertificateSelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.certificate.CertificateSelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.CertificateSelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    certificateIdsList: jspb.Message.getRepeatedField(msg, 1),
    search: jspb.Message.getFieldWithDefault(msg, 2, ""),
    caCertificateIdsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.certificate.CertificateSelection}
 */
proto.hiber.certificate.CertificateSelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.certificate.CertificateSelection;
  return proto.hiber.certificate.CertificateSelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.certificate.CertificateSelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.certificate.CertificateSelection}
 */
proto.hiber.certificate.CertificateSelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setCertificateIdsList(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearch(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setCaCertificateIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.certificate.CertificateSelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.certificate.CertificateSelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.certificate.CertificateSelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.CertificateSelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertificateIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
  f = message.getSearch();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCaCertificateIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
};


/**
 * repeated int64 certificate_ids = 1;
 * @return {!Array<number>}
 */
proto.hiber.certificate.CertificateSelection.prototype.getCertificateIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.hiber.certificate.CertificateSelection.prototype.setCertificateIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.hiber.certificate.CertificateSelection.prototype.addCertificateIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.hiber.certificate.CertificateSelection.prototype.clearCertificateIdsList = function() {
  this.setCertificateIdsList([]);
};


/**
 * optional string search = 2;
 * @return {string}
 */
proto.hiber.certificate.CertificateSelection.prototype.getSearch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hiber.certificate.CertificateSelection.prototype.setSearch = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated int64 ca_certificate_ids = 3;
 * @return {!Array<number>}
 */
proto.hiber.certificate.CertificateSelection.prototype.getCaCertificateIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.hiber.certificate.CertificateSelection.prototype.setCaCertificateIdsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.hiber.certificate.CertificateSelection.prototype.addCaCertificateIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.hiber.certificate.CertificateSelection.prototype.clearCaCertificateIdsList = function() {
  this.setCaCertificateIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.certificate.ListCertificatesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.certificate.ListCertificatesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.certificate.ListCertificatesRequest.displayName = 'proto.hiber.certificate.ListCertificatesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.certificate.ListCertificatesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.certificate.ListCertificatesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.certificate.ListCertificatesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.ListCertificatesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.certificate.CertificateSelection.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.toObject(includeInstance, f),
    includeCertificateContentInResponse: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.certificate.ListCertificatesRequest}
 */
proto.hiber.certificate.ListCertificatesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.certificate.ListCertificatesRequest;
  return proto.hiber.certificate.ListCertificatesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.certificate.ListCertificatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.certificate.ListCertificatesRequest}
 */
proto.hiber.certificate.ListCertificatesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.certificate.CertificateSelection;
      reader.readMessage(value,proto.hiber.certificate.CertificateSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    case 3:
      var value = new base_pb.Pagination;
      reader.readMessage(value,base_pb.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeCertificateContentInResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.certificate.ListCertificatesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.certificate.ListCertificatesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.certificate.ListCertificatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.ListCertificatesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.certificate.CertificateSelection.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Pagination.serializeBinaryToWriter
    );
  }
  f = message.getIncludeCertificateContentInResponse();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.certificate.ListCertificatesRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.certificate.ListCertificatesRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.certificate.ListCertificatesRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.certificate.ListCertificatesRequest.Response.displayName = 'proto.hiber.certificate.ListCertificatesRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.certificate.ListCertificatesRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.certificate.ListCertificatesRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.certificate.ListCertificatesRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.certificate.ListCertificatesRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.ListCertificatesRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    certificatesList: jspb.Message.toObjectList(msg.getCertificatesList(),
    proto.hiber.certificate.Certificate.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.certificate.ListCertificatesRequest.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.certificate.ListCertificatesRequest.Response}
 */
proto.hiber.certificate.ListCertificatesRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.certificate.ListCertificatesRequest.Response;
  return proto.hiber.certificate.ListCertificatesRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.certificate.ListCertificatesRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.certificate.ListCertificatesRequest.Response}
 */
proto.hiber.certificate.ListCertificatesRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.certificate.Certificate;
      reader.readMessage(value,proto.hiber.certificate.Certificate.deserializeBinaryFromReader);
      msg.addCertificates(value);
      break;
    case 2:
      var value = new proto.hiber.certificate.ListCertificatesRequest;
      reader.readMessage(value,proto.hiber.certificate.ListCertificatesRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 3:
      var value = new base_pb.Pagination.Result;
      reader.readMessage(value,base_pb.Pagination.Result.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.certificate.ListCertificatesRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.certificate.ListCertificatesRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.certificate.ListCertificatesRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.ListCertificatesRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertificatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.certificate.Certificate.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.certificate.ListCertificatesRequest.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Pagination.Result.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Certificate certificates = 1;
 * @return {!Array<!proto.hiber.certificate.Certificate>}
 */
proto.hiber.certificate.ListCertificatesRequest.Response.prototype.getCertificatesList = function() {
  return /** @type{!Array<!proto.hiber.certificate.Certificate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.certificate.Certificate, 1));
};


/** @param {!Array<!proto.hiber.certificate.Certificate>} value */
proto.hiber.certificate.ListCertificatesRequest.Response.prototype.setCertificatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.certificate.Certificate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.certificate.Certificate}
 */
proto.hiber.certificate.ListCertificatesRequest.Response.prototype.addCertificates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.certificate.Certificate, opt_index);
};


proto.hiber.certificate.ListCertificatesRequest.Response.prototype.clearCertificatesList = function() {
  this.setCertificatesList([]);
};


/**
 * optional ListCertificatesRequest request = 2;
 * @return {?proto.hiber.certificate.ListCertificatesRequest}
 */
proto.hiber.certificate.ListCertificatesRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.certificate.ListCertificatesRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.certificate.ListCertificatesRequest, 2));
};


/** @param {?proto.hiber.certificate.ListCertificatesRequest|undefined} value */
proto.hiber.certificate.ListCertificatesRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.certificate.ListCertificatesRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.certificate.ListCertificatesRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.Pagination.Result pagination = 3;
 * @return {?proto.hiber.Pagination.Result}
 */
proto.hiber.certificate.ListCertificatesRequest.Response.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination.Result} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination.Result, 3));
};


/** @param {?proto.hiber.Pagination.Result|undefined} value */
proto.hiber.certificate.ListCertificatesRequest.Response.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.certificate.ListCertificatesRequest.Response.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.certificate.ListCertificatesRequest.Response.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.certificate.ListCertificatesRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.certificate.ListCertificatesRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CertificateSelection selection = 2;
 * @return {?proto.hiber.certificate.CertificateSelection}
 */
proto.hiber.certificate.ListCertificatesRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.certificate.CertificateSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.certificate.CertificateSelection, 2));
};


/** @param {?proto.hiber.certificate.CertificateSelection|undefined} value */
proto.hiber.certificate.ListCertificatesRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.certificate.ListCertificatesRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.certificate.ListCertificatesRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.Pagination pagination = 3;
 * @return {?proto.hiber.Pagination}
 */
proto.hiber.certificate.ListCertificatesRequest.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination, 3));
};


/** @param {?proto.hiber.Pagination|undefined} value */
proto.hiber.certificate.ListCertificatesRequest.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.certificate.ListCertificatesRequest.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.certificate.ListCertificatesRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool include_certificate_content_in_response = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.certificate.ListCertificatesRequest.prototype.getIncludeCertificateContentInResponse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.hiber.certificate.ListCertificatesRequest.prototype.setIncludeCertificateContentInResponse = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.certificate.UploadCertificateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.certificate.UploadCertificateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.certificate.UploadCertificateRequest.displayName = 'proto.hiber.certificate.UploadCertificateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.certificate.UploadCertificateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.certificate.UploadCertificateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.certificate.UploadCertificateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.UploadCertificateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uploadCertificate: (f = msg.getUploadCertificate()) && proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.toObject(includeInstance, f),
    uploadCaCertificate: (f = msg.getUploadCaCertificate()) && proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.toObject(includeInstance, f),
    caCertificateId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    includeCertificateContentInResponse: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.certificate.UploadCertificateRequest}
 */
proto.hiber.certificate.UploadCertificateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.certificate.UploadCertificateRequest;
  return proto.hiber.certificate.UploadCertificateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.certificate.UploadCertificateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.certificate.UploadCertificateRequest}
 */
proto.hiber.certificate.UploadCertificateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.certificate.UploadCertificateRequest.UploadCertificate;
      reader.readMessage(value,proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.deserializeBinaryFromReader);
      msg.setUploadCertificate(value);
      break;
    case 3:
      var value = new proto.hiber.certificate.UploadCertificateRequest.UploadCertificate;
      reader.readMessage(value,proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.deserializeBinaryFromReader);
      msg.setUploadCaCertificate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCaCertificateId(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeCertificateContentInResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.certificate.UploadCertificateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.certificate.UploadCertificateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.certificate.UploadCertificateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.UploadCertificateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUploadCertificate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.serializeBinaryToWriter
    );
  }
  f = message.getUploadCaCertificate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.serializeBinaryToWriter
    );
  }
  f = message.getCaCertificateId();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getIncludeCertificateContentInResponse();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.certificate.UploadCertificateRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.certificate.UploadCertificateRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.certificate.UploadCertificateRequest.Response.displayName = 'proto.hiber.certificate.UploadCertificateRequest.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.certificate.UploadCertificateRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.certificate.UploadCertificateRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.certificate.UploadCertificateRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.UploadCertificateRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    certificate: (f = msg.getCertificate()) && proto.hiber.certificate.Certificate.toObject(includeInstance, f),
    request: (f = msg.getRequest()) && proto.hiber.certificate.UploadCertificateRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.certificate.UploadCertificateRequest.Response}
 */
proto.hiber.certificate.UploadCertificateRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.certificate.UploadCertificateRequest.Response;
  return proto.hiber.certificate.UploadCertificateRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.certificate.UploadCertificateRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.certificate.UploadCertificateRequest.Response}
 */
proto.hiber.certificate.UploadCertificateRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.certificate.Certificate;
      reader.readMessage(value,proto.hiber.certificate.Certificate.deserializeBinaryFromReader);
      msg.setCertificate(value);
      break;
    case 2:
      var value = new proto.hiber.certificate.UploadCertificateRequest;
      reader.readMessage(value,proto.hiber.certificate.UploadCertificateRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.certificate.UploadCertificateRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.certificate.UploadCertificateRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.certificate.UploadCertificateRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.UploadCertificateRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertificate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hiber.certificate.Certificate.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.certificate.UploadCertificateRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional Certificate certificate = 1;
 * @return {?proto.hiber.certificate.Certificate}
 */
proto.hiber.certificate.UploadCertificateRequest.Response.prototype.getCertificate = function() {
  return /** @type{?proto.hiber.certificate.Certificate} */ (
    jspb.Message.getWrapperField(this, proto.hiber.certificate.Certificate, 1));
};


/** @param {?proto.hiber.certificate.Certificate|undefined} value */
proto.hiber.certificate.UploadCertificateRequest.Response.prototype.setCertificate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hiber.certificate.UploadCertificateRequest.Response.prototype.clearCertificate = function() {
  this.setCertificate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.certificate.UploadCertificateRequest.Response.prototype.hasCertificate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UploadCertificateRequest request = 2;
 * @return {?proto.hiber.certificate.UploadCertificateRequest}
 */
proto.hiber.certificate.UploadCertificateRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.certificate.UploadCertificateRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.certificate.UploadCertificateRequest, 2));
};


/** @param {?proto.hiber.certificate.UploadCertificateRequest|undefined} value */
proto.hiber.certificate.UploadCertificateRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.certificate.UploadCertificateRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.certificate.UploadCertificateRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.certificate.UploadCertificateRequest.UploadCertificate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.certificate.UploadCertificateRequest.UploadCertificate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.displayName = 'proto.hiber.certificate.UploadCertificateRequest.UploadCertificate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.certificate.UploadCertificateRequest.UploadCertificate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    certificate: (f = msg.getCertificate()) && base_pb.BytesOrHex.toObject(includeInstance, f),
    privateKey: (f = msg.getPrivateKey()) && base_pb.BytesOrHex.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.certificate.UploadCertificateRequest.UploadCertificate}
 */
proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.certificate.UploadCertificateRequest.UploadCertificate;
  return proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.certificate.UploadCertificateRequest.UploadCertificate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.certificate.UploadCertificateRequest.UploadCertificate}
 */
proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new base_pb.BytesOrHex;
      reader.readMessage(value,base_pb.BytesOrHex.deserializeBinaryFromReader);
      msg.setCertificate(value);
      break;
    case 3:
      var value = new base_pb.BytesOrHex;
      reader.readMessage(value,base_pb.BytesOrHex.deserializeBinaryFromReader);
      msg.setPrivateKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.certificate.UploadCertificateRequest.UploadCertificate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCertificate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_pb.BytesOrHex.serializeBinaryToWriter
    );
  }
  f = message.getPrivateKey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.BytesOrHex.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional hiber.BytesOrHex certificate = 2;
 * @return {?proto.hiber.BytesOrHex}
 */
proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.prototype.getCertificate = function() {
  return /** @type{?proto.hiber.BytesOrHex} */ (
    jspb.Message.getWrapperField(this, base_pb.BytesOrHex, 2));
};


/** @param {?proto.hiber.BytesOrHex|undefined} value */
proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.prototype.setCertificate = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.prototype.clearCertificate = function() {
  this.setCertificate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.prototype.hasCertificate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.BytesOrHex private_key = 3;
 * @return {?proto.hiber.BytesOrHex}
 */
proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.prototype.getPrivateKey = function() {
  return /** @type{?proto.hiber.BytesOrHex} */ (
    jspb.Message.getWrapperField(this, base_pb.BytesOrHex, 3));
};


/** @param {?proto.hiber.BytesOrHex|undefined} value */
proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.prototype.setPrivateKey = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.prototype.clearPrivateKey = function() {
  this.setPrivateKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.certificate.UploadCertificateRequest.UploadCertificate.prototype.hasPrivateKey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.certificate.UploadCertificateRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.certificate.UploadCertificateRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UploadCertificate upload_certificate = 2;
 * @return {?proto.hiber.certificate.UploadCertificateRequest.UploadCertificate}
 */
proto.hiber.certificate.UploadCertificateRequest.prototype.getUploadCertificate = function() {
  return /** @type{?proto.hiber.certificate.UploadCertificateRequest.UploadCertificate} */ (
    jspb.Message.getWrapperField(this, proto.hiber.certificate.UploadCertificateRequest.UploadCertificate, 2));
};


/** @param {?proto.hiber.certificate.UploadCertificateRequest.UploadCertificate|undefined} value */
proto.hiber.certificate.UploadCertificateRequest.prototype.setUploadCertificate = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.certificate.UploadCertificateRequest.prototype.clearUploadCertificate = function() {
  this.setUploadCertificate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.certificate.UploadCertificateRequest.prototype.hasUploadCertificate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UploadCertificate upload_ca_certificate = 3;
 * @return {?proto.hiber.certificate.UploadCertificateRequest.UploadCertificate}
 */
proto.hiber.certificate.UploadCertificateRequest.prototype.getUploadCaCertificate = function() {
  return /** @type{?proto.hiber.certificate.UploadCertificateRequest.UploadCertificate} */ (
    jspb.Message.getWrapperField(this, proto.hiber.certificate.UploadCertificateRequest.UploadCertificate, 3));
};


/** @param {?proto.hiber.certificate.UploadCertificateRequest.UploadCertificate|undefined} value */
proto.hiber.certificate.UploadCertificateRequest.prototype.setUploadCaCertificate = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.certificate.UploadCertificateRequest.prototype.clearUploadCaCertificate = function() {
  this.setUploadCaCertificate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.certificate.UploadCertificateRequest.prototype.hasUploadCaCertificate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 ca_certificate_id = 4;
 * @return {number}
 */
proto.hiber.certificate.UploadCertificateRequest.prototype.getCaCertificateId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.hiber.certificate.UploadCertificateRequest.prototype.setCaCertificateId = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool include_certificate_content_in_response = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.certificate.UploadCertificateRequest.prototype.getIncludeCertificateContentInResponse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.hiber.certificate.UploadCertificateRequest.prototype.setIncludeCertificateContentInResponse = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.certificate.RenameCertificateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.certificate.RenameCertificateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.certificate.RenameCertificateRequest.displayName = 'proto.hiber.certificate.RenameCertificateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.certificate.RenameCertificateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.certificate.RenameCertificateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.certificate.RenameCertificateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.RenameCertificateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.certificate.CertificateSelection.toObject(includeInstance, f),
    newName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    includeCertificateContentInResponse: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.certificate.RenameCertificateRequest}
 */
proto.hiber.certificate.RenameCertificateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.certificate.RenameCertificateRequest;
  return proto.hiber.certificate.RenameCertificateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.certificate.RenameCertificateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.certificate.RenameCertificateRequest}
 */
proto.hiber.certificate.RenameCertificateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.certificate.CertificateSelection;
      reader.readMessage(value,proto.hiber.certificate.CertificateSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeCertificateContentInResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.certificate.RenameCertificateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.certificate.RenameCertificateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.certificate.RenameCertificateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.RenameCertificateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.certificate.CertificateSelection.serializeBinaryToWriter
    );
  }
  f = message.getNewName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIncludeCertificateContentInResponse();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.certificate.RenameCertificateRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.certificate.RenameCertificateRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.certificate.RenameCertificateRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.certificate.RenameCertificateRequest.Response.displayName = 'proto.hiber.certificate.RenameCertificateRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.certificate.RenameCertificateRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.certificate.RenameCertificateRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.certificate.RenameCertificateRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.certificate.RenameCertificateRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.RenameCertificateRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    certificatesList: jspb.Message.toObjectList(msg.getCertificatesList(),
    proto.hiber.certificate.Certificate.toObject, includeInstance),
    request: (f = msg.getRequest()) && proto.hiber.certificate.RenameCertificateRequest.toObject(includeInstance, f),
    pagination: (f = msg.getPagination()) && base_pb.Pagination.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.certificate.RenameCertificateRequest.Response}
 */
proto.hiber.certificate.RenameCertificateRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.certificate.RenameCertificateRequest.Response;
  return proto.hiber.certificate.RenameCertificateRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.certificate.RenameCertificateRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.certificate.RenameCertificateRequest.Response}
 */
proto.hiber.certificate.RenameCertificateRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hiber.certificate.Certificate;
      reader.readMessage(value,proto.hiber.certificate.Certificate.deserializeBinaryFromReader);
      msg.addCertificates(value);
      break;
    case 2:
      var value = new proto.hiber.certificate.RenameCertificateRequest;
      reader.readMessage(value,proto.hiber.certificate.RenameCertificateRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 3:
      var value = new base_pb.Pagination.Result;
      reader.readMessage(value,base_pb.Pagination.Result.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.certificate.RenameCertificateRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.certificate.RenameCertificateRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.certificate.RenameCertificateRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.RenameCertificateRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertificatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hiber.certificate.Certificate.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.certificate.RenameCertificateRequest.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      base_pb.Pagination.Result.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Certificate certificates = 1;
 * @return {!Array<!proto.hiber.certificate.Certificate>}
 */
proto.hiber.certificate.RenameCertificateRequest.Response.prototype.getCertificatesList = function() {
  return /** @type{!Array<!proto.hiber.certificate.Certificate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hiber.certificate.Certificate, 1));
};


/** @param {!Array<!proto.hiber.certificate.Certificate>} value */
proto.hiber.certificate.RenameCertificateRequest.Response.prototype.setCertificatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hiber.certificate.Certificate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hiber.certificate.Certificate}
 */
proto.hiber.certificate.RenameCertificateRequest.Response.prototype.addCertificates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hiber.certificate.Certificate, opt_index);
};


proto.hiber.certificate.RenameCertificateRequest.Response.prototype.clearCertificatesList = function() {
  this.setCertificatesList([]);
};


/**
 * optional RenameCertificateRequest request = 2;
 * @return {?proto.hiber.certificate.RenameCertificateRequest}
 */
proto.hiber.certificate.RenameCertificateRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.certificate.RenameCertificateRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.certificate.RenameCertificateRequest, 2));
};


/** @param {?proto.hiber.certificate.RenameCertificateRequest|undefined} value */
proto.hiber.certificate.RenameCertificateRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.certificate.RenameCertificateRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.certificate.RenameCertificateRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional hiber.Pagination.Result pagination = 3;
 * @return {?proto.hiber.Pagination.Result}
 */
proto.hiber.certificate.RenameCertificateRequest.Response.prototype.getPagination = function() {
  return /** @type{?proto.hiber.Pagination.Result} */ (
    jspb.Message.getWrapperField(this, base_pb.Pagination.Result, 3));
};


/** @param {?proto.hiber.Pagination.Result|undefined} value */
proto.hiber.certificate.RenameCertificateRequest.Response.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hiber.certificate.RenameCertificateRequest.Response.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.certificate.RenameCertificateRequest.Response.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.certificate.RenameCertificateRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.certificate.RenameCertificateRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CertificateSelection selection = 2;
 * @return {?proto.hiber.certificate.CertificateSelection}
 */
proto.hiber.certificate.RenameCertificateRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.certificate.CertificateSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.certificate.CertificateSelection, 2));
};


/** @param {?proto.hiber.certificate.CertificateSelection|undefined} value */
proto.hiber.certificate.RenameCertificateRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.certificate.RenameCertificateRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.certificate.RenameCertificateRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string new_name = 3;
 * @return {string}
 */
proto.hiber.certificate.RenameCertificateRequest.prototype.getNewName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.hiber.certificate.RenameCertificateRequest.prototype.setNewName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool include_certificate_content_in_response = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hiber.certificate.RenameCertificateRequest.prototype.getIncludeCertificateContentInResponse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.hiber.certificate.RenameCertificateRequest.prototype.setIncludeCertificateContentInResponse = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.certificate.DeleteCertificateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hiber.certificate.DeleteCertificateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.certificate.DeleteCertificateRequest.displayName = 'proto.hiber.certificate.DeleteCertificateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.certificate.DeleteCertificateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.certificate.DeleteCertificateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.certificate.DeleteCertificateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.DeleteCertificateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organization: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selection: (f = msg.getSelection()) && proto.hiber.certificate.CertificateSelection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.certificate.DeleteCertificateRequest}
 */
proto.hiber.certificate.DeleteCertificateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.certificate.DeleteCertificateRequest;
  return proto.hiber.certificate.DeleteCertificateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.certificate.DeleteCertificateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.certificate.DeleteCertificateRequest}
 */
proto.hiber.certificate.DeleteCertificateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 2:
      var value = new proto.hiber.certificate.CertificateSelection;
      reader.readMessage(value,proto.hiber.certificate.CertificateSelection.deserializeBinaryFromReader);
      msg.setSelection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.certificate.DeleteCertificateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.certificate.DeleteCertificateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.certificate.DeleteCertificateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.DeleteCertificateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.certificate.CertificateSelection.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hiber.certificate.DeleteCertificateRequest.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hiber.certificate.DeleteCertificateRequest.Response.repeatedFields_, null);
};
goog.inherits(proto.hiber.certificate.DeleteCertificateRequest.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hiber.certificate.DeleteCertificateRequest.Response.displayName = 'proto.hiber.certificate.DeleteCertificateRequest.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hiber.certificate.DeleteCertificateRequest.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hiber.certificate.DeleteCertificateRequest.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.hiber.certificate.DeleteCertificateRequest.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hiber.certificate.DeleteCertificateRequest.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.DeleteCertificateRequest.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    deletedCertificateIdsList: jspb.Message.getRepeatedField(msg, 1),
    request: (f = msg.getRequest()) && proto.hiber.certificate.DeleteCertificateRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hiber.certificate.DeleteCertificateRequest.Response}
 */
proto.hiber.certificate.DeleteCertificateRequest.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hiber.certificate.DeleteCertificateRequest.Response;
  return proto.hiber.certificate.DeleteCertificateRequest.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hiber.certificate.DeleteCertificateRequest.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hiber.certificate.DeleteCertificateRequest.Response}
 */
proto.hiber.certificate.DeleteCertificateRequest.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setDeletedCertificateIdsList(value);
      break;
    case 2:
      var value = new proto.hiber.certificate.DeleteCertificateRequest;
      reader.readMessage(value,proto.hiber.certificate.DeleteCertificateRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hiber.certificate.DeleteCertificateRequest.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hiber.certificate.DeleteCertificateRequest.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hiber.certificate.DeleteCertificateRequest.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hiber.certificate.DeleteCertificateRequest.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeletedCertificateIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hiber.certificate.DeleteCertificateRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated int64 deleted_certificate_ids = 1;
 * @return {!Array<number>}
 */
proto.hiber.certificate.DeleteCertificateRequest.Response.prototype.getDeletedCertificateIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.hiber.certificate.DeleteCertificateRequest.Response.prototype.setDeletedCertificateIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.hiber.certificate.DeleteCertificateRequest.Response.prototype.addDeletedCertificateIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.hiber.certificate.DeleteCertificateRequest.Response.prototype.clearDeletedCertificateIdsList = function() {
  this.setDeletedCertificateIdsList([]);
};


/**
 * optional DeleteCertificateRequest request = 2;
 * @return {?proto.hiber.certificate.DeleteCertificateRequest}
 */
proto.hiber.certificate.DeleteCertificateRequest.Response.prototype.getRequest = function() {
  return /** @type{?proto.hiber.certificate.DeleteCertificateRequest} */ (
    jspb.Message.getWrapperField(this, proto.hiber.certificate.DeleteCertificateRequest, 2));
};


/** @param {?proto.hiber.certificate.DeleteCertificateRequest|undefined} value */
proto.hiber.certificate.DeleteCertificateRequest.Response.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.certificate.DeleteCertificateRequest.Response.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.certificate.DeleteCertificateRequest.Response.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string organization = 1;
 * @return {string}
 */
proto.hiber.certificate.DeleteCertificateRequest.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hiber.certificate.DeleteCertificateRequest.prototype.setOrganization = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CertificateSelection selection = 2;
 * @return {?proto.hiber.certificate.CertificateSelection}
 */
proto.hiber.certificate.DeleteCertificateRequest.prototype.getSelection = function() {
  return /** @type{?proto.hiber.certificate.CertificateSelection} */ (
    jspb.Message.getWrapperField(this, proto.hiber.certificate.CertificateSelection, 2));
};


/** @param {?proto.hiber.certificate.CertificateSelection|undefined} value */
proto.hiber.certificate.DeleteCertificateRequest.prototype.setSelection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hiber.certificate.DeleteCertificateRequest.prototype.clearSelection = function() {
  this.setSelection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hiber.certificate.DeleteCertificateRequest.prototype.hasSelection = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.hiber.certificate);
