// Code generated by protoc-gen-go. DO NOT EDIT.
// source: email_notifications.proto

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EmailNotificationPreferences struct {
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	// Events to receive by email.
	EnabledNotifications *Filter_Events `protobuf:"bytes,2,opt,name=enabled_notifications,json=enabledNotifications" json:"enabled_notifications,omitempty"`
	// Filter events by modems.
	FilterModems *Filter_Modems `protobuf:"bytes,3,opt,name=filter_modems,json=filterModems" json:"filter_modems,omitempty"`
	// Filter events by tags.
	FilterTags *Filter_Tags `protobuf:"bytes,4,opt,name=filter_tags,json=filterTags" json:"filter_tags,omitempty"`
	// Types that are valid to be assigned to Recipient:
	//	*EmailNotificationPreferences_UserId
	//	*EmailNotificationPreferences_Custom
	Recipient isEmailNotificationPreferences_Recipient `protobuf_oneof:"recipient"`
	// Whether email is active for this user/address.
	Active bool `protobuf:"varint,7,opt,name=active" json:"active,omitempty"`
}

func (m *EmailNotificationPreferences) Reset()                    { *m = EmailNotificationPreferences{} }
func (m *EmailNotificationPreferences) String() string            { return proto.CompactTextString(m) }
func (*EmailNotificationPreferences) ProtoMessage()               {}
func (*EmailNotificationPreferences) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type isEmailNotificationPreferences_Recipient interface{ isEmailNotificationPreferences_Recipient() }

type EmailNotificationPreferences_UserId struct {
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,oneof"`
}
type EmailNotificationPreferences_Custom struct {
	Custom *EmailNotificationPreferences_CustomRecipient `protobuf:"bytes,6,opt,name=custom,oneof"`
}

func (*EmailNotificationPreferences_UserId) isEmailNotificationPreferences_Recipient() {}
func (*EmailNotificationPreferences_Custom) isEmailNotificationPreferences_Recipient() {}

func (m *EmailNotificationPreferences) GetRecipient() isEmailNotificationPreferences_Recipient {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *EmailNotificationPreferences) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *EmailNotificationPreferences) GetEnabledNotifications() *Filter_Events {
	if m != nil {
		return m.EnabledNotifications
	}
	return nil
}

func (m *EmailNotificationPreferences) GetFilterModems() *Filter_Modems {
	if m != nil {
		return m.FilterModems
	}
	return nil
}

func (m *EmailNotificationPreferences) GetFilterTags() *Filter_Tags {
	if m != nil {
		return m.FilterTags
	}
	return nil
}

func (m *EmailNotificationPreferences) GetUserId() string {
	if x, ok := m.GetRecipient().(*EmailNotificationPreferences_UserId); ok {
		return x.UserId
	}
	return ""
}

func (m *EmailNotificationPreferences) GetCustom() *EmailNotificationPreferences_CustomRecipient {
	if x, ok := m.GetRecipient().(*EmailNotificationPreferences_Custom); ok {
		return x.Custom
	}
	return nil
}

func (m *EmailNotificationPreferences) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EmailNotificationPreferences) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EmailNotificationPreferences_OneofMarshaler, _EmailNotificationPreferences_OneofUnmarshaler, _EmailNotificationPreferences_OneofSizer, []interface{}{
		(*EmailNotificationPreferences_UserId)(nil),
		(*EmailNotificationPreferences_Custom)(nil),
	}
}

func _EmailNotificationPreferences_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EmailNotificationPreferences)
	// recipient
	switch x := m.Recipient.(type) {
	case *EmailNotificationPreferences_UserId:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.UserId)
	case *EmailNotificationPreferences_Custom:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Custom); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EmailNotificationPreferences.Recipient has unexpected type %T", x)
	}
	return nil
}

func _EmailNotificationPreferences_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EmailNotificationPreferences)
	switch tag {
	case 5: // recipient.user_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Recipient = &EmailNotificationPreferences_UserId{x}
		return true, err
	case 6: // recipient.custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmailNotificationPreferences_CustomRecipient)
		err := b.DecodeMessage(msg)
		m.Recipient = &EmailNotificationPreferences_Custom{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EmailNotificationPreferences_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EmailNotificationPreferences)
	// recipient
	switch x := m.Recipient.(type) {
	case *EmailNotificationPreferences_UserId:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.UserId)))
		n += len(x.UserId)
	case *EmailNotificationPreferences_Custom:
		s := proto.Size(x.Custom)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EmailNotificationPreferences_CustomRecipient struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *EmailNotificationPreferences_CustomRecipient) Reset() {
	*m = EmailNotificationPreferences_CustomRecipient{}
}
func (m *EmailNotificationPreferences_CustomRecipient) String() string {
	return proto.CompactTextString(m)
}
func (*EmailNotificationPreferences_CustomRecipient) ProtoMessage() {}
func (*EmailNotificationPreferences_CustomRecipient) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{0, 0}
}

func (m *EmailNotificationPreferences_CustomRecipient) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *EmailNotificationPreferences_CustomRecipient) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// List the custom recipients and their preferences. Optionally, personal email preferences can be included.
type ListEmailNotificationPreferencesRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	// Search for a (partial) custom email address.
	SearchEmail string `protobuf:"bytes,2,opt,name=search_email,json=searchEmail" json:"search_email,omitempty"`
	// By default, this request only returns the email preferences for custom emails,
	// but you can choose to view user-specific preferences as well.
	IncludePersonalEmailPreferences bool        `protobuf:"varint,3,opt,name=include_personal_email_preferences,json=includePersonalEmailPreferences" json:"include_personal_email_preferences,omitempty"`
	Pagination                      *Pagination `protobuf:"bytes,4,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListEmailNotificationPreferencesRequest) Reset() {
	*m = ListEmailNotificationPreferencesRequest{}
}
func (m *ListEmailNotificationPreferencesRequest) String() string { return proto.CompactTextString(m) }
func (*ListEmailNotificationPreferencesRequest) ProtoMessage()    {}
func (*ListEmailNotificationPreferencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{1}
}

func (m *ListEmailNotificationPreferencesRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ListEmailNotificationPreferencesRequest) GetSearchEmail() string {
	if m != nil {
		return m.SearchEmail
	}
	return ""
}

func (m *ListEmailNotificationPreferencesRequest) GetIncludePersonalEmailPreferences() bool {
	if m != nil {
		return m.IncludePersonalEmailPreferences
	}
	return false
}

func (m *ListEmailNotificationPreferencesRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListEmailNotificationPreferencesRequest_Response struct {
	EmailPreferences []*EmailNotificationPreferences          `protobuf:"bytes,1,rep,name=email_preferences,json=emailPreferences" json:"email_preferences,omitempty"`
	Request          *ListEmailNotificationPreferencesRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination       *Pagination_Result                       `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListEmailNotificationPreferencesRequest_Response) Reset() {
	*m = ListEmailNotificationPreferencesRequest_Response{}
}
func (m *ListEmailNotificationPreferencesRequest_Response) String() string {
	return proto.CompactTextString(m)
}
func (*ListEmailNotificationPreferencesRequest_Response) ProtoMessage() {}
func (*ListEmailNotificationPreferencesRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{1, 0}
}

func (m *ListEmailNotificationPreferencesRequest_Response) GetEmailPreferences() []*EmailNotificationPreferences {
	if m != nil {
		return m.EmailPreferences
	}
	return nil
}

func (m *ListEmailNotificationPreferencesRequest_Response) GetRequest() *ListEmailNotificationPreferencesRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListEmailNotificationPreferencesRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ViewEmailNotificationPreferencesRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	// View the configuration for any email publisher with a custom email address.
	// Optional, should only be used if you want to get the email preferences for a custom recipient.
	// When not set, your personal email preferences are returned.
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
}

func (m *ViewEmailNotificationPreferencesRequest) Reset() {
	*m = ViewEmailNotificationPreferencesRequest{}
}
func (m *ViewEmailNotificationPreferencesRequest) String() string { return proto.CompactTextString(m) }
func (*ViewEmailNotificationPreferencesRequest) ProtoMessage()    {}
func (*ViewEmailNotificationPreferencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{2}
}

func (m *ViewEmailNotificationPreferencesRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ViewEmailNotificationPreferencesRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type UpdateEmailNotificationPreferencesRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	// Custom email address.
	// Only set this if you want to send notification to an email address not associated with your user.
	Custom *EmailNotificationPreferences_CustomRecipient `protobuf:"bytes,2,opt,name=custom" json:"custom,omitempty"`
	// Events to receive by email. An empty value enables email for all events.
	EnabledNotifications *Filter_Events_Update `protobuf:"bytes,3,opt,name=enabled_notifications,json=enabledNotifications" json:"enabled_notifications,omitempty"`
	// Filter events by modems. An empty value enables email for every modem's events.
	FilterModems *Filter_Modems_Update `protobuf:"bytes,4,opt,name=filter_modems,json=filterModems" json:"filter_modems,omitempty"`
	// Filter events by tags. An empty value enables email for all tags.
	FilterTags *Filter_Tags_Update `protobuf:"bytes,5,opt,name=filter_tags,json=filterTags" json:"filter_tags,omitempty"`
}

func (m *UpdateEmailNotificationPreferencesRequest) Reset() {
	*m = UpdateEmailNotificationPreferencesRequest{}
}
func (m *UpdateEmailNotificationPreferencesRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateEmailNotificationPreferencesRequest) ProtoMessage()    {}
func (*UpdateEmailNotificationPreferencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{3}
}

func (m *UpdateEmailNotificationPreferencesRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UpdateEmailNotificationPreferencesRequest) GetCustom() *EmailNotificationPreferences_CustomRecipient {
	if m != nil {
		return m.Custom
	}
	return nil
}

func (m *UpdateEmailNotificationPreferencesRequest) GetEnabledNotifications() *Filter_Events_Update {
	if m != nil {
		return m.EnabledNotifications
	}
	return nil
}

func (m *UpdateEmailNotificationPreferencesRequest) GetFilterModems() *Filter_Modems_Update {
	if m != nil {
		return m.FilterModems
	}
	return nil
}

func (m *UpdateEmailNotificationPreferencesRequest) GetFilterTags() *Filter_Tags_Update {
	if m != nil {
		return m.FilterTags
	}
	return nil
}

type RemoveAllEmailNotificationPreferencesRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	// Custom email address preferences to disable.
	Custom *EmailNotificationPreferences_CustomRecipient `protobuf:"bytes,2,opt,name=custom" json:"custom,omitempty"`
}

func (m *RemoveAllEmailNotificationPreferencesRequest) Reset() {
	*m = RemoveAllEmailNotificationPreferencesRequest{}
}
func (m *RemoveAllEmailNotificationPreferencesRequest) String() string {
	return proto.CompactTextString(m)
}
func (*RemoveAllEmailNotificationPreferencesRequest) ProtoMessage() {}
func (*RemoveAllEmailNotificationPreferencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{4}
}

func (m *RemoveAllEmailNotificationPreferencesRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *RemoveAllEmailNotificationPreferencesRequest) GetCustom() *EmailNotificationPreferences_CustomRecipient {
	if m != nil {
		return m.Custom
	}
	return nil
}

type RemoveAllEmailNotificationPreferencesRequest_Response struct {
}

func (m *RemoveAllEmailNotificationPreferencesRequest_Response) Reset() {
	*m = RemoveAllEmailNotificationPreferencesRequest_Response{}
}
func (m *RemoveAllEmailNotificationPreferencesRequest_Response) String() string {
	return proto.CompactTextString(m)
}
func (*RemoveAllEmailNotificationPreferencesRequest_Response) ProtoMessage() {}
func (*RemoveAllEmailNotificationPreferencesRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{4, 0}
}

type EmailHistorySelection struct {
	TimeRange    *TimeRange `protobuf:"bytes,1,opt,name=time_range,json=timeRange" json:"time_range,omitempty"`
	OnlyFailures bool       `protobuf:"varint,2,opt,name=only_failures,json=onlyFailures" json:"only_failures,omitempty"`
}

func (m *EmailHistorySelection) Reset()                    { *m = EmailHistorySelection{} }
func (m *EmailHistorySelection) String() string            { return proto.CompactTextString(m) }
func (*EmailHistorySelection) ProtoMessage()               {}
func (*EmailHistorySelection) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *EmailHistorySelection) GetTimeRange() *TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

func (m *EmailHistorySelection) GetOnlyFailures() bool {
	if m != nil {
		return m.OnlyFailures
	}
	return false
}

type EmailNotificationHistoryRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	// Custom email address preferences to get the history for. If not set, your email is used.
	Custom     *EmailNotificationPreferences_CustomRecipient `protobuf:"bytes,2,opt,name=custom" json:"custom,omitempty"`
	Selection  *EmailHistorySelection                        `protobuf:"bytes,3,opt,name=selection" json:"selection,omitempty"`
	Pagination *Pagination                                   `protobuf:"bytes,4,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *EmailNotificationHistoryRequest) Reset()                    { *m = EmailNotificationHistoryRequest{} }
func (m *EmailNotificationHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*EmailNotificationHistoryRequest) ProtoMessage()               {}
func (*EmailNotificationHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *EmailNotificationHistoryRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *EmailNotificationHistoryRequest) GetCustom() *EmailNotificationPreferences_CustomRecipient {
	if m != nil {
		return m.Custom
	}
	return nil
}

func (m *EmailNotificationHistoryRequest) GetSelection() *EmailHistorySelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *EmailNotificationHistoryRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type EmailNotificationHistoryRequest_Response struct {
	Emails     []*EmailNotificationHistoryRequest_Response_Email `protobuf:"bytes,1,rep,name=emails" json:"emails,omitempty"`
	Request    *EmailNotificationHistoryRequest                  `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result                                `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *EmailNotificationHistoryRequest_Response) Reset() {
	*m = EmailNotificationHistoryRequest_Response{}
}
func (m *EmailNotificationHistoryRequest_Response) String() string { return proto.CompactTextString(m) }
func (*EmailNotificationHistoryRequest_Response) ProtoMessage()    {}
func (*EmailNotificationHistoryRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{6, 0}
}

func (m *EmailNotificationHistoryRequest_Response) GetEmails() []*EmailNotificationHistoryRequest_Response_Email {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *EmailNotificationHistoryRequest_Response) GetRequest() *EmailNotificationHistoryRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *EmailNotificationHistoryRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type EmailNotificationHistoryRequest_Response_Email struct {
	Time       *Timestamp `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Title      string     `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Successful bool       `protobuf:"varint,4,opt,name=successful" json:"successful,omitempty"`
	Error      string     `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
}

func (m *EmailNotificationHistoryRequest_Response_Email) Reset() {
	*m = EmailNotificationHistoryRequest_Response_Email{}
}
func (m *EmailNotificationHistoryRequest_Response_Email) String() string {
	return proto.CompactTextString(m)
}
func (*EmailNotificationHistoryRequest_Response_Email) ProtoMessage() {}
func (*EmailNotificationHistoryRequest_Response_Email) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{6, 0, 0}
}

func (m *EmailNotificationHistoryRequest_Response_Email) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *EmailNotificationHistoryRequest_Response_Email) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EmailNotificationHistoryRequest_Response_Email) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *EmailNotificationHistoryRequest_Response_Email) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*EmailNotificationPreferences)(nil), "hiber.email.EmailNotificationPreferences")
	proto.RegisterType((*EmailNotificationPreferences_CustomRecipient)(nil), "hiber.email.EmailNotificationPreferences.CustomRecipient")
	proto.RegisterType((*ListEmailNotificationPreferencesRequest)(nil), "hiber.email.ListEmailNotificationPreferencesRequest")
	proto.RegisterType((*ListEmailNotificationPreferencesRequest_Response)(nil), "hiber.email.ListEmailNotificationPreferencesRequest.Response")
	proto.RegisterType((*ViewEmailNotificationPreferencesRequest)(nil), "hiber.email.ViewEmailNotificationPreferencesRequest")
	proto.RegisterType((*UpdateEmailNotificationPreferencesRequest)(nil), "hiber.email.UpdateEmailNotificationPreferencesRequest")
	proto.RegisterType((*RemoveAllEmailNotificationPreferencesRequest)(nil), "hiber.email.RemoveAllEmailNotificationPreferencesRequest")
	proto.RegisterType((*RemoveAllEmailNotificationPreferencesRequest_Response)(nil), "hiber.email.RemoveAllEmailNotificationPreferencesRequest.Response")
	proto.RegisterType((*EmailHistorySelection)(nil), "hiber.email.EmailHistorySelection")
	proto.RegisterType((*EmailNotificationHistoryRequest)(nil), "hiber.email.EmailNotificationHistoryRequest")
	proto.RegisterType((*EmailNotificationHistoryRequest_Response)(nil), "hiber.email.EmailNotificationHistoryRequest.Response")
	proto.RegisterType((*EmailNotificationHistoryRequest_Response_Email)(nil), "hiber.email.EmailNotificationHistoryRequest.Response.Email")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EmailNotificationPreferencesService service

type EmailNotificationPreferencesServiceClient interface {
	List(ctx context.Context, in *ListEmailNotificationPreferencesRequest, opts ...grpc.CallOption) (*ListEmailNotificationPreferencesRequest_Response, error)
	View(ctx context.Context, in *ViewEmailNotificationPreferencesRequest, opts ...grpc.CallOption) (*EmailNotificationPreferences, error)
	Update(ctx context.Context, in *UpdateEmailNotificationPreferencesRequest, opts ...grpc.CallOption) (*EmailNotificationPreferences, error)
	Delete(ctx context.Context, in *RemoveAllEmailNotificationPreferencesRequest, opts ...grpc.CallOption) (*RemoveAllEmailNotificationPreferencesRequest_Response, error)
	History(ctx context.Context, in *EmailNotificationHistoryRequest, opts ...grpc.CallOption) (*EmailNotificationHistoryRequest_Response, error)
}

type emailNotificationPreferencesServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmailNotificationPreferencesServiceClient(cc *grpc.ClientConn) EmailNotificationPreferencesServiceClient {
	return &emailNotificationPreferencesServiceClient{cc}
}

func (c *emailNotificationPreferencesServiceClient) List(ctx context.Context, in *ListEmailNotificationPreferencesRequest, opts ...grpc.CallOption) (*ListEmailNotificationPreferencesRequest_Response, error) {
	out := new(ListEmailNotificationPreferencesRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.email.EmailNotificationPreferencesService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailNotificationPreferencesServiceClient) View(ctx context.Context, in *ViewEmailNotificationPreferencesRequest, opts ...grpc.CallOption) (*EmailNotificationPreferences, error) {
	out := new(EmailNotificationPreferences)
	err := grpc.Invoke(ctx, "/hiber.email.EmailNotificationPreferencesService/View", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailNotificationPreferencesServiceClient) Update(ctx context.Context, in *UpdateEmailNotificationPreferencesRequest, opts ...grpc.CallOption) (*EmailNotificationPreferences, error) {
	out := new(EmailNotificationPreferences)
	err := grpc.Invoke(ctx, "/hiber.email.EmailNotificationPreferencesService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailNotificationPreferencesServiceClient) Delete(ctx context.Context, in *RemoveAllEmailNotificationPreferencesRequest, opts ...grpc.CallOption) (*RemoveAllEmailNotificationPreferencesRequest_Response, error) {
	out := new(RemoveAllEmailNotificationPreferencesRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.email.EmailNotificationPreferencesService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailNotificationPreferencesServiceClient) History(ctx context.Context, in *EmailNotificationHistoryRequest, opts ...grpc.CallOption) (*EmailNotificationHistoryRequest_Response, error) {
	out := new(EmailNotificationHistoryRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.email.EmailNotificationPreferencesService/History", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EmailNotificationPreferencesService service

type EmailNotificationPreferencesServiceServer interface {
	List(context.Context, *ListEmailNotificationPreferencesRequest) (*ListEmailNotificationPreferencesRequest_Response, error)
	View(context.Context, *ViewEmailNotificationPreferencesRequest) (*EmailNotificationPreferences, error)
	Update(context.Context, *UpdateEmailNotificationPreferencesRequest) (*EmailNotificationPreferences, error)
	Delete(context.Context, *RemoveAllEmailNotificationPreferencesRequest) (*RemoveAllEmailNotificationPreferencesRequest_Response, error)
	History(context.Context, *EmailNotificationHistoryRequest) (*EmailNotificationHistoryRequest_Response, error)
}

func RegisterEmailNotificationPreferencesServiceServer(s *grpc.Server, srv EmailNotificationPreferencesServiceServer) {
	s.RegisterService(&_EmailNotificationPreferencesService_serviceDesc, srv)
}

func _EmailNotificationPreferencesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailNotificationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailNotificationPreferencesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.email.EmailNotificationPreferencesService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailNotificationPreferencesServiceServer).List(ctx, req.(*ListEmailNotificationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailNotificationPreferencesService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewEmailNotificationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailNotificationPreferencesServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.email.EmailNotificationPreferencesService/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailNotificationPreferencesServiceServer).View(ctx, req.(*ViewEmailNotificationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailNotificationPreferencesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailNotificationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailNotificationPreferencesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.email.EmailNotificationPreferencesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailNotificationPreferencesServiceServer).Update(ctx, req.(*UpdateEmailNotificationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailNotificationPreferencesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllEmailNotificationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailNotificationPreferencesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.email.EmailNotificationPreferencesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailNotificationPreferencesServiceServer).Delete(ctx, req.(*RemoveAllEmailNotificationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailNotificationPreferencesService_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailNotificationHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailNotificationPreferencesServiceServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.email.EmailNotificationPreferencesService/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailNotificationPreferencesServiceServer).History(ctx, req.(*EmailNotificationHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmailNotificationPreferencesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.email.EmailNotificationPreferencesService",
	HandlerType: (*EmailNotificationPreferencesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _EmailNotificationPreferencesService_List_Handler,
		},
		{
			MethodName: "View",
			Handler:    _EmailNotificationPreferencesService_View_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EmailNotificationPreferencesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EmailNotificationPreferencesService_Delete_Handler,
		},
		{
			MethodName: "History",
			Handler:    _EmailNotificationPreferencesService_History_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "email_notifications.proto",
}

func init() { proto.RegisterFile("email_notifications.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 915 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xef, 0x6e, 0x1b, 0x45,
	0x10, 0xaf, 0x1d, 0xdb, 0xb1, 0xc7, 0xa9, 0x68, 0x57, 0x09, 0x72, 0xae, 0x88, 0x84, 0x2b, 0x52,
	0x53, 0xa9, 0xba, 0x88, 0x14, 0x10, 0xa5, 0xaa, 0xd4, 0x06, 0x1a, 0xb5, 0x02, 0x2a, 0xb3, 0x29,
	0xfd, 0xc0, 0x17, 0x6b, 0x7d, 0x1e, 0x5f, 0x57, 0xec, 0xfd, 0x61, 0x77, 0x2f, 0x28, 0xf0, 0x00,
	0x3c, 0x0f, 0x4f, 0xc2, 0x0b, 0x20, 0xf1, 0x02, 0xfd, 0xd4, 0x27, 0x40, 0xb7, 0xbb, 0xe7, 0xdc,
	0xd9, 0x69, 0xe4, 0x98, 0x48, 0xf0, 0xed, 0x76, 0x77, 0xe6, 0xf7, 0x9b, 0x99, 0x9d, 0xfd, 0xcd,
	0xc1, 0x36, 0xc6, 0x8c, 0x8b, 0x51, 0x92, 0x6a, 0x3e, 0xe5, 0x21, 0xd3, 0x3c, 0x4d, 0x54, 0x90,
	0xc9, 0x54, 0xa7, 0xa4, 0xff, 0x9a, 0x8f, 0x51, 0x06, 0xc6, 0xc0, 0x83, 0x31, 0x53, 0x68, 0x0f,
	0xbc, 0x9e, 0x66, 0x91, 0xfb, 0xdc, 0x89, 0xd2, 0x34, 0x12, 0xb8, 0x6f, 0x56, 0xe3, 0x7c, 0xba,
	0xaf, 0x79, 0x8c, 0x4a, 0xb3, 0x38, 0xb3, 0x06, 0xfe, 0x9f, 0x6b, 0xf0, 0xc1, 0xd3, 0x02, 0xe1,
	0x45, 0x85, 0x61, 0x28, 0x71, 0x8a, 0x12, 0x93, 0x10, 0x15, 0xf1, 0x61, 0x23, 0x95, 0x11, 0x4b,
	0xf8, 0xaf, 0xe6, 0x68, 0xd0, 0xd8, 0x6d, 0xec, 0xf5, 0x68, 0x6d, 0x8f, 0x3c, 0x87, 0x2d, 0x4c,
	0xd8, 0x58, 0xe0, 0xa4, 0x1e, 0xe8, 0xa0, 0xb9, 0xdb, 0xd8, 0xeb, 0x1f, 0x6c, 0x06, 0x36, 0xd2,
	0x23, 0x2e, 0x34, 0xca, 0xe0, 0xe9, 0x09, 0x26, 0x5a, 0xd1, 0x4d, 0xe7, 0x52, 0x25, 0x56, 0xe4,
	0x01, 0x5c, 0x9f, 0x1a, 0xb3, 0x51, 0x9c, 0x4e, 0x30, 0x56, 0x83, 0xb5, 0xf3, 0x20, 0xbe, 0x33,
	0x67, 0x74, 0xc3, 0x9a, 0xda, 0x15, 0xb9, 0x0f, 0x7d, 0xe7, 0xaa, 0x59, 0xa4, 0x06, 0x2d, 0xe3,
	0x48, 0xea, 0x8e, 0x2f, 0x59, 0xa4, 0x28, 0x58, 0xb3, 0xe2, 0x9b, 0x6c, 0xc3, 0x7a, 0xae, 0x50,
	0x8e, 0xf8, 0x64, 0xd0, 0x2e, 0x32, 0x7b, 0x76, 0x8d, 0x76, 0x8a, 0x8d, 0xe7, 0x13, 0x72, 0x0c,
	0x9d, 0x30, 0x57, 0x3a, 0x8d, 0x07, 0x1d, 0x03, 0xf5, 0x20, 0xa8, 0x14, 0x3c, 0xb8, 0xa8, 0x68,
	0xc1, 0x57, 0xc6, 0x8f, 0x62, 0xc8, 0x33, 0x8e, 0x89, 0x2e, 0x40, 0x2d, 0x14, 0x79, 0x1f, 0x3a,
	0x2c, 0xd4, 0xfc, 0x04, 0x07, 0xeb, 0xbb, 0x8d, 0xbd, 0x2e, 0x75, 0x2b, 0xef, 0x21, 0xbc, 0x37,
	0xe7, 0x44, 0x36, 0xa1, 0x6d, 0xa8, 0x5c, 0xc9, 0xed, 0x82, 0x10, 0x68, 0x25, 0x2c, 0x46, 0x53,
	0xda, 0x1e, 0x35, 0xdf, 0x87, 0x7d, 0xe8, 0xc9, 0xd2, 0xcd, 0xff, 0x7b, 0x0d, 0xee, 0x7c, 0xcb,
	0x95, 0xbe, 0x28, 0x40, 0x8a, 0x3f, 0xe7, 0xa8, 0xf4, 0x52, 0x97, 0xfb, 0x11, 0x6c, 0x28, 0x64,
	0x32, 0x7c, 0x3d, 0xb2, 0xd1, 0x58, 0xe2, 0xbe, 0xdd, 0x33, 0x24, 0xe4, 0x1b, 0xf0, 0x79, 0x12,
	0x8a, 0x7c, 0x82, 0xa3, 0x0c, 0xa5, 0x4a, 0x13, 0x26, 0xac, 0xf1, 0x28, 0x3b, 0xe3, 0x34, 0x37,
	0xd9, 0xa5, 0x3b, 0xce, 0x72, 0xe8, 0x0c, 0x0d, 0x42, 0xb5, 0xe1, 0x3e, 0x01, 0xc8, 0x58, 0xc4,
	0x13, 0x1b, 0x91, 0xbd, 0xc5, 0x9b, 0xae, 0xf4, 0xc3, 0xd9, 0x01, 0xad, 0x18, 0x79, 0x6f, 0x1a,
	0xd0, 0xa5, 0xa8, 0xb2, 0x34, 0x51, 0x48, 0x5e, 0xc1, 0xcd, 0x45, 0xee, 0xc6, 0xee, 0xda, 0x5e,
	0xff, 0xe0, 0xee, 0xd2, 0x37, 0x48, 0x6f, 0xe0, 0x7c, 0x5c, 0x2f, 0x60, 0x5d, 0xda, 0xb2, 0xb9,
	0xb6, 0xfe, 0xb4, 0x86, 0xb6, 0x64, 0xc9, 0x69, 0x09, 0x42, 0xbe, 0xa8, 0xe5, 0x69, 0xdb, 0x7c,
	0xb0, 0x90, 0x67, 0x40, 0x51, 0xe5, 0x42, 0x57, 0xd3, 0xf5, 0x43, 0xb8, 0xf3, 0x8a, 0xe3, 0x2f,
	0x57, 0x75, 0xc1, 0xb3, 0x3e, 0x6b, 0x56, 0xfa, 0xcc, 0x7f, 0xdb, 0x84, 0xbb, 0x3f, 0x64, 0x13,
	0xa6, 0xf1, 0xaa, 0x78, 0xbe, 0x9f, 0xbd, 0xa7, 0xe6, 0xbf, 0x7c, 0x4f, 0xb3, 0xd7, 0x34, 0x7c,
	0x97, 0xf0, 0xd8, 0x72, 0xde, 0x3a, 0x4f, 0x78, 0x02, 0x9b, 0xd5, 0x3b, 0xf4, 0xe7, 0xf1, 0xbc,
	0xfe, 0xb4, 0xce, 0x43, 0xb2, 0x8a, 0x53, 0x22, 0xd5, 0x65, 0xe8, 0xcb, 0xba, 0x0c, 0xb5, 0x8d,
	0xff, 0xf6, 0xa2, 0x0c, 0x95, 0xde, 0x15, 0x35, 0xf2, 0xff, 0x68, 0xc0, 0x3d, 0x8a, 0x71, 0x7a,
	0x82, 0x4f, 0x84, 0xf8, 0xff, 0xd6, 0xdd, 0x83, 0xb3, 0xf7, 0xe6, 0xc7, 0xb0, 0x65, 0x30, 0x9e,
	0x71, 0xa5, 0x53, 0x79, 0x7a, 0x8c, 0x02, 0x43, 0xc3, 0xbb, 0x0f, 0x50, 0x4c, 0x9b, 0x91, 0x64,
	0x49, 0x84, 0x26, 0xb2, 0xfe, 0xc1, 0x0d, 0xc7, 0xfd, 0x92, 0xc7, 0x48, 0x8b, 0x7d, 0xda, 0xd3,
	0xe5, 0x27, 0xb9, 0x0d, 0xd7, 0xd3, 0x44, 0x9c, 0x8e, 0xa6, 0x8c, 0x8b, 0x5c, 0xa2, 0x1d, 0x1f,
	0x5d, 0xba, 0x51, 0x6c, 0x1e, 0xb9, 0x3d, 0xff, 0x4d, 0x0b, 0x76, 0x16, 0x62, 0x76, 0xdc, 0xff,
	0x71, 0x37, 0x3e, 0x86, 0x9e, 0x2a, 0xb3, 0x77, 0x1d, 0xe8, 0x2f, 0xa2, 0xce, 0xd7, 0x89, 0x9e,
	0x39, 0xad, 0xa2, 0x7d, 0x7f, 0x35, 0x2b, 0xda, 0x77, 0x0c, 0x1d, 0xc3, 0x54, 0x0a, 0xde, 0xc3,
	0x8b, 0x93, 0xaa, 0x97, 0x2d, 0x28, 0x61, 0xac, 0x21, 0x75, 0x50, 0xe4, 0x68, 0x5e, 0xf8, 0xee,
	0x5d, 0x06, 0xf5, 0x0a, 0x04, 0xcf, 0x3b, 0x85, 0xb6, 0x1d, 0x34, 0x1f, 0x43, 0xab, 0x68, 0x97,
	0x73, 0x9a, 0xc9, 0xfc, 0xd3, 0x50, 0x73, 0x5a, 0x08, 0x9a, 0xe6, 0x5a, 0x94, 0x33, 0xd2, 0x2e,
	0xc8, 0x87, 0x00, 0x2a, 0x0f, 0x43, 0x54, 0x6a, 0x9a, 0x0b, 0x53, 0xdb, 0x2e, 0xad, 0xec, 0x18,
	0x19, 0x94, 0x32, 0x95, 0xf6, 0x3f, 0x80, 0xda, 0xc5, 0xc1, 0xdb, 0x16, 0xdc, 0xbe, 0xa8, 0x19,
	0x8e, 0x51, 0x9e, 0xf0, 0x10, 0xc9, 0x6f, 0xd0, 0x2a, 0x26, 0x00, 0x59, 0x69, 0x28, 0x78, 0x8f,
	0x56, 0xf1, 0x9a, 0xdd, 0x17, 0x89, 0xa0, 0x55, 0x0c, 0x84, 0x39, 0xf2, 0x25, 0x67, 0x84, 0xb7,
	0xfc, 0x54, 0x24, 0x3f, 0x41, 0xc7, 0xaa, 0x16, 0xf9, 0xbc, 0xe6, 0xb4, 0xf4, 0xa0, 0xb8, 0x0c,
	0xd9, 0xef, 0x0d, 0xe8, 0x7c, 0x8d, 0x02, 0x35, 0x92, 0xfa, 0xe3, 0xbc, 0x8c, 0x42, 0x7a, 0x87,
	0x2b, 0xbb, 0x9e, 0xd5, 0x37, 0x81, 0x75, 0xd7, 0xd4, 0xe4, 0x52, 0xbd, 0xef, 0x7d, 0xb6, 0xd2,
	0xfb, 0x3b, 0x7c, 0x04, 0xb7, 0x22, 0x91, 0x8e, 0x99, 0x70, 0xee, 0x2c, 0xe3, 0x41, 0x24, 0xb3,
	0xd0, 0xe2, 0x1c, 0x6e, 0x2d, 0x00, 0xa9, 0x27, 0x19, 0x1f, 0x5e, 0xfb, 0xb1, 0x6d, 0xcc, 0xc7,
	0x1d, 0xf3, 0x6b, 0x7f, 0xff, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x94, 0xcc, 0x94, 0x3c,
	0x0c, 0x00, 0x00,
}
