// Code generated by protoc-gen-go. DO NOT EDIT.
// source: publisher.proto

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This type remains for backwards compatibility, but it should not be used.
type Publisher_ContentType int32

const (
	Publisher_DEFAULT Publisher_ContentType = 0
	Publisher_JSON    Publisher_ContentType = 1
	Publisher_PROTO   Publisher_ContentType = 2
)

var Publisher_ContentType_name = map[int32]string{
	0: "DEFAULT",
	1: "JSON",
	2: "PROTO",
}
var Publisher_ContentType_value = map[string]int32{
	"DEFAULT": 0,
	"JSON":    1,
	"PROTO":   2,
}

func (x Publisher_ContentType) String() string {
	return proto.EnumName(Publisher_ContentType_name, int32(x))
}
func (Publisher_ContentType) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{0, 0} }

type Publisher_Type int32

const (
	Publisher_HTTP    Publisher_Type = 0
	Publisher_MQTT    Publisher_Type = 1
	Publisher_AWS_IOT Publisher_Type = 2
	Publisher_EMAIL   Publisher_Type = 3
	Publisher_SLACK   Publisher_Type = 4
)

var Publisher_Type_name = map[int32]string{
	0: "HTTP",
	1: "MQTT",
	2: "AWS_IOT",
	3: "EMAIL",
	4: "SLACK",
}
var Publisher_Type_value = map[string]int32{
	"HTTP":    0,
	"MQTT":    1,
	"AWS_IOT": 2,
	"EMAIL":   3,
	"SLACK":   4,
}

func (x Publisher_Type) String() string {
	return proto.EnumName(Publisher_Type_name, int32(x))
}
func (Publisher_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{0, 1} }

type Publisher_Data_MQTTConfig_QoS int32

const (
	Publisher_Data_MQTTConfig_DEFAULT Publisher_Data_MQTTConfig_QoS = 0
	// Qos level 0
	Publisher_Data_MQTTConfig_AT_MOST_ONCE Publisher_Data_MQTTConfig_QoS = 1
	// Qos level 1
	Publisher_Data_MQTTConfig_AT_LEAST_ONCE Publisher_Data_MQTTConfig_QoS = 2
	// Qos level 2
	Publisher_Data_MQTTConfig_EXACTLY_ONCE Publisher_Data_MQTTConfig_QoS = 3
)

var Publisher_Data_MQTTConfig_QoS_name = map[int32]string{
	0: "DEFAULT",
	1: "AT_MOST_ONCE",
	2: "AT_LEAST_ONCE",
	3: "EXACTLY_ONCE",
}
var Publisher_Data_MQTTConfig_QoS_value = map[string]int32{
	"DEFAULT":       0,
	"AT_MOST_ONCE":  1,
	"AT_LEAST_ONCE": 2,
	"EXACTLY_ONCE":  3,
}

func (x Publisher_Data_MQTTConfig_QoS) String() string {
	return proto.EnumName(Publisher_Data_MQTTConfig_QoS_name, int32(x))
}
func (Publisher_Data_MQTTConfig_QoS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor16, []int{0, 0, 0, 0}
}

// Generic publisher. A Publisher is a generic parent of the
// - webhook publisher
// - MQTT publisher
// - AWS IoT publisher
// - email publisher
//
// As such, it has common data and can have a configuration for one of those types.
//
// Used to have it's own API encompassing everything, but this has been split up to its individual parts in
// - WebhookService
// - MQTTService
// - AWSIoTService
// - EmailNotificationPreferencesService
//
// Now, this types is only used in the relevant events.
type Publisher struct {
	Id          int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// This field remains for backwards compatibility, but it should not be used.
	DeprecatedData  *Publisher_Data    `protobuf:"bytes,3,opt,name=deprecated_data,json=deprecatedData" json:"deprecated_data,omitempty"`
	Filters         *Publisher_Filters `protobuf:"bytes,4,opt,name=filters" json:"filters,omitempty"`
	Tags            []*Tag             `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	Health          Health             `protobuf:"varint,6,opt,name=health,enum=hiber.Health" json:"health,omitempty"`
	Type            Publisher_Type     `protobuf:"varint,7,opt,name=type,enum=hiber.publisher.Publisher_Type" json:"type,omitempty"`
	InCooldownUntil *Timestamp         `protobuf:"bytes,8,opt,name=in_cooldown_until,json=inCooldownUntil" json:"in_cooldown_until,omitempty"`
	Disabled        bool               `protobuf:"varint,9,opt,name=disabled" json:"disabled,omitempty"`
	// The configuration for its type.
	//
	// Types that are valid to be assigned to Data:
	//	*Publisher_Http
	//	*Publisher_Mqtt
	//	*Publisher_AwsIot
	//	*Publisher_Email
	//	*Publisher_Slack
	Data isPublisher_Data `protobuf_oneof:"data"`
}

func (m *Publisher) Reset()                    { *m = Publisher{} }
func (m *Publisher) String() string            { return proto.CompactTextString(m) }
func (*Publisher) ProtoMessage()               {}
func (*Publisher) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

type isPublisher_Data interface{ isPublisher_Data() }

type Publisher_Http struct {
	Http *Webhook_WebhookData `protobuf:"bytes,10,opt,name=http,oneof"`
}
type Publisher_Mqtt struct {
	Mqtt *MQTTPublisher_Data `protobuf:"bytes,11,opt,name=mqtt,oneof"`
}
type Publisher_AwsIot struct {
	AwsIot *AWSIoTConfiguration `protobuf:"bytes,12,opt,name=aws_iot,json=awsIot,oneof"`
}
type Publisher_Email struct {
	Email *EmailNotificationPreferences `protobuf:"bytes,13,opt,name=email,oneof"`
}
type Publisher_Slack struct {
	Slack *SlackPublisher_Data `protobuf:"bytes,14,opt,name=slack,oneof"`
}

func (*Publisher_Http) isPublisher_Data()   {}
func (*Publisher_Mqtt) isPublisher_Data()   {}
func (*Publisher_AwsIot) isPublisher_Data() {}
func (*Publisher_Email) isPublisher_Data()  {}
func (*Publisher_Slack) isPublisher_Data()  {}

func (m *Publisher) GetData() isPublisher_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Publisher) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Publisher) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Publisher) GetDeprecatedData() *Publisher_Data {
	if m != nil {
		return m.DeprecatedData
	}
	return nil
}

func (m *Publisher) GetFilters() *Publisher_Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Publisher) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Publisher) GetHealth() Health {
	if m != nil {
		return m.Health
	}
	return Health_OK
}

func (m *Publisher) GetType() Publisher_Type {
	if m != nil {
		return m.Type
	}
	return Publisher_HTTP
}

func (m *Publisher) GetInCooldownUntil() *Timestamp {
	if m != nil {
		return m.InCooldownUntil
	}
	return nil
}

func (m *Publisher) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *Publisher) GetHttp() *Webhook_WebhookData {
	if x, ok := m.GetData().(*Publisher_Http); ok {
		return x.Http
	}
	return nil
}

func (m *Publisher) GetMqtt() *MQTTPublisher_Data {
	if x, ok := m.GetData().(*Publisher_Mqtt); ok {
		return x.Mqtt
	}
	return nil
}

func (m *Publisher) GetAwsIot() *AWSIoTConfiguration {
	if x, ok := m.GetData().(*Publisher_AwsIot); ok {
		return x.AwsIot
	}
	return nil
}

func (m *Publisher) GetEmail() *EmailNotificationPreferences {
	if x, ok := m.GetData().(*Publisher_Email); ok {
		return x.Email
	}
	return nil
}

func (m *Publisher) GetSlack() *SlackPublisher_Data {
	if x, ok := m.GetData().(*Publisher_Slack); ok {
		return x.Slack
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Publisher) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Publisher_OneofMarshaler, _Publisher_OneofUnmarshaler, _Publisher_OneofSizer, []interface{}{
		(*Publisher_Http)(nil),
		(*Publisher_Mqtt)(nil),
		(*Publisher_AwsIot)(nil),
		(*Publisher_Email)(nil),
		(*Publisher_Slack)(nil),
	}
}

func _Publisher_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Publisher)
	// data
	switch x := m.Data.(type) {
	case *Publisher_Http:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case *Publisher_Mqtt:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mqtt); err != nil {
			return err
		}
	case *Publisher_AwsIot:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AwsIot); err != nil {
			return err
		}
	case *Publisher_Email:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Email); err != nil {
			return err
		}
	case *Publisher_Slack:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Slack); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Publisher.Data has unexpected type %T", x)
	}
	return nil
}

func _Publisher_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Publisher)
	switch tag {
	case 10: // data.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Webhook_WebhookData)
		err := b.DecodeMessage(msg)
		m.Data = &Publisher_Http{msg}
		return true, err
	case 11: // data.mqtt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MQTTPublisher_Data)
		err := b.DecodeMessage(msg)
		m.Data = &Publisher_Mqtt{msg}
		return true, err
	case 12: // data.aws_iot
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AWSIoTConfiguration)
		err := b.DecodeMessage(msg)
		m.Data = &Publisher_AwsIot{msg}
		return true, err
	case 13: // data.email
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmailNotificationPreferences)
		err := b.DecodeMessage(msg)
		m.Data = &Publisher_Email{msg}
		return true, err
	case 14: // data.slack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SlackPublisher_Data)
		err := b.DecodeMessage(msg)
		m.Data = &Publisher_Slack{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Publisher_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Publisher)
	// data
	switch x := m.Data.(type) {
	case *Publisher_Http:
		s := proto.Size(x.Http)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Publisher_Mqtt:
		s := proto.Size(x.Mqtt)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Publisher_AwsIot:
		s := proto.Size(x.AwsIot)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Publisher_Email:
		s := proto.Size(x.Email)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Publisher_Slack:
		s := proto.Size(x.Slack)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// This type remains for backwards compatibility, but it should not be used.
type Publisher_Data struct {
	Url               string                `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	ContentType       Publisher_ContentType `protobuf:"varint,2,opt,name=content_type,json=contentType,enum=hiber.publisher.Publisher_ContentType" json:"content_type,omitempty"`
	Disabled          bool                  `protobuf:"varint,3,opt,name=disabled" json:"disabled,omitempty"`
	CertificateId     int64                 `protobuf:"varint,4,opt,name=certificate_id,json=certificateId" json:"certificate_id,omitempty"`
	CertificateName   string                `protobuf:"bytes,5,opt,name=certificate_name,json=certificateName" json:"certificate_name,omitempty"`
	CaCertificateId   int64                 `protobuf:"varint,6,opt,name=ca_certificate_id,json=caCertificateId" json:"ca_certificate_id,omitempty"`
	CaCertificateName string                `protobuf:"bytes,7,opt,name=ca_certificate_name,json=caCertificateName" json:"ca_certificate_name,omitempty"`
	// Types that are valid to be assigned to Config:
	//	*Publisher_Data_Http
	//	*Publisher_Data_Mqtt
	Config isPublisher_Data_Config `protobuf_oneof:"config"`
}

func (m *Publisher_Data) Reset()                    { *m = Publisher_Data{} }
func (m *Publisher_Data) String() string            { return proto.CompactTextString(m) }
func (*Publisher_Data) ProtoMessage()               {}
func (*Publisher_Data) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{0, 0} }

type isPublisher_Data_Config interface{ isPublisher_Data_Config() }

type Publisher_Data_Http struct {
	Http *Publisher_Data_HTTPConfig `protobuf:"bytes,8,opt,name=http,oneof"`
}
type Publisher_Data_Mqtt struct {
	Mqtt *Publisher_Data_MQTTConfig `protobuf:"bytes,9,opt,name=mqtt,oneof"`
}

func (*Publisher_Data_Http) isPublisher_Data_Config() {}
func (*Publisher_Data_Mqtt) isPublisher_Data_Config() {}

func (m *Publisher_Data) GetConfig() isPublisher_Data_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Publisher_Data) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Publisher_Data) GetContentType() Publisher_ContentType {
	if m != nil {
		return m.ContentType
	}
	return Publisher_DEFAULT
}

func (m *Publisher_Data) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *Publisher_Data) GetCertificateId() int64 {
	if m != nil {
		return m.CertificateId
	}
	return 0
}

func (m *Publisher_Data) GetCertificateName() string {
	if m != nil {
		return m.CertificateName
	}
	return ""
}

func (m *Publisher_Data) GetCaCertificateId() int64 {
	if m != nil {
		return m.CaCertificateId
	}
	return 0
}

func (m *Publisher_Data) GetCaCertificateName() string {
	if m != nil {
		return m.CaCertificateName
	}
	return ""
}

func (m *Publisher_Data) GetHttp() *Publisher_Data_HTTPConfig {
	if x, ok := m.GetConfig().(*Publisher_Data_Http); ok {
		return x.Http
	}
	return nil
}

func (m *Publisher_Data) GetMqtt() *Publisher_Data_MQTTConfig {
	if x, ok := m.GetConfig().(*Publisher_Data_Mqtt); ok {
		return x.Mqtt
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Publisher_Data) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Publisher_Data_OneofMarshaler, _Publisher_Data_OneofUnmarshaler, _Publisher_Data_OneofSizer, []interface{}{
		(*Publisher_Data_Http)(nil),
		(*Publisher_Data_Mqtt)(nil),
	}
}

func _Publisher_Data_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Publisher_Data)
	// config
	switch x := m.Config.(type) {
	case *Publisher_Data_Http:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case *Publisher_Data_Mqtt:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mqtt); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Publisher_Data.Config has unexpected type %T", x)
	}
	return nil
}

func _Publisher_Data_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Publisher_Data)
	switch tag {
	case 8: // config.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Publisher_Data_HTTPConfig)
		err := b.DecodeMessage(msg)
		m.Config = &Publisher_Data_Http{msg}
		return true, err
	case 9: // config.mqtt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Publisher_Data_MQTTConfig)
		err := b.DecodeMessage(msg)
		m.Config = &Publisher_Data_Mqtt{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Publisher_Data_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Publisher_Data)
	// config
	switch x := m.Config.(type) {
	case *Publisher_Data_Http:
		s := proto.Size(x.Http)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Publisher_Data_Mqtt:
		s := proto.Size(x.Mqtt)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// This field remains for backwards compatibility, but it should not be used.
type Publisher_Data_MQTTConfig struct {
	Topic string                        `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Qos   Publisher_Data_MQTTConfig_QoS `protobuf:"varint,2,opt,name=qos,enum=hiber.publisher.Publisher_Data_MQTTConfig_QoS" json:"qos,omitempty"`
	// Optional username to authenticate with.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	// Optional password to authenticate with. Requires username to be set.
	Password string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
	// Identifier used by the MQTT client. Defaults to "hiber".
	Identifier string `protobuf:"bytes,5,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *Publisher_Data_MQTTConfig) Reset()         { *m = Publisher_Data_MQTTConfig{} }
func (m *Publisher_Data_MQTTConfig) String() string { return proto.CompactTextString(m) }
func (*Publisher_Data_MQTTConfig) ProtoMessage()    {}
func (*Publisher_Data_MQTTConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{0, 0, 0}
}

func (m *Publisher_Data_MQTTConfig) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Publisher_Data_MQTTConfig) GetQos() Publisher_Data_MQTTConfig_QoS {
	if m != nil {
		return m.Qos
	}
	return Publisher_Data_MQTTConfig_DEFAULT
}

func (m *Publisher_Data_MQTTConfig) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Publisher_Data_MQTTConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Publisher_Data_MQTTConfig) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

// This field remains for backwards compatibility, but it should not be used.
type Publisher_Data_HTTPConfig struct {
	// Used to generate the HMAC-SHA256 header on every publisher call, which you can use to verify the message.
	// The HMAC-SHA256 header is calculated with the message body and this secret.
	// There are many examples of how to do this in different languages, for example:
	// https://github.com/danharper/hmac-examples
	Secret string `protobuf:"bytes,1,opt,name=secret" json:"secret,omitempty"`
}

func (m *Publisher_Data_HTTPConfig) Reset()         { *m = Publisher_Data_HTTPConfig{} }
func (m *Publisher_Data_HTTPConfig) String() string { return proto.CompactTextString(m) }
func (*Publisher_Data_HTTPConfig) ProtoMessage()    {}
func (*Publisher_Data_HTTPConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{0, 0, 1}
}

func (m *Publisher_Data_HTTPConfig) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type Publisher_Filters struct {
	EventTypes   *Filter_Events `protobuf:"bytes,1,opt,name=event_types,json=eventTypes" json:"event_types,omitempty"`
	ModemNumbers *Filter_Modems `protobuf:"bytes,2,opt,name=modem_numbers,json=modemNumbers" json:"modem_numbers,omitempty"`
	Tags         *Filter_Tags   `protobuf:"bytes,3,opt,name=tags" json:"tags,omitempty"`
}

func (m *Publisher_Filters) Reset()                    { *m = Publisher_Filters{} }
func (m *Publisher_Filters) String() string            { return proto.CompactTextString(m) }
func (*Publisher_Filters) ProtoMessage()               {}
func (*Publisher_Filters) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{0, 1} }

func (m *Publisher_Filters) GetEventTypes() *Filter_Events {
	if m != nil {
		return m.EventTypes
	}
	return nil
}

func (m *Publisher_Filters) GetModemNumbers() *Filter_Modems {
	if m != nil {
		return m.ModemNumbers
	}
	return nil
}

func (m *Publisher_Filters) GetTags() *Filter_Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

type UpdatePublisherRequest struct {
}

func (m *UpdatePublisherRequest) Reset()                    { *m = UpdatePublisherRequest{} }
func (m *UpdatePublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePublisherRequest) ProtoMessage()               {}
func (*UpdatePublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{1} }

type UpdatePublisherRequest_UpdateModems struct {
	Updated bool           `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Value   *Filter_Modems `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdatePublisherRequest_UpdateModems) Reset()         { *m = UpdatePublisherRequest_UpdateModems{} }
func (m *UpdatePublisherRequest_UpdateModems) String() string { return proto.CompactTextString(m) }
func (*UpdatePublisherRequest_UpdateModems) ProtoMessage()    {}
func (*UpdatePublisherRequest_UpdateModems) Descriptor() ([]byte, []int) {
	return fileDescriptor16, []int{1, 0}
}

func (m *UpdatePublisherRequest_UpdateModems) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdatePublisherRequest_UpdateModems) GetValue() *Filter_Modems {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Publisher)(nil), "hiber.publisher.Publisher")
	proto.RegisterType((*Publisher_Data)(nil), "hiber.publisher.Publisher.Data")
	proto.RegisterType((*Publisher_Data_MQTTConfig)(nil), "hiber.publisher.Publisher.Data.MQTTConfig")
	proto.RegisterType((*Publisher_Data_HTTPConfig)(nil), "hiber.publisher.Publisher.Data.HTTPConfig")
	proto.RegisterType((*Publisher_Filters)(nil), "hiber.publisher.Publisher.Filters")
	proto.RegisterType((*UpdatePublisherRequest)(nil), "hiber.publisher.UpdatePublisherRequest")
	proto.RegisterType((*UpdatePublisherRequest_UpdateModems)(nil), "hiber.publisher.UpdatePublisherRequest.UpdateModems")
	proto.RegisterEnum("hiber.publisher.Publisher_ContentType", Publisher_ContentType_name, Publisher_ContentType_value)
	proto.RegisterEnum("hiber.publisher.Publisher_Type", Publisher_Type_name, Publisher_Type_value)
	proto.RegisterEnum("hiber.publisher.Publisher_Data_MQTTConfig_QoS", Publisher_Data_MQTTConfig_QoS_name, Publisher_Data_MQTTConfig_QoS_value)
}

func init() { proto.RegisterFile("publisher.proto", fileDescriptor16) }

var fileDescriptor16 = []byte{
	// 1049 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x5d, 0x6f, 0xdb, 0x36,
	0x17, 0x8e, 0xe4, 0xef, 0xe3, 0x2f, 0x85, 0x6f, 0xd1, 0x57, 0xf3, 0xc5, 0x6a, 0x18, 0x68, 0xe1,
	0x16, 0x9b, 0x0a, 0xa4, 0x18, 0xd0, 0x0d, 0x1d, 0x50, 0xc7, 0x75, 0x61, 0x6f, 0x4e, 0x9c, 0xc8,
	0x0a, 0xd2, 0xed, 0x46, 0xa0, 0x25, 0xc6, 0x26, 0x26, 0x8b, 0x8a, 0x48, 0xc7, 0xe8, 0x6f, 0x18,
	0xb0, 0x3f, 0xb1, 0x1f, 0xb9, 0xdb, 0x81, 0x14, 0xfd, 0x95, 0x66, 0x41, 0x2f, 0xe2, 0xe8, 0x9c,
	0xf3, 0x3c, 0x8f, 0xc4, 0x73, 0x1e, 0x92, 0xd0, 0x4c, 0x56, 0xb3, 0x88, 0xf2, 0x05, 0x49, 0x9d,
	0x24, 0x65, 0x82, 0xa1, 0xe6, 0x82, 0xce, 0x64, 0xb0, 0x49, 0xb7, 0x60, 0x86, 0x39, 0xc9, 0x8a,
	0xad, 0x8a, 0xc0, 0x73, 0xfd, 0x58, 0x5f, 0x93, 0xd9, 0x82, 0xb1, 0x3f, 0x74, 0xf8, 0x0d, 0x59,
	0x62, 0x1a, 0xf9, 0x31, 0x13, 0xf4, 0x86, 0x06, 0x58, 0x50, 0x16, 0x73, 0x5d, 0x7a, 0x4a, 0x63,
	0x41, 0xe6, 0xa9, 0xca, 0xf9, 0xcb, 0x5b, 0x21, 0x74, 0xfe, 0xff, 0xfb, 0x79, 0x1e, 0xe1, 0x60,
	0xab, 0xb5, 0x5f, 0xc0, 0x6b, 0xee, 0x53, 0xb6, 0xe1, 0x3c, 0x9b, 0x33, 0x36, 0x8f, 0xc8, 0x6b,
	0x15, 0xcd, 0x56, 0x37, 0xaf, 0x05, 0x5d, 0x12, 0x2e, 0xf0, 0x32, 0xc9, 0x00, 0x9d, 0xbf, 0x1a,
	0x50, 0xb9, 0xd8, 0x7c, 0x3b, 0x6a, 0x80, 0x49, 0x43, 0xdb, 0x68, 0x1b, 0xdd, 0x9c, 0x6b, 0xd2,
	0x10, 0xb5, 0xa1, 0x1a, 0x12, 0x1e, 0xa4, 0x34, 0x91, 0xda, 0xb6, 0xd9, 0x36, 0xba, 0x15, 0x77,
	0x3f, 0x85, 0xc6, 0xd0, 0x0c, 0x49, 0x92, 0x92, 0x00, 0x0b, 0x12, 0xfa, 0x21, 0x16, 0xd8, 0xce,
	0xb5, 0x8d, 0x6e, 0xf5, 0xe4, 0x99, 0x73, 0xaf, 0x31, 0xce, 0xf6, 0x35, 0xce, 0x07, 0x2c, 0xf0,
	0xa9, 0x69, 0x1b, 0x6e, 0x63, 0xc7, 0x95, 0x39, 0xf4, 0x0e, 0x4a, 0x37, 0x34, 0x12, 0x24, 0xe5,
	0x76, 0x5e, 0xa9, 0x74, 0x1e, 0x51, 0xf9, 0x98, 0x21, 0xdd, 0x0d, 0x05, 0x75, 0x20, 0x2f, 0xf0,
	0x9c, 0xdb, 0x85, 0x76, 0xae, 0x5b, 0x3d, 0x69, 0x68, 0xaa, 0x1c, 0x81, 0x87, 0xe7, 0xae, 0xaa,
	0xa1, 0xe7, 0x50, 0x5c, 0x10, 0x1c, 0x89, 0x85, 0x5d, 0x6c, 0x1b, 0xdd, 0xc6, 0x49, 0x5d, 0xa3,
	0x86, 0x2a, 0xe9, 0xea, 0x22, 0x7a, 0x03, 0x79, 0xf1, 0x39, 0x21, 0x76, 0x49, 0x81, 0x1e, 0x5b,
	0x8b, 0xf7, 0x39, 0x21, 0xae, 0x02, 0xa3, 0x77, 0x70, 0x4c, 0x63, 0x3f, 0x60, 0x2c, 0x0a, 0xd9,
	0x3a, 0xf6, 0x57, 0xb1, 0xa0, 0x91, 0x5d, 0x56, 0xeb, 0xb0, 0xb4, 0x82, 0xb7, 0x69, 0xbf, 0xdb,
	0xa4, 0x71, 0x5f, 0x23, 0xaf, 0x24, 0x10, 0xb5, 0xa0, 0x1c, 0x52, 0x8e, 0x67, 0x11, 0x09, 0xed,
	0x4a, 0xdb, 0xe8, 0x96, 0xdd, 0x6d, 0x8c, 0xde, 0x42, 0x7e, 0x21, 0x44, 0x62, 0xc3, 0x41, 0x53,
	0x36, 0x8e, 0xba, 0x3e, 0xfc, 0x2f, 0x3b, 0x39, 0x3c, 0x72, 0x15, 0x03, 0xbd, 0x87, 0xbc, 0xb4,
	0x90, 0x5d, 0x55, 0xcc, 0x57, 0x9a, 0xb9, 0x67, 0x18, 0x47, 0x39, 0xec, 0xec, 0xd2, 0xf3, 0x0e,
	0xe7, 0x23, 0x15, 0x64, 0x09, 0x0d, 0xa1, 0xa4, 0x3d, 0x65, 0xd7, 0x94, 0xc8, 0xf7, 0x0f, 0x88,
	0xe0, 0x35, 0x97, 0xa6, 0xeb, 0x5d, 0x4f, 0x47, 0xcc, 0xeb, 0xb3, 0xf8, 0x86, 0xce, 0x57, 0x59,
	0x69, 0x78, 0xe4, 0x16, 0xf1, 0x9a, 0x8f, 0x98, 0x40, 0x3d, 0x28, 0x28, 0xd7, 0xdb, 0x75, 0xa5,
	0xf3, 0x52, 0xeb, 0xa8, 0x9c, 0x33, 0x90, 0xbf, 0xe7, 0x7b, 0xdb, 0xe1, 0x22, 0x25, 0x37, 0x24,
	0x25, 0x71, 0x40, 0xf8, 0xf0, 0xc8, 0xcd, 0x98, 0xe8, 0x03, 0x14, 0x94, 0xf3, 0xed, 0x86, 0x92,
	0xf8, 0xee, 0x81, 0x4f, 0xc9, 0x76, 0xc6, 0x54, 0xfe, 0x7e, 0xb1, 0xa2, 0x8c, 0xdc, 0xfa, 0xa7,
	0x00, 0x79, 0xe5, 0x37, 0x0b, 0x72, 0xab, 0x34, 0x52, 0x86, 0xaf, 0xb8, 0xf2, 0x11, 0x8d, 0xa0,
	0x16, 0xb0, 0x58, 0x90, 0x58, 0xf8, 0xca, 0x00, 0xa6, 0x32, 0xc0, 0x8b, 0x47, 0x0c, 0xd0, 0xcf,
	0xe0, 0xca, 0x07, 0xd5, 0x60, 0x17, 0x1c, 0x0c, 0x34, 0x77, 0x6f, 0xa0, 0xcf, 0xa1, 0x11, 0x90,
	0x54, 0x2f, 0x96, 0xf8, 0x34, 0x54, 0x7e, 0xcf, 0xb9, 0xf5, 0xbd, 0xec, 0x28, 0x44, 0x2f, 0xc1,
	0xda, 0x87, 0xc5, 0x78, 0x49, 0xec, 0x82, 0xfa, 0xd8, 0xe6, 0x5e, 0xfe, 0x1c, 0x2f, 0x09, 0x7a,
	0x05, 0xc7, 0x01, 0xf6, 0xef, 0x89, 0x16, 0x95, 0x68, 0x33, 0xc0, 0xfd, 0x03, 0x59, 0x07, 0xfe,
	0x77, 0x0f, 0xab, 0x94, 0x4b, 0x4a, 0xf9, 0xf8, 0x00, 0xad, 0xb4, 0xdf, 0x6b, 0xfb, 0x95, 0x0f,
	0x4c, 0xf4, 0x5f, 0x3b, 0xdb, 0x19, 0x7a, 0xde, 0x45, 0xe6, 0x81, 0x2f, 0x6c, 0x58, 0xf9, 0x3a,
	0x05, 0x69, 0xc7, 0x9d, 0x82, 0x64, 0xb6, 0xfe, 0x34, 0x01, 0x76, 0x69, 0xf4, 0x04, 0x0a, 0x82,
	0x25, 0x34, 0xd0, 0xb3, 0xcb, 0x02, 0xf4, 0x1e, 0x72, 0xb7, 0x8c, 0xeb, 0xa1, 0x39, 0x5f, 0xff,
	0x16, 0xe7, 0x92, 0x4d, 0x5d, 0x49, 0x95, 0x43, 0x5b, 0x71, 0x92, 0xaa, 0x7e, 0xe4, 0x94, 0xf4,
	0x36, 0x96, 0xb5, 0x04, 0x73, 0xbe, 0x66, 0x69, 0x36, 0xae, 0x8a, 0xbb, 0x8d, 0xd1, 0xb7, 0x00,
	0x34, 0x24, 0xb1, 0x6c, 0x1b, 0x49, 0xf5, 0x8c, 0xf6, 0x32, 0x9d, 0x11, 0xe4, 0x2e, 0xd9, 0x14,
	0x55, 0xa1, 0xf4, 0x61, 0xf0, 0xb1, 0x77, 0x35, 0xf6, 0xac, 0x23, 0x64, 0x41, 0xad, 0xe7, 0xf9,
	0x67, 0x93, 0xa9, 0xe7, 0x4f, 0xce, 0xfb, 0x03, 0xcb, 0x40, 0xc7, 0x50, 0xef, 0x79, 0xfe, 0x78,
	0xd0, 0xdb, 0xa4, 0x4c, 0x09, 0x1a, 0x7c, 0xea, 0xf5, 0xbd, 0xf1, 0x6f, 0x59, 0x26, 0xf7, 0x93,
	0x69, 0x1b, 0xad, 0x2e, 0xc0, 0xae, 0xcb, 0xe8, 0x29, 0x14, 0x39, 0x09, 0x52, 0x22, 0x74, 0x37,
	0x74, 0x24, 0x91, 0xf2, 0xef, 0xb4, 0x0c, 0xc5, 0x40, 0x21, 0x5b, 0x7f, 0x1b, 0x50, 0xd2, 0xe7,
	0x26, 0xfa, 0x01, 0xaa, 0xe4, 0x6e, 0x63, 0x74, 0xae, 0xa8, 0xd5, 0x93, 0x27, 0xba, 0x69, 0x19,
	0xc8, 0x19, 0x48, 0x00, 0x77, 0x41, 0x01, 0xa5, 0xab, 0x39, 0xfa, 0x11, 0xea, 0x4b, 0x16, 0x92,
	0xa5, 0x1f, 0xaf, 0x96, 0x33, 0x79, 0x52, 0x9b, 0x0f, 0x11, 0xcf, 0x24, 0x84, 0xbb, 0x35, 0x05,
	0x3d, 0xcf, 0x90, 0xe8, 0x85, 0x3e, 0xa0, 0xb3, 0x1b, 0x02, 0x1d, 0x32, 0x3c, 0x3c, 0xe7, 0xd9,
	0x21, 0xdd, 0x79, 0x03, 0xd5, 0xbd, 0x5d, 0x75, 0xd8, 0xb4, 0x32, 0xe4, 0x7f, 0x99, 0x4e, 0xce,
	0x2d, 0x03, 0x55, 0xa0, 0x70, 0xe1, 0x4e, 0xbc, 0x89, 0x65, 0xb6, 0x4c, 0xdb, 0xe8, 0xfc, 0x0c,
	0x79, 0x85, 0x2e, 0x43, 0x5e, 0xb6, 0x26, 0x83, 0xca, 0x11, 0x5b, 0x86, 0x54, 0xe8, 0x5d, 0x4f,
	0xfd, 0xd1, 0xc4, 0xb3, 0x4c, 0xc9, 0x1b, 0x9c, 0xf5, 0x46, 0x63, 0x2b, 0x27, 0x1f, 0xa7, 0xe3,
	0x5e, 0xff, 0x57, 0x2b, 0x7f, 0x5a, 0x84, 0xbc, 0xbc, 0xbd, 0x3a, 0x77, 0xf0, 0xf4, 0x2a, 0x09,
	0xb1, 0x20, 0x5b, 0xb3, 0xb8, 0xe4, 0x76, 0x45, 0xb8, 0x68, 0x7d, 0x82, 0x5a, 0x56, 0xc9, 0xd6,
	0x86, 0x6c, 0x28, 0xad, 0x54, 0x9c, 0xdd, 0x98, 0x65, 0x77, 0x13, 0xa2, 0x57, 0x50, 0xb8, 0xc3,
	0xd1, 0x8a, 0x3c, 0xda, 0x9a, 0x0c, 0xb2, 0x9d, 0xd1, 0x5b, 0x78, 0x36, 0x8f, 0xd8, 0x0c, 0x47,
	0x1a, 0x8c, 0x13, 0xea, 0xcc, 0xd3, 0x24, 0xd8, 0xd9, 0xf7, 0xb4, 0xb6, 0xfd, 0xa4, 0x5e, 0x42,
	0x2f, 0x8e, 0x7e, 0x2f, 0x28, 0xe4, 0xac, 0xa8, 0x6e, 0xf2, 0x37, 0xff, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x7e, 0xda, 0x2b, 0xc0, 0x9b, 0x08, 0x00, 0x00,
}
