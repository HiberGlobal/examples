// Code generated by protoc-gen-go.
// source: publisher.proto
// DO NOT EDIT!

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Publisher_ContentType int32

const (
	Publisher_DEFAULT Publisher_ContentType = 0
	Publisher_JSON    Publisher_ContentType = 1
	Publisher_PROTO   Publisher_ContentType = 2
)

var Publisher_ContentType_name = map[int32]string{
	0: "DEFAULT",
	1: "JSON",
	2: "PROTO",
}
var Publisher_ContentType_value = map[string]int32{
	"DEFAULT": 0,
	"JSON":    1,
	"PROTO":   2,
}

func (x Publisher_ContentType) String() string {
	return proto.EnumName(Publisher_ContentType_name, int32(x))
}
func (Publisher_ContentType) EnumDescriptor() ([]byte, []int) { return fileDescriptor12, []int{0, 0} }

type Publisher_Type int32

const (
	Publisher_HTTP Publisher_Type = 0
	Publisher_MQTT Publisher_Type = 1
)

var Publisher_Type_name = map[int32]string{
	0: "HTTP",
	1: "MQTT",
}
var Publisher_Type_value = map[string]int32{
	"HTTP": 0,
	"MQTT": 1,
}

func (x Publisher_Type) String() string {
	return proto.EnumName(Publisher_Type_name, int32(x))
}
func (Publisher_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor12, []int{0, 1} }

type Publisher_Data_MQTTConfig_QoS int32

const (
	Publisher_Data_MQTTConfig_DEFAULT Publisher_Data_MQTTConfig_QoS = 0
	// Qos level 0
	Publisher_Data_MQTTConfig_AT_MOST_ONCE Publisher_Data_MQTTConfig_QoS = 1
	// Qos level 1
	Publisher_Data_MQTTConfig_AT_LEAST_ONCE Publisher_Data_MQTTConfig_QoS = 2
	// Qos level 2
	Publisher_Data_MQTTConfig_EXACTLY_ONCE Publisher_Data_MQTTConfig_QoS = 3
)

var Publisher_Data_MQTTConfig_QoS_name = map[int32]string{
	0: "DEFAULT",
	1: "AT_MOST_ONCE",
	2: "AT_LEAST_ONCE",
	3: "EXACTLY_ONCE",
}
var Publisher_Data_MQTTConfig_QoS_value = map[string]int32{
	"DEFAULT":       0,
	"AT_MOST_ONCE":  1,
	"AT_LEAST_ONCE": 2,
	"EXACTLY_ONCE":  3,
}

func (x Publisher_Data_MQTTConfig_QoS) String() string {
	return proto.EnumName(Publisher_Data_MQTTConfig_QoS_name, int32(x))
}
func (Publisher_Data_MQTTConfig_QoS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor12, []int{0, 0, 0, 0}
}

type Publisher struct {
	Id          int64              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Description string             `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Data        *Publisher_Data    `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Filters     *Publisher_Filters `protobuf:"bytes,4,opt,name=filters" json:"filters,omitempty"`
	Tags        []*Tag             `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	Health      Health             `protobuf:"varint,6,opt,name=health,enum=hiber.Health" json:"health,omitempty"`
	Type        Publisher_Type     `protobuf:"varint,7,opt,name=type,enum=hiber.publisher.Publisher_Type" json:"type,omitempty"`
}

func (m *Publisher) Reset()                    { *m = Publisher{} }
func (m *Publisher) String() string            { return proto.CompactTextString(m) }
func (*Publisher) ProtoMessage()               {}
func (*Publisher) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *Publisher) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Publisher) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Publisher) GetData() *Publisher_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Publisher) GetFilters() *Publisher_Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Publisher) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Publisher) GetHealth() Health {
	if m != nil {
		return m.Health
	}
	return Health_OK
}

func (m *Publisher) GetType() Publisher_Type {
	if m != nil {
		return m.Type
	}
	return Publisher_HTTP
}

type Publisher_Data struct {
	Url               string                `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	ContentType       Publisher_ContentType `protobuf:"varint,2,opt,name=content_type,json=contentType,enum=hiber.publisher.Publisher_ContentType" json:"content_type,omitempty"`
	Disabled          bool                  `protobuf:"varint,3,opt,name=disabled" json:"disabled,omitempty"`
	CertificateId     int64                 `protobuf:"varint,4,opt,name=certificate_id,json=certificateId" json:"certificate_id,omitempty"`
	CertificateName   string                `protobuf:"bytes,5,opt,name=certificate_name,json=certificateName" json:"certificate_name,omitempty"`
	CaCertificateId   int64                 `protobuf:"varint,6,opt,name=ca_certificate_id,json=caCertificateId" json:"ca_certificate_id,omitempty"`
	CaCertificateName string                `protobuf:"bytes,7,opt,name=ca_certificate_name,json=caCertificateName" json:"ca_certificate_name,omitempty"`
	// Types that are valid to be assigned to Config:
	//	*Publisher_Data_Http
	//	*Publisher_Data_Mqtt
	Config isPublisher_Data_Config `protobuf_oneof:"config"`
}

func (m *Publisher_Data) Reset()                    { *m = Publisher_Data{} }
func (m *Publisher_Data) String() string            { return proto.CompactTextString(m) }
func (*Publisher_Data) ProtoMessage()               {}
func (*Publisher_Data) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0, 0} }

type isPublisher_Data_Config interface {
	isPublisher_Data_Config()
}

type Publisher_Data_Http struct {
	Http *Publisher_Data_HTTPConfig `protobuf:"bytes,8,opt,name=http,oneof"`
}
type Publisher_Data_Mqtt struct {
	Mqtt *Publisher_Data_MQTTConfig `protobuf:"bytes,9,opt,name=mqtt,oneof"`
}

func (*Publisher_Data_Http) isPublisher_Data_Config() {}
func (*Publisher_Data_Mqtt) isPublisher_Data_Config() {}

func (m *Publisher_Data) GetConfig() isPublisher_Data_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Publisher_Data) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Publisher_Data) GetContentType() Publisher_ContentType {
	if m != nil {
		return m.ContentType
	}
	return Publisher_DEFAULT
}

func (m *Publisher_Data) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *Publisher_Data) GetCertificateId() int64 {
	if m != nil {
		return m.CertificateId
	}
	return 0
}

func (m *Publisher_Data) GetCertificateName() string {
	if m != nil {
		return m.CertificateName
	}
	return ""
}

func (m *Publisher_Data) GetCaCertificateId() int64 {
	if m != nil {
		return m.CaCertificateId
	}
	return 0
}

func (m *Publisher_Data) GetCaCertificateName() string {
	if m != nil {
		return m.CaCertificateName
	}
	return ""
}

func (m *Publisher_Data) GetHttp() *Publisher_Data_HTTPConfig {
	if x, ok := m.GetConfig().(*Publisher_Data_Http); ok {
		return x.Http
	}
	return nil
}

func (m *Publisher_Data) GetMqtt() *Publisher_Data_MQTTConfig {
	if x, ok := m.GetConfig().(*Publisher_Data_Mqtt); ok {
		return x.Mqtt
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Publisher_Data) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Publisher_Data_OneofMarshaler, _Publisher_Data_OneofUnmarshaler, _Publisher_Data_OneofSizer, []interface{}{
		(*Publisher_Data_Http)(nil),
		(*Publisher_Data_Mqtt)(nil),
	}
}

func _Publisher_Data_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Publisher_Data)
	// config
	switch x := m.Config.(type) {
	case *Publisher_Data_Http:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case *Publisher_Data_Mqtt:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mqtt); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Publisher_Data.Config has unexpected type %T", x)
	}
	return nil
}

func _Publisher_Data_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Publisher_Data)
	switch tag {
	case 8: // config.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Publisher_Data_HTTPConfig)
		err := b.DecodeMessage(msg)
		m.Config = &Publisher_Data_Http{msg}
		return true, err
	case 9: // config.mqtt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Publisher_Data_MQTTConfig)
		err := b.DecodeMessage(msg)
		m.Config = &Publisher_Data_Mqtt{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Publisher_Data_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Publisher_Data)
	// config
	switch x := m.Config.(type) {
	case *Publisher_Data_Http:
		s := proto.Size(x.Http)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Publisher_Data_Mqtt:
		s := proto.Size(x.Mqtt)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Configuration for forwarding events to a MQTT topic.
type Publisher_Data_MQTTConfig struct {
	Topic string                        `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Qos   Publisher_Data_MQTTConfig_QoS `protobuf:"varint,2,opt,name=qos,enum=hiber.publisher.Publisher_Data_MQTTConfig_QoS" json:"qos,omitempty"`
	// Optional username to authenticate with.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	// Optional password to authenticate with. Requires username to be set.
	Password string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
	// Identifier used by the MQTT client. Defaults to "hiber".
	Identifier string `protobuf:"bytes,5,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *Publisher_Data_MQTTConfig) Reset()         { *m = Publisher_Data_MQTTConfig{} }
func (m *Publisher_Data_MQTTConfig) String() string { return proto.CompactTextString(m) }
func (*Publisher_Data_MQTTConfig) ProtoMessage()    {}
func (*Publisher_Data_MQTTConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{0, 0, 0}
}

func (m *Publisher_Data_MQTTConfig) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Publisher_Data_MQTTConfig) GetQos() Publisher_Data_MQTTConfig_QoS {
	if m != nil {
		return m.Qos
	}
	return Publisher_Data_MQTTConfig_DEFAULT
}

func (m *Publisher_Data_MQTTConfig) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Publisher_Data_MQTTConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Publisher_Data_MQTTConfig) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

type Publisher_Data_HTTPConfig struct {
	// Used to generate the HMAC-SHA256 header on every publisher call, which you can use to verify the message.
	Secret string `protobuf:"bytes,1,opt,name=secret" json:"secret,omitempty"`
}

func (m *Publisher_Data_HTTPConfig) Reset()         { *m = Publisher_Data_HTTPConfig{} }
func (m *Publisher_Data_HTTPConfig) String() string { return proto.CompactTextString(m) }
func (*Publisher_Data_HTTPConfig) ProtoMessage()    {}
func (*Publisher_Data_HTTPConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{0, 0, 1}
}

func (m *Publisher_Data_HTTPConfig) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type Publisher_Filters struct {
	EventTypes   *Filter_Events `protobuf:"bytes,1,opt,name=event_types,json=eventTypes" json:"event_types,omitempty"`
	ModemNumbers *Filter_Modems `protobuf:"bytes,2,opt,name=modem_numbers,json=modemNumbers" json:"modem_numbers,omitempty"`
	Tags         *Filter_Tags   `protobuf:"bytes,3,opt,name=tags" json:"tags,omitempty"`
}

func (m *Publisher_Filters) Reset()                    { *m = Publisher_Filters{} }
func (m *Publisher_Filters) String() string            { return proto.CompactTextString(m) }
func (*Publisher_Filters) ProtoMessage()               {}
func (*Publisher_Filters) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0, 1} }

func (m *Publisher_Filters) GetEventTypes() *Filter_Events {
	if m != nil {
		return m.EventTypes
	}
	return nil
}

func (m *Publisher_Filters) GetModemNumbers() *Filter_Modems {
	if m != nil {
		return m.ModemNumbers
	}
	return nil
}

func (m *Publisher_Filters) GetTags() *Filter_Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

type PublisherSelection struct {
	Publishers *Filter_Publishers `protobuf:"bytes,1,opt,name=publishers" json:"publishers,omitempty"`
	// Partial text match on the description
	Description     string                  `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	SearchUrl       string                  `protobuf:"bytes,3,opt,name=search_url,json=searchUrl" json:"search_url,omitempty"`
	ContentTypes    []Publisher_ContentType `protobuf:"varint,4,rep,packed,name=content_types,json=contentTypes,enum=hiber.publisher.Publisher_ContentType" json:"content_types,omitempty"`
	CertificateIds  []int64                 `protobuf:"varint,5,rep,packed,name=certificate_ids,json=certificateIds" json:"certificate_ids,omitempty"`
	SearchMqttTopic string                  `protobuf:"bytes,6,opt,name=search_mqtt_topic,json=searchMqttTopic" json:"search_mqtt_topic,omitempty"`
	Tags            *TagSelection           `protobuf:"bytes,7,opt,name=tags" json:"tags,omitempty"`
	Health          []Health                `protobuf:"varint,8,rep,packed,name=health,enum=hiber.Health" json:"health,omitempty"`
	Types           []Publisher_Type        `protobuf:"varint,9,rep,packed,name=types,enum=hiber.publisher.Publisher_Type" json:"types,omitempty"`
}

func (m *PublisherSelection) Reset()                    { *m = PublisherSelection{} }
func (m *PublisherSelection) String() string            { return proto.CompactTextString(m) }
func (*PublisherSelection) ProtoMessage()               {}
func (*PublisherSelection) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *PublisherSelection) GetPublishers() *Filter_Publishers {
	if m != nil {
		return m.Publishers
	}
	return nil
}

func (m *PublisherSelection) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PublisherSelection) GetSearchUrl() string {
	if m != nil {
		return m.SearchUrl
	}
	return ""
}

func (m *PublisherSelection) GetContentTypes() []Publisher_ContentType {
	if m != nil {
		return m.ContentTypes
	}
	return nil
}

func (m *PublisherSelection) GetCertificateIds() []int64 {
	if m != nil {
		return m.CertificateIds
	}
	return nil
}

func (m *PublisherSelection) GetSearchMqttTopic() string {
	if m != nil {
		return m.SearchMqttTopic
	}
	return ""
}

func (m *PublisherSelection) GetTags() *TagSelection {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *PublisherSelection) GetHealth() []Health {
	if m != nil {
		return m.Health
	}
	return nil
}

func (m *PublisherSelection) GetTypes() []Publisher_Type {
	if m != nil {
		return m.Types
	}
	return nil
}

type PublisherCall struct {
	Time          *Timestamp      `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	PublisherData *Publisher_Data `protobuf:"bytes,2,opt,name=publisher_data,json=publisherData" json:"publisher_data,omitempty"`
	Body          []byte          `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Successful    bool            `protobuf:"varint,4,opt,name=successful" json:"successful,omitempty"`
	Error         string          `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
}

func (m *PublisherCall) Reset()                    { *m = PublisherCall{} }
func (m *PublisherCall) String() string            { return proto.CompactTextString(m) }
func (*PublisherCall) ProtoMessage()               {}
func (*PublisherCall) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

func (m *PublisherCall) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *PublisherCall) GetPublisherData() *Publisher_Data {
	if m != nil {
		return m.PublisherData
	}
	return nil
}

func (m *PublisherCall) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *PublisherCall) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *PublisherCall) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type PublisherHistorySelection struct {
	OnlyFailures bool       `protobuf:"varint,2,opt,name=only_failures,json=onlyFailures" json:"only_failures,omitempty"`
	TimeRange    *TimeRange `protobuf:"bytes,3,opt,name=time_range,json=timeRange" json:"time_range,omitempty"`
}

func (m *PublisherHistorySelection) Reset()                    { *m = PublisherHistorySelection{} }
func (m *PublisherHistorySelection) String() string            { return proto.CompactTextString(m) }
func (*PublisherHistorySelection) ProtoMessage()               {}
func (*PublisherHistorySelection) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

func (m *PublisherHistorySelection) GetOnlyFailures() bool {
	if m != nil {
		return m.OnlyFailures
	}
	return false
}

func (m *PublisherHistorySelection) GetTimeRange() *TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

type ListPublishersRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string              `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *PublisherSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination         `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListPublishersRequest) Reset()                    { *m = ListPublishersRequest{} }
func (m *ListPublishersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPublishersRequest) ProtoMessage()               {}
func (*ListPublishersRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{4} }

func (m *ListPublishersRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ListPublishersRequest) GetSelection() *PublisherSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListPublishersRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListPublishersRequest_Response struct {
	Publishers []*Publisher           `protobuf:"bytes,1,rep,name=publishers" json:"publishers,omitempty"`
	Request    *ListPublishersRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result     `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListPublishersRequest_Response) Reset()         { *m = ListPublishersRequest_Response{} }
func (m *ListPublishersRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListPublishersRequest_Response) ProtoMessage()    {}
func (*ListPublishersRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{4, 0}
}

func (m *ListPublishersRequest_Response) GetPublishers() []*Publisher {
	if m != nil {
		return m.Publishers
	}
	return nil
}

func (m *ListPublishersRequest_Response) GetRequest() *ListPublishersRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListPublishersRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type PublisherHistoryRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                     `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	PublisherId  int64                      `protobuf:"varint,2,opt,name=publisher_id,json=publisherId" json:"publisher_id,omitempty"`
	Selection    *PublisherHistorySelection `protobuf:"bytes,3,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination                `protobuf:"bytes,4,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *PublisherHistoryRequest) Reset()                    { *m = PublisherHistoryRequest{} }
func (m *PublisherHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*PublisherHistoryRequest) ProtoMessage()               {}
func (*PublisherHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{5} }

func (m *PublisherHistoryRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *PublisherHistoryRequest) GetPublisherId() int64 {
	if m != nil {
		return m.PublisherId
	}
	return 0
}

func (m *PublisherHistoryRequest) GetSelection() *PublisherHistorySelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *PublisherHistoryRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type PublisherHistoryRequest_Response struct {
	Calls      []*PublisherCall         `protobuf:"bytes,1,rep,name=calls" json:"calls,omitempty"`
	Request    *PublisherHistoryRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result       `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *PublisherHistoryRequest_Response) Reset()         { *m = PublisherHistoryRequest_Response{} }
func (m *PublisherHistoryRequest_Response) String() string { return proto.CompactTextString(m) }
func (*PublisherHistoryRequest_Response) ProtoMessage()    {}
func (*PublisherHistoryRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{5, 0}
}

func (m *PublisherHistoryRequest_Response) GetCalls() []*PublisherCall {
	if m != nil {
		return m.Calls
	}
	return nil
}

func (m *PublisherHistoryRequest_Response) GetRequest() *PublisherHistoryRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *PublisherHistoryRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type CreatePublisherRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Description  string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// Full url, i.e.
	// - https://example.com:5555/webhooks/1234 for a http publisher
	// - [mqtt[s]://]example.com:8883 for a mqtt publisher
	Url         string                `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	ContentType Publisher_ContentType `protobuf:"varint,4,opt,name=content_type,json=contentType,enum=hiber.publisher.Publisher_ContentType" json:"content_type,omitempty"`
	// Optionally, a client certificate can be used for the publisher call.
	// See the CertificateService for certificate management options.
	CertificateId int64              `protobuf:"varint,5,opt,name=certificate_id,json=certificateId" json:"certificate_id,omitempty"`
	Filters       *Publisher_Filters `protobuf:"bytes,6,opt,name=filters" json:"filters,omitempty"`
	Tags          []int64            `protobuf:"varint,7,rep,packed,name=tags" json:"tags,omitempty"`
	Type          Publisher_Type     `protobuf:"varint,8,opt,name=type,enum=hiber.publisher.Publisher_Type" json:"type,omitempty"`
	// The publisher should be configured as one of the available options, matching the type
	//
	// Types that are valid to be assigned to Config:
	//	*CreatePublisherRequest_Http
	//	*CreatePublisherRequest_Mqtt
	Config isCreatePublisherRequest_Config `protobuf_oneof:"config"`
}

func (m *CreatePublisherRequest) Reset()                    { *m = CreatePublisherRequest{} }
func (m *CreatePublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePublisherRequest) ProtoMessage()               {}
func (*CreatePublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{6} }

type isCreatePublisherRequest_Config interface {
	isCreatePublisherRequest_Config()
}

type CreatePublisherRequest_Http struct {
	Http *Publisher_Data_HTTPConfig `protobuf:"bytes,9,opt,name=http,oneof"`
}
type CreatePublisherRequest_Mqtt struct {
	Mqtt *Publisher_Data_MQTTConfig `protobuf:"bytes,10,opt,name=mqtt,oneof"`
}

func (*CreatePublisherRequest_Http) isCreatePublisherRequest_Config() {}
func (*CreatePublisherRequest_Mqtt) isCreatePublisherRequest_Config() {}

func (m *CreatePublisherRequest) GetConfig() isCreatePublisherRequest_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *CreatePublisherRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *CreatePublisherRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreatePublisherRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CreatePublisherRequest) GetContentType() Publisher_ContentType {
	if m != nil {
		return m.ContentType
	}
	return Publisher_DEFAULT
}

func (m *CreatePublisherRequest) GetCertificateId() int64 {
	if m != nil {
		return m.CertificateId
	}
	return 0
}

func (m *CreatePublisherRequest) GetFilters() *Publisher_Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *CreatePublisherRequest) GetTags() []int64 {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CreatePublisherRequest) GetType() Publisher_Type {
	if m != nil {
		return m.Type
	}
	return Publisher_HTTP
}

func (m *CreatePublisherRequest) GetHttp() *Publisher_Data_HTTPConfig {
	if x, ok := m.GetConfig().(*CreatePublisherRequest_Http); ok {
		return x.Http
	}
	return nil
}

func (m *CreatePublisherRequest) GetMqtt() *Publisher_Data_MQTTConfig {
	if x, ok := m.GetConfig().(*CreatePublisherRequest_Mqtt); ok {
		return x.Mqtt
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreatePublisherRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreatePublisherRequest_OneofMarshaler, _CreatePublisherRequest_OneofUnmarshaler, _CreatePublisherRequest_OneofSizer, []interface{}{
		(*CreatePublisherRequest_Http)(nil),
		(*CreatePublisherRequest_Mqtt)(nil),
	}
}

func _CreatePublisherRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreatePublisherRequest)
	// config
	switch x := m.Config.(type) {
	case *CreatePublisherRequest_Http:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case *CreatePublisherRequest_Mqtt:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mqtt); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreatePublisherRequest.Config has unexpected type %T", x)
	}
	return nil
}

func _CreatePublisherRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreatePublisherRequest)
	switch tag {
	case 9: // config.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Publisher_Data_HTTPConfig)
		err := b.DecodeMessage(msg)
		m.Config = &CreatePublisherRequest_Http{msg}
		return true, err
	case 10: // config.mqtt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Publisher_Data_MQTTConfig)
		err := b.DecodeMessage(msg)
		m.Config = &CreatePublisherRequest_Mqtt{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreatePublisherRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreatePublisherRequest)
	// config
	switch x := m.Config.(type) {
	case *CreatePublisherRequest_Http:
		s := proto.Size(x.Http)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreatePublisherRequest_Mqtt:
		s := proto.Size(x.Mqtt)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CreatePublisherRequest_Response struct {
	Created *Publisher              `protobuf:"bytes,1,opt,name=created" json:"created,omitempty"`
	Request *CreatePublisherRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *CreatePublisherRequest_Response) Reset()         { *m = CreatePublisherRequest_Response{} }
func (m *CreatePublisherRequest_Response) String() string { return proto.CompactTextString(m) }
func (*CreatePublisherRequest_Response) ProtoMessage()    {}
func (*CreatePublisherRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{6, 0}
}

func (m *CreatePublisherRequest_Response) GetCreated() *Publisher {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *CreatePublisherRequest_Response) GetRequest() *CreatePublisherRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type EnablePublisherRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string              `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *PublisherSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
}

func (m *EnablePublisherRequest) Reset()                    { *m = EnablePublisherRequest{} }
func (m *EnablePublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*EnablePublisherRequest) ProtoMessage()               {}
func (*EnablePublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{7} }

func (m *EnablePublisherRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *EnablePublisherRequest) GetSelection() *PublisherSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

type EnablePublisherRequest_Response struct {
	Publishers []*Publisher            `protobuf:"bytes,1,rep,name=publishers" json:"publishers,omitempty"`
	Request    *EnablePublisherRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result      `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *EnablePublisherRequest_Response) Reset()         { *m = EnablePublisherRequest_Response{} }
func (m *EnablePublisherRequest_Response) String() string { return proto.CompactTextString(m) }
func (*EnablePublisherRequest_Response) ProtoMessage()    {}
func (*EnablePublisherRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{7, 0}
}

func (m *EnablePublisherRequest_Response) GetPublishers() []*Publisher {
	if m != nil {
		return m.Publishers
	}
	return nil
}

func (m *EnablePublisherRequest_Response) GetRequest() *EnablePublisherRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *EnablePublisherRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type DisablePublisherRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string              `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *PublisherSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
}

func (m *DisablePublisherRequest) Reset()                    { *m = DisablePublisherRequest{} }
func (m *DisablePublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*DisablePublisherRequest) ProtoMessage()               {}
func (*DisablePublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{8} }

func (m *DisablePublisherRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *DisablePublisherRequest) GetSelection() *PublisherSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

type DisablePublisherRequest_Response struct {
	Publishers []*Publisher             `protobuf:"bytes,1,rep,name=publishers" json:"publishers,omitempty"`
	Request    *DisablePublisherRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result       `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *DisablePublisherRequest_Response) Reset()         { *m = DisablePublisherRequest_Response{} }
func (m *DisablePublisherRequest_Response) String() string { return proto.CompactTextString(m) }
func (*DisablePublisherRequest_Response) ProtoMessage()    {}
func (*DisablePublisherRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{8, 0}
}

func (m *DisablePublisherRequest_Response) GetPublishers() []*Publisher {
	if m != nil {
		return m.Publishers
	}
	return nil
}

func (m *DisablePublisherRequest_Response) GetRequest() *DisablePublisherRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *DisablePublisherRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type UpdatePublisherRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                 `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *PublisherSelection    `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Description  *UpdateClearableString `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Url          string                 `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	ContentType  Publisher_ContentType  `protobuf:"varint,5,opt,name=content_type,json=contentType,enum=hiber.publisher.Publisher_ContentType" json:"content_type,omitempty"`
	// A value of 0 removes the certificate
	CertificateId *UpdateOptionalId                    `protobuf:"bytes,6,opt,name=certificate_id,json=certificateId" json:"certificate_id,omitempty"`
	EventFilter   *UpdatePublisherRequest_UpdateEvents `protobuf:"bytes,7,opt,name=event_filter,json=eventFilter" json:"event_filter,omitempty"`
	ModemFilter   *UpdatePublisherRequest_UpdateModems `protobuf:"bytes,8,opt,name=modem_filter,json=modemFilter" json:"modem_filter,omitempty"`
	TagFilter     *UpdatePublisherRequest_UpdateTags   `protobuf:"bytes,9,opt,name=tag_filter,json=tagFilter" json:"tag_filter,omitempty"`
	Active        *UpdateBoolean                       `protobuf:"bytes,10,opt,name=active" json:"active,omitempty"`
	// Types that are valid to be assigned to Config:
	//	*UpdatePublisherRequest_Http
	//	*UpdatePublisherRequest_Mqtt
	Config isUpdatePublisherRequest_Config `protobuf_oneof:"config"`
}

func (m *UpdatePublisherRequest) Reset()                    { *m = UpdatePublisherRequest{} }
func (m *UpdatePublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePublisherRequest) ProtoMessage()               {}
func (*UpdatePublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{9} }

type isUpdatePublisherRequest_Config interface {
	isUpdatePublisherRequest_Config()
}

type UpdatePublisherRequest_Http struct {
	Http *Publisher_Data_HTTPConfig `protobuf:"bytes,11,opt,name=http,oneof"`
}
type UpdatePublisherRequest_Mqtt struct {
	Mqtt *Publisher_Data_MQTTConfig `protobuf:"bytes,12,opt,name=mqtt,oneof"`
}

func (*UpdatePublisherRequest_Http) isUpdatePublisherRequest_Config() {}
func (*UpdatePublisherRequest_Mqtt) isUpdatePublisherRequest_Config() {}

func (m *UpdatePublisherRequest) GetConfig() isUpdatePublisherRequest_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *UpdatePublisherRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UpdatePublisherRequest) GetSelection() *PublisherSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *UpdatePublisherRequest) GetDescription() *UpdateClearableString {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *UpdatePublisherRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *UpdatePublisherRequest) GetContentType() Publisher_ContentType {
	if m != nil {
		return m.ContentType
	}
	return Publisher_DEFAULT
}

func (m *UpdatePublisherRequest) GetCertificateId() *UpdateOptionalId {
	if m != nil {
		return m.CertificateId
	}
	return nil
}

func (m *UpdatePublisherRequest) GetEventFilter() *UpdatePublisherRequest_UpdateEvents {
	if m != nil {
		return m.EventFilter
	}
	return nil
}

func (m *UpdatePublisherRequest) GetModemFilter() *UpdatePublisherRequest_UpdateModems {
	if m != nil {
		return m.ModemFilter
	}
	return nil
}

func (m *UpdatePublisherRequest) GetTagFilter() *UpdatePublisherRequest_UpdateTags {
	if m != nil {
		return m.TagFilter
	}
	return nil
}

func (m *UpdatePublisherRequest) GetActive() *UpdateBoolean {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *UpdatePublisherRequest) GetHttp() *Publisher_Data_HTTPConfig {
	if x, ok := m.GetConfig().(*UpdatePublisherRequest_Http); ok {
		return x.Http
	}
	return nil
}

func (m *UpdatePublisherRequest) GetMqtt() *Publisher_Data_MQTTConfig {
	if x, ok := m.GetConfig().(*UpdatePublisherRequest_Mqtt); ok {
		return x.Mqtt
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UpdatePublisherRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UpdatePublisherRequest_OneofMarshaler, _UpdatePublisherRequest_OneofUnmarshaler, _UpdatePublisherRequest_OneofSizer, []interface{}{
		(*UpdatePublisherRequest_Http)(nil),
		(*UpdatePublisherRequest_Mqtt)(nil),
	}
}

func _UpdatePublisherRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UpdatePublisherRequest)
	// config
	switch x := m.Config.(type) {
	case *UpdatePublisherRequest_Http:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case *UpdatePublisherRequest_Mqtt:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mqtt); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UpdatePublisherRequest.Config has unexpected type %T", x)
	}
	return nil
}

func _UpdatePublisherRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UpdatePublisherRequest)
	switch tag {
	case 11: // config.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Publisher_Data_HTTPConfig)
		err := b.DecodeMessage(msg)
		m.Config = &UpdatePublisherRequest_Http{msg}
		return true, err
	case 12: // config.mqtt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Publisher_Data_MQTTConfig)
		err := b.DecodeMessage(msg)
		m.Config = &UpdatePublisherRequest_Mqtt{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UpdatePublisherRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UpdatePublisherRequest)
	// config
	switch x := m.Config.(type) {
	case *UpdatePublisherRequest_Http:
		s := proto.Size(x.Http)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdatePublisherRequest_Mqtt:
		s := proto.Size(x.Mqtt)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UpdatePublisherRequest_Response struct {
	Updated    []*Publisher            `protobuf:"bytes,1,rep,name=updated" json:"updated,omitempty"`
	Request    *UpdatePublisherRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result      `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *UpdatePublisherRequest_Response) Reset()         { *m = UpdatePublisherRequest_Response{} }
func (m *UpdatePublisherRequest_Response) String() string { return proto.CompactTextString(m) }
func (*UpdatePublisherRequest_Response) ProtoMessage()    {}
func (*UpdatePublisherRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{9, 0}
}

func (m *UpdatePublisherRequest_Response) GetUpdated() []*Publisher {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *UpdatePublisherRequest_Response) GetRequest() *UpdatePublisherRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *UpdatePublisherRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type UpdatePublisherRequest_UpdateEvents struct {
	Updated bool           `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Value   *Filter_Events `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdatePublisherRequest_UpdateEvents) Reset()         { *m = UpdatePublisherRequest_UpdateEvents{} }
func (m *UpdatePublisherRequest_UpdateEvents) String() string { return proto.CompactTextString(m) }
func (*UpdatePublisherRequest_UpdateEvents) ProtoMessage()    {}
func (*UpdatePublisherRequest_UpdateEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{9, 1}
}

func (m *UpdatePublisherRequest_UpdateEvents) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdatePublisherRequest_UpdateEvents) GetValue() *Filter_Events {
	if m != nil {
		return m.Value
	}
	return nil
}

type UpdatePublisherRequest_UpdateModems struct {
	Updated bool           `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Value   *Filter_Modems `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdatePublisherRequest_UpdateModems) Reset()         { *m = UpdatePublisherRequest_UpdateModems{} }
func (m *UpdatePublisherRequest_UpdateModems) String() string { return proto.CompactTextString(m) }
func (*UpdatePublisherRequest_UpdateModems) ProtoMessage()    {}
func (*UpdatePublisherRequest_UpdateModems) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{9, 2}
}

func (m *UpdatePublisherRequest_UpdateModems) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdatePublisherRequest_UpdateModems) GetValue() *Filter_Modems {
	if m != nil {
		return m.Value
	}
	return nil
}

type UpdatePublisherRequest_UpdateTags struct {
	Updated bool         `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Value   *Filter_Tags `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdatePublisherRequest_UpdateTags) Reset()         { *m = UpdatePublisherRequest_UpdateTags{} }
func (m *UpdatePublisherRequest_UpdateTags) String() string { return proto.CompactTextString(m) }
func (*UpdatePublisherRequest_UpdateTags) ProtoMessage()    {}
func (*UpdatePublisherRequest_UpdateTags) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{9, 3}
}

func (m *UpdatePublisherRequest_UpdateTags) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdatePublisherRequest_UpdateTags) GetValue() *Filter_Tags {
	if m != nil {
		return m.Value
	}
	return nil
}

type UpdatePublisherTagsRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string              `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *PublisherSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Update       *UpdateTagsForItem  `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
}

func (m *UpdatePublisherTagsRequest) Reset()                    { *m = UpdatePublisherTagsRequest{} }
func (m *UpdatePublisherTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePublisherTagsRequest) ProtoMessage()               {}
func (*UpdatePublisherTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{10} }

func (m *UpdatePublisherTagsRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UpdatePublisherTagsRequest) GetSelection() *PublisherSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *UpdatePublisherTagsRequest) GetUpdate() *UpdateTagsForItem {
	if m != nil {
		return m.Update
	}
	return nil
}

type UpdatePublisherTagsRequest_Response struct {
	Publishers []*Publisher                `protobuf:"bytes,1,rep,name=publishers" json:"publishers,omitempty"`
	Request    *UpdatePublisherTagsRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result          `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *UpdatePublisherTagsRequest_Response) Reset()         { *m = UpdatePublisherTagsRequest_Response{} }
func (m *UpdatePublisherTagsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*UpdatePublisherTagsRequest_Response) ProtoMessage()    {}
func (*UpdatePublisherTagsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{10, 0}
}

func (m *UpdatePublisherTagsRequest_Response) GetPublishers() []*Publisher {
	if m != nil {
		return m.Publishers
	}
	return nil
}

func (m *UpdatePublisherTagsRequest_Response) GetRequest() *UpdatePublisherTagsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *UpdatePublisherTagsRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type DeletePublisherRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Id           int64  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *DeletePublisherRequest) Reset()                    { *m = DeletePublisherRequest{} }
func (m *DeletePublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*DeletePublisherRequest) ProtoMessage()               {}
func (*DeletePublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{11} }

func (m *DeletePublisherRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *DeletePublisherRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeletePublisherRequest_Response struct {
}

func (m *DeletePublisherRequest_Response) Reset()         { *m = DeletePublisherRequest_Response{} }
func (m *DeletePublisherRequest_Response) String() string { return proto.CompactTextString(m) }
func (*DeletePublisherRequest_Response) ProtoMessage()    {}
func (*DeletePublisherRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{11, 0}
}

func init() {
	proto.RegisterType((*Publisher)(nil), "hiber.publisher.Publisher")
	proto.RegisterType((*Publisher_Data)(nil), "hiber.publisher.Publisher.Data")
	proto.RegisterType((*Publisher_Data_MQTTConfig)(nil), "hiber.publisher.Publisher.Data.MQTTConfig")
	proto.RegisterType((*Publisher_Data_HTTPConfig)(nil), "hiber.publisher.Publisher.Data.HTTPConfig")
	proto.RegisterType((*Publisher_Filters)(nil), "hiber.publisher.Publisher.Filters")
	proto.RegisterType((*PublisherSelection)(nil), "hiber.publisher.PublisherSelection")
	proto.RegisterType((*PublisherCall)(nil), "hiber.publisher.PublisherCall")
	proto.RegisterType((*PublisherHistorySelection)(nil), "hiber.publisher.PublisherHistorySelection")
	proto.RegisterType((*ListPublishersRequest)(nil), "hiber.publisher.ListPublishersRequest")
	proto.RegisterType((*ListPublishersRequest_Response)(nil), "hiber.publisher.ListPublishersRequest.Response")
	proto.RegisterType((*PublisherHistoryRequest)(nil), "hiber.publisher.PublisherHistoryRequest")
	proto.RegisterType((*PublisherHistoryRequest_Response)(nil), "hiber.publisher.PublisherHistoryRequest.Response")
	proto.RegisterType((*CreatePublisherRequest)(nil), "hiber.publisher.CreatePublisherRequest")
	proto.RegisterType((*CreatePublisherRequest_Response)(nil), "hiber.publisher.CreatePublisherRequest.Response")
	proto.RegisterType((*EnablePublisherRequest)(nil), "hiber.publisher.EnablePublisherRequest")
	proto.RegisterType((*EnablePublisherRequest_Response)(nil), "hiber.publisher.EnablePublisherRequest.Response")
	proto.RegisterType((*DisablePublisherRequest)(nil), "hiber.publisher.DisablePublisherRequest")
	proto.RegisterType((*DisablePublisherRequest_Response)(nil), "hiber.publisher.DisablePublisherRequest.Response")
	proto.RegisterType((*UpdatePublisherRequest)(nil), "hiber.publisher.UpdatePublisherRequest")
	proto.RegisterType((*UpdatePublisherRequest_Response)(nil), "hiber.publisher.UpdatePublisherRequest.Response")
	proto.RegisterType((*UpdatePublisherRequest_UpdateEvents)(nil), "hiber.publisher.UpdatePublisherRequest.UpdateEvents")
	proto.RegisterType((*UpdatePublisherRequest_UpdateModems)(nil), "hiber.publisher.UpdatePublisherRequest.UpdateModems")
	proto.RegisterType((*UpdatePublisherRequest_UpdateTags)(nil), "hiber.publisher.UpdatePublisherRequest.UpdateTags")
	proto.RegisterType((*UpdatePublisherTagsRequest)(nil), "hiber.publisher.UpdatePublisherTagsRequest")
	proto.RegisterType((*UpdatePublisherTagsRequest_Response)(nil), "hiber.publisher.UpdatePublisherTagsRequest.Response")
	proto.RegisterType((*DeletePublisherRequest)(nil), "hiber.publisher.DeletePublisherRequest")
	proto.RegisterType((*DeletePublisherRequest_Response)(nil), "hiber.publisher.DeletePublisherRequest.Response")
	proto.RegisterEnum("hiber.publisher.Publisher_ContentType", Publisher_ContentType_name, Publisher_ContentType_value)
	proto.RegisterEnum("hiber.publisher.Publisher_Type", Publisher_Type_name, Publisher_Type_value)
	proto.RegisterEnum("hiber.publisher.Publisher_Data_MQTTConfig_QoS", Publisher_Data_MQTTConfig_QoS_name, Publisher_Data_MQTTConfig_QoS_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PublisherService service

type PublisherServiceClient interface {
	List(ctx context.Context, in *ListPublishersRequest, opts ...grpc.CallOption) (*ListPublishersRequest_Response, error)
	Create(ctx context.Context, in *CreatePublisherRequest, opts ...grpc.CallOption) (*CreatePublisherRequest_Response, error)
	Enable(ctx context.Context, in *EnablePublisherRequest, opts ...grpc.CallOption) (*EnablePublisherRequest_Response, error)
	Disable(ctx context.Context, in *DisablePublisherRequest, opts ...grpc.CallOption) (*DisablePublisherRequest_Response, error)
	Update(ctx context.Context, in *UpdatePublisherRequest, opts ...grpc.CallOption) (*UpdatePublisherRequest_Response, error)
	UpdateTags(ctx context.Context, in *UpdatePublisherTagsRequest, opts ...grpc.CallOption) (*UpdatePublisherTagsRequest_Response, error)
	Delete(ctx context.Context, in *DeletePublisherRequest, opts ...grpc.CallOption) (*DeletePublisherRequest_Response, error)
	History(ctx context.Context, in *PublisherHistoryRequest, opts ...grpc.CallOption) (*PublisherHistoryRequest_Response, error)
}

type publisherServiceClient struct {
	cc *grpc.ClientConn
}

func NewPublisherServiceClient(cc *grpc.ClientConn) PublisherServiceClient {
	return &publisherServiceClient{cc}
}

func (c *publisherServiceClient) List(ctx context.Context, in *ListPublishersRequest, opts ...grpc.CallOption) (*ListPublishersRequest_Response, error) {
	out := new(ListPublishersRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.publisher.PublisherService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherServiceClient) Create(ctx context.Context, in *CreatePublisherRequest, opts ...grpc.CallOption) (*CreatePublisherRequest_Response, error) {
	out := new(CreatePublisherRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.publisher.PublisherService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherServiceClient) Enable(ctx context.Context, in *EnablePublisherRequest, opts ...grpc.CallOption) (*EnablePublisherRequest_Response, error) {
	out := new(EnablePublisherRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.publisher.PublisherService/Enable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherServiceClient) Disable(ctx context.Context, in *DisablePublisherRequest, opts ...grpc.CallOption) (*DisablePublisherRequest_Response, error) {
	out := new(DisablePublisherRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.publisher.PublisherService/Disable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherServiceClient) Update(ctx context.Context, in *UpdatePublisherRequest, opts ...grpc.CallOption) (*UpdatePublisherRequest_Response, error) {
	out := new(UpdatePublisherRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.publisher.PublisherService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherServiceClient) UpdateTags(ctx context.Context, in *UpdatePublisherTagsRequest, opts ...grpc.CallOption) (*UpdatePublisherTagsRequest_Response, error) {
	out := new(UpdatePublisherTagsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.publisher.PublisherService/UpdateTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherServiceClient) Delete(ctx context.Context, in *DeletePublisherRequest, opts ...grpc.CallOption) (*DeletePublisherRequest_Response, error) {
	out := new(DeletePublisherRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.publisher.PublisherService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherServiceClient) History(ctx context.Context, in *PublisherHistoryRequest, opts ...grpc.CallOption) (*PublisherHistoryRequest_Response, error) {
	out := new(PublisherHistoryRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.publisher.PublisherService/History", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PublisherService service

type PublisherServiceServer interface {
	List(context.Context, *ListPublishersRequest) (*ListPublishersRequest_Response, error)
	Create(context.Context, *CreatePublisherRequest) (*CreatePublisherRequest_Response, error)
	Enable(context.Context, *EnablePublisherRequest) (*EnablePublisherRequest_Response, error)
	Disable(context.Context, *DisablePublisherRequest) (*DisablePublisherRequest_Response, error)
	Update(context.Context, *UpdatePublisherRequest) (*UpdatePublisherRequest_Response, error)
	UpdateTags(context.Context, *UpdatePublisherTagsRequest) (*UpdatePublisherTagsRequest_Response, error)
	Delete(context.Context, *DeletePublisherRequest) (*DeletePublisherRequest_Response, error)
	History(context.Context, *PublisherHistoryRequest) (*PublisherHistoryRequest_Response, error)
}

func RegisterPublisherServiceServer(s *grpc.Server, srv PublisherServiceServer) {
	s.RegisterService(&_PublisherService_serviceDesc, srv)
}

func _PublisherService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublishersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.publisher.PublisherService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServiceServer).List(ctx, req.(*ListPublishersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.publisher.PublisherService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServiceServer).Create(ctx, req.(*CreatePublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherService_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServiceServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.publisher.PublisherService/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServiceServer).Enable(ctx, req.(*EnablePublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.publisher.PublisherService/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServiceServer).Disable(ctx, req.(*DisablePublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.publisher.PublisherService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServiceServer).Update(ctx, req.(*UpdatePublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherService_UpdateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePublisherTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServiceServer).UpdateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.publisher.PublisherService/UpdateTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServiceServer).UpdateTags(ctx, req.(*UpdatePublisherTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.publisher.PublisherService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServiceServer).Delete(ctx, req.(*DeletePublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherService_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServiceServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.publisher.PublisherService/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServiceServer).History(ctx, req.(*PublisherHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublisherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.publisher.PublisherService",
	HandlerType: (*PublisherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PublisherService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PublisherService_Create_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _PublisherService_Enable_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _PublisherService_Disable_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PublisherService_Update_Handler,
		},
		{
			MethodName: "UpdateTags",
			Handler:    _PublisherService_UpdateTags_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PublisherService_Delete_Handler,
		},
		{
			MethodName: "History",
			Handler:    _PublisherService_History_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publisher.proto",
}

func init() { proto.RegisterFile("publisher.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 1762 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x59, 0x4b, 0x6f, 0x23, 0x4b,
	0x15, 0x1e, 0xbb, 0xfd, 0x3c, 0xb6, 0x13, 0x4f, 0x31, 0x64, 0x4c, 0x0b, 0xee, 0x04, 0xdf, 0x57,
	0x98, 0x8b, 0x1c, 0x6e, 0xee, 0x5c, 0xe9, 0x82, 0xd0, 0xd5, 0x38, 0x4e, 0xa2, 0x04, 0xf2, 0xac,
	0xf4, 0x88, 0x0b, 0x1b, 0xab, 0xdc, 0x5d, 0x71, 0x5a, 0x6a, 0xbb, 0x9d, 0xee, 0x72, 0x50, 0xd8,
	0xce, 0x82, 0x35, 0x7f, 0x80, 0x0d, 0x7f, 0x03, 0x58, 0xf0, 0xd0, 0xf0, 0x1f, 0xf8, 0x09, 0xec,
	0xd9, 0x21, 0xa1, 0x7a, 0xf4, 0xcb, 0x69, 0x27, 0x6d, 0x8f, 0x05, 0x3b, 0x57, 0xd5, 0x57, 0xa7,
	0xcf, 0xf3, 0x3b, 0xa7, 0x12, 0x58, 0x9f, 0x4c, 0x07, 0x8e, 0xed, 0x5f, 0x53, 0xaf, 0x33, 0xf1,
	0x5c, 0xe6, 0xa2, 0xf5, 0x6b, 0x7b, 0xc0, 0x17, 0xc1, 0xb6, 0x0e, 0x03, 0xe2, 0x53, 0x79, 0xa8,
	0x57, 0x19, 0x19, 0xaa, 0x9f, 0x2f, 0x86, 0xae, 0x3b, 0x74, 0xe8, 0xb6, 0x58, 0x0d, 0xa6, 0x57,
	0xdb, 0xcc, 0x1e, 0x51, 0x9f, 0x91, 0xd1, 0x44, 0x02, 0xda, 0xbf, 0x03, 0xa8, 0x9e, 0x07, 0x52,
	0xd0, 0x1a, 0xe4, 0x6d, 0xab, 0x95, 0xdb, 0xcc, 0x6d, 0x69, 0x38, 0x6f, 0x5b, 0x68, 0x13, 0x6a,
	0x16, 0xf5, 0x4d, 0xcf, 0x9e, 0x30, 0xdb, 0x1d, 0xb7, 0xf2, 0x9b, 0xb9, 0xad, 0x2a, 0x8e, 0x6f,
	0xa1, 0x2f, 0xa0, 0x60, 0x11, 0x46, 0x5a, 0xda, 0x66, 0x6e, 0xab, 0xb6, 0xf3, 0xa2, 0x33, 0xa3,
	0x57, 0x27, 0x94, 0xdd, 0xd9, 0x23, 0x8c, 0x60, 0x01, 0x46, 0x3f, 0x85, 0xf2, 0x95, 0xed, 0x30,
	0xea, 0xf9, 0xad, 0x82, 0xb8, 0xd7, 0x7e, 0xe0, 0xde, 0x81, 0x44, 0xe2, 0xe0, 0x0a, 0x6a, 0x43,
	0x81, 0x91, 0xa1, 0xdf, 0x2a, 0x6e, 0x6a, 0x5b, 0xb5, 0x9d, 0x35, 0x75, 0x95, 0xdb, 0x6c, 0x90,
	0x21, 0x16, 0x67, 0xe8, 0x63, 0x28, 0x5d, 0x53, 0xe2, 0xb0, 0xeb, 0x56, 0x69, 0x33, 0xb7, 0xb5,
	0xb6, 0xd3, 0x50, 0xa8, 0x43, 0xb1, 0x89, 0xd5, 0x21, 0xd7, 0x9e, 0xdd, 0x4d, 0x68, 0xab, 0x2c,
	0x40, 0x0f, 0x69, 0x6f, 0xdc, 0x4d, 0x28, 0x16, 0x60, 0xfd, 0x5f, 0x45, 0x28, 0x70, 0x63, 0x50,
	0x13, 0xb4, 0xa9, 0xe7, 0x08, 0x77, 0x55, 0x31, 0xff, 0x89, 0x8e, 0xa0, 0x6e, 0xba, 0x63, 0x46,
	0xc7, 0xac, 0x2f, 0xe4, 0xe6, 0x85, 0xdc, 0x4f, 0x1e, 0x90, 0xdb, 0x93, 0x70, 0x21, 0xbe, 0x66,
	0x46, 0x0b, 0xa4, 0x43, 0xc5, 0xb2, 0x7d, 0x32, 0x70, 0xa8, 0x25, 0x9c, 0x5b, 0xc1, 0xe1, 0x1a,
	0x7d, 0x0c, 0x6b, 0x26, 0xf5, 0x98, 0x7d, 0x65, 0x9b, 0x84, 0xd1, 0xbe, 0x6d, 0x09, 0x37, 0x6a,
	0xb8, 0x11, 0xdb, 0x3d, 0xb2, 0xd0, 0x0f, 0xa0, 0x19, 0x87, 0x8d, 0xc9, 0x88, 0xb6, 0x8a, 0x42,
	0xd9, 0xf5, 0xd8, 0xfe, 0x29, 0x19, 0x51, 0xf4, 0x12, 0x9e, 0x9a, 0xa4, 0x3f, 0x23, 0xb4, 0x24,
	0x84, 0xae, 0x9b, 0xa4, 0x97, 0x10, 0xdb, 0x81, 0x6f, 0xcd, 0x60, 0x85, 0xe4, 0xb2, 0x90, 0xfc,
	0x34, 0x81, 0x16, 0xb2, 0x5f, 0x43, 0xe1, 0x9a, 0xb1, 0x49, 0xab, 0x22, 0x42, 0xfd, 0xf2, 0x91,
	0x14, 0xe9, 0x1c, 0x1a, 0xc6, 0x79, 0xcf, 0x1d, 0x5f, 0xd9, 0xc3, 0xc3, 0x27, 0x58, 0xdc, 0xe4,
	0x12, 0x46, 0x37, 0x8c, 0xb5, 0xaa, 0xd9, 0x24, 0x9c, 0x5c, 0x18, 0x46, 0x24, 0x81, 0xdf, 0xd4,
	0x7f, 0x9b, 0x07, 0x88, 0xb6, 0xd1, 0x33, 0x28, 0x32, 0x77, 0x62, 0x9b, 0x2a, 0x76, 0x72, 0x81,
	0x5e, 0x83, 0x76, 0xe3, 0xfa, 0x2a, 0x68, 0x9d, 0xec, 0x5f, 0xe9, 0x5c, 0xb8, 0x97, 0x98, 0x5f,
	0xe5, 0x41, 0x9b, 0xfa, 0xd4, 0x13, 0xfe, 0xd0, 0x84, 0xe8, 0x70, 0xcd, 0xcf, 0x26, 0xc4, 0xf7,
	0x7f, 0xed, 0x7a, 0x32, 0x5c, 0x55, 0x1c, 0xae, 0xd1, 0x07, 0x00, 0xb6, 0x45, 0xc7, 0xdc, 0x6d,
	0xd4, 0x53, 0x31, 0x8a, 0xed, 0xb4, 0x8f, 0x40, 0xbb, 0x70, 0x2f, 0x51, 0x0d, 0xca, 0x7b, 0xfb,
	0x07, 0xdd, 0x37, 0xc7, 0x46, 0xf3, 0x09, 0x6a, 0x42, 0xbd, 0x6b, 0xf4, 0x4f, 0xce, 0x2e, 0x8d,
	0xfe, 0xd9, 0x69, 0x6f, 0xbf, 0x99, 0x43, 0x4f, 0xa1, 0xd1, 0x35, 0xfa, 0xc7, 0xfb, 0xdd, 0x60,
	0x2b, 0xcf, 0x41, 0xfb, 0xdf, 0x74, 0x7b, 0xc6, 0xf1, 0x2f, 0xe5, 0x8e, 0xa6, 0x7f, 0x04, 0x10,
	0x79, 0x18, 0x6d, 0x40, 0xc9, 0xa7, 0xa6, 0x47, 0x99, 0xf2, 0x84, 0x5a, 0xed, 0x56, 0xa0, 0x64,
	0x0a, 0x84, 0xfe, 0x87, 0x1c, 0x94, 0x55, 0x09, 0xa2, 0x2f, 0xa1, 0x46, 0x6f, 0x83, 0xe4, 0xf6,
	0xc5, 0x95, 0xda, 0xce, 0x33, 0xe5, 0x28, 0x09, 0xea, 0xec, 0x73, 0x80, 0x8f, 0x41, 0x00, 0x79,
	0x26, 0xfb, 0xe8, 0xc7, 0xd0, 0x18, 0xb9, 0x16, 0x1d, 0xf5, 0xc7, 0xd3, 0xd1, 0x80, 0x17, 0x7d,
	0x3e, 0xed, 0xe2, 0x09, 0x87, 0xf8, 0xb8, 0x2e, 0xa0, 0xa7, 0x12, 0x89, 0x3e, 0x51, 0xb5, 0x2e,
	0xe9, 0x05, 0x25, 0x6f, 0x18, 0x64, 0xe8, 0xcb, 0x7a, 0x6f, 0x6f, 0x43, 0x2d, 0x56, 0x49, 0x49,
	0x47, 0x55, 0xa0, 0xf0, 0xb3, 0xcb, 0xb3, 0xd3, 0x66, 0x0e, 0x55, 0xa1, 0x78, 0x8e, 0xcf, 0x8c,
	0xb3, 0x66, 0xbe, 0xad, 0x43, 0x41, 0x20, 0x2b, 0x50, 0xe0, 0xee, 0x90, 0x30, 0x1e, 0xd2, 0x66,
	0xae, 0xfd, 0x47, 0x0d, 0x50, 0x18, 0xec, 0x4b, 0xea, 0x50, 0x53, 0x50, 0xdd, 0x57, 0x00, 0x61,
	0x32, 0x04, 0xc6, 0xb7, 0x92, 0x1a, 0x85, 0xb7, 0x7c, 0x1c, 0xc3, 0x66, 0xa0, 0xd1, 0xef, 0x01,
	0xf8, 0x94, 0x78, 0xe6, 0x75, 0x9f, 0x33, 0x8a, 0x4c, 0x9d, 0xaa, 0xdc, 0x79, 0xe3, 0x39, 0xe8,
	0xe7, 0xd0, 0x88, 0xf3, 0x0a, 0xa7, 0x4d, 0x6d, 0x01, 0x62, 0xa9, 0xc7, 0x88, 0xc5, 0x47, 0x9f,
	0xc2, 0x7a, 0xb2, 0xd0, 0x25, 0x95, 0x6a, 0x78, 0x2d, 0x41, 0x1f, 0x3e, 0x27, 0x05, 0xa5, 0x14,
	0xaf, 0xa1, 0xbe, 0xac, 0x98, 0x92, 0x24, 0x10, 0x79, 0x70, 0x72, 0xc3, 0x98, 0x21, 0x6a, 0xe7,
	0x33, 0x15, 0xa8, 0xb2, 0x70, 0xcb, 0xf3, 0x24, 0x29, 0x87, 0x3e, 0xbc, 0xc7, 0xce, 0x15, 0x61,
	0xc7, 0x1c, 0x76, 0xfe, 0x12, 0x8a, 0xd2, 0xda, 0xaa, 0x40, 0x3d, 0x4a, 0xcf, 0x12, 0xdd, 0x7e,
	0x97, 0x83, 0x46, 0x78, 0xd2, 0x23, 0x8e, 0x83, 0x3e, 0x82, 0x02, 0xef, 0x7b, 0x2a, 0x66, 0x4d,
	0x25, 0xc7, 0x08, 0x5a, 0x21, 0x16, 0xa7, 0xe8, 0x00, 0xd6, 0x42, 0xd1, 0x7d, 0xd1, 0xd4, 0xf2,
	0xd9, 0x9a, 0x5a, 0x23, 0x3c, 0x11, 0x6d, 0x01, 0x41, 0x61, 0xe0, 0x5a, 0x77, 0x22, 0x8a, 0x75,
	0x2c, 0x7e, 0xf3, 0x02, 0xf7, 0xa7, 0xa6, 0x49, 0x7d, 0xff, 0x6a, 0xea, 0x88, 0xf2, 0xaf, 0xe0,
	0xd8, 0x0e, 0x27, 0x24, 0xea, 0x79, 0x6e, 0x50, 0xfb, 0x72, 0xd1, 0xbe, 0x81, 0xef, 0x84, 0x9f,
	0x3a, 0xb4, 0x7d, 0xe6, 0x7a, 0x77, 0x51, 0x3a, 0x7e, 0x08, 0x0d, 0x77, 0xec, 0xdc, 0xf5, 0xaf,
	0x88, 0xed, 0x4c, 0x3d, 0x2a, 0xab, 0xaa, 0x82, 0xeb, 0x7c, 0xf3, 0x40, 0xed, 0xa1, 0x6d, 0x00,
	0x6e, 0x5b, 0xdf, 0x23, 0xe3, 0x21, 0x55, 0x55, 0x14, 0xb7, 0x1f, 0xf3, 0x7d, 0x5c, 0x65, 0xc1,
	0xcf, 0xf6, 0xbf, 0xf3, 0xf0, 0xed, 0x63, 0xdb, 0x67, 0xb1, 0x4c, 0xa6, 0x37, 0x53, 0xea, 0x33,
	0xd4, 0x86, 0xba, 0xeb, 0x0d, 0xc9, 0xd8, 0xfe, 0x0d, 0x11, 0x59, 0x2c, 0x09, 0x23, 0xb1, 0x87,
	0xba, 0x50, 0xf5, 0x03, 0x05, 0x95, 0xf7, 0x3e, 0x9c, 0xef, 0xbd, 0x28, 0x2d, 0xa2, 0x5b, 0xe8,
	0x73, 0x80, 0x09, 0x19, 0xda, 0x63, 0xf9, 0x11, 0xa9, 0xf1, 0x53, 0x25, 0xe3, 0x3c, 0x3c, 0xc0,
	0x31, 0x90, 0xfe, 0x97, 0x1c, 0x54, 0x30, 0xf5, 0x27, 0xee, 0xd8, 0xa7, 0xe8, 0x27, 0x33, 0x55,
	0xca, 0x67, 0x04, 0x7d, 0xbe, 0x0e, 0x89, 0x3a, 0x7d, 0x0d, 0x65, 0x4f, 0x5a, 0xab, 0x94, 0xbf,
	0x5f, 0x60, 0xa9, 0xbe, 0xc1, 0xc1, 0x35, 0xc1, 0x11, 0xb3, 0xda, 0xb7, 0xee, 0x69, 0xdf, 0xc1,
	0xd4, 0x9f, 0x3a, 0x2c, 0x6e, 0x44, 0xfb, 0xf7, 0x1a, 0x3c, 0x9f, 0x0d, 0xf6, 0x22, 0xae, 0xff,
	0x3e, 0xd4, 0xa3, 0xec, 0xb5, 0x2d, 0x61, 0x80, 0x86, 0x6b, 0xe1, 0xde, 0x91, 0x85, 0x0e, 0xe3,
	0xd1, 0xd1, 0x1e, 0xeb, 0xa5, 0xb3, 0x09, 0x37, 0x3f, 0x48, 0x85, 0x2c, 0x41, 0xfa, 0x73, 0x3c,
	0x48, 0xaf, 0xa0, 0x68, 0x12, 0xc7, 0x09, 0xe2, 0xf3, 0xc1, 0x7c, 0x2d, 0x78, 0xfd, 0x62, 0x09,
	0x46, 0xbb, 0xb3, 0xe1, 0xd9, 0x7a, 0x54, 0xfb, 0x15, 0x06, 0xe8, 0x3f, 0x05, 0xd8, 0xe8, 0x79,
	0x94, 0x30, 0x1a, 0x25, 0xcf, 0x02, 0xf1, 0x79, 0xbc, 0x07, 0xa8, 0x71, 0x52, 0x9b, 0x3f, 0x4e,
	0x16, 0x96, 0x1f, 0x27, 0xef, 0x8f, 0x8c, 0xc5, 0xb4, 0x91, 0x31, 0x36, 0x99, 0x97, 0x16, 0x9f,
	0xcc, 0x51, 0xd8, 0x04, 0x78, 0x3b, 0x91, 0x5c, 0x1f, 0x8c, 0xd8, 0x95, 0x05, 0x46, 0xec, 0x70,
	0x64, 0xac, 0xbe, 0xf7, 0xc8, 0x08, 0x4b, 0x8f, 0x8c, 0x6f, 0x93, 0x09, 0x5b, 0x36, 0x45, 0xec,
	0x2d, 0xd5, 0x44, 0x1e, 0xa2, 0x94, 0x00, 0x8a, 0xba, 0xb3, 0x09, 0xfb, 0xe9, 0xbd, 0x5b, 0xe9,
	0x19, 0x15, 0xe6, 0x6b, 0x34, 0x88, 0xb5, 0xff, 0x9e, 0x87, 0x8d, 0xfd, 0x31, 0x7f, 0x00, 0x2c,
	0x95, 0x7f, 0xef, 0x4f, 0xcd, 0xfa, 0x5f, 0x57, 0xc5, 0xb3, 0x19, 0xfc, 0x92, 0x6e, 0xe9, 0x2a,
	0xea, 0xf8, 0x5d, 0x1e, 0x9e, 0xef, 0xc9, 0x97, 0xd4, 0xff, 0xcb, 0x91, 0x7f, 0x5b, 0x95, 0x23,
	0x33, 0x30, 0xe2, 0x1c, 0x53, 0x57, 0xe1, 0xc9, 0x7f, 0x56, 0x61, 0xe3, 0xcd, 0xc4, 0x5a, 0x96,
	0x11, 0x57, 0x30, 0x2c, 0x7c, 0x9d, 0x24, 0x55, 0xa9, 0xfc, 0x77, 0x95, 0x10, 0xa9, 0x5a, 0xcf,
	0xa1, 0xc4, 0xe3, 0x1e, 0xb8, 0x64, 0x9e, 0x3d, 0x1e, 0xa6, 0x52, 0x6e, 0x61, 0x3e, 0xe5, 0x16,
	0x97, 0xa7, 0xdc, 0xaf, 0xef, 0x51, 0x6e, 0x29, 0x31, 0x1c, 0x4b, 0xfd, 0xce, 0x84, 0x26, 0xc4,
	0x39, 0xb2, 0x66, 0xb9, 0xf8, 0x17, 0x50, 0x97, 0xaf, 0x2d, 0x49, 0xaf, 0x6a, 0xb4, 0x7e, 0x75,
	0x4f, 0x95, 0xf4, 0x10, 0xa8, 0x6d, 0xf5, 0x1c, 0x93, 0xef, 0x36, 0x49, 0xd8, 0x5c, 0xb0, 0x7c,
	0x8f, 0x29, 0xc1, 0x95, 0x65, 0x04, 0xab, 0xe7, 0x5a, 0x4d, 0x48, 0x52, 0x82, 0x2f, 0x00, 0x18,
	0x19, 0x06, 0x62, 0x25, 0x79, 0xef, 0x2c, 0x26, 0x56, 0xbc, 0xe9, 0xaa, 0x8c, 0x0c, 0x95, 0xc8,
	0x1f, 0x42, 0x89, 0x98, 0xcc, 0xbe, 0xa5, 0x8a, 0xc9, 0x9f, 0x25, 0x9c, 0xb7, 0xeb, 0xba, 0x0e,
	0x25, 0x63, 0xac, 0x30, 0x61, 0xdf, 0xa8, 0xbd, 0x77, 0xdf, 0xa8, 0x2f, 0xdd, 0x37, 0xfe, 0x34,
	0xd3, 0x37, 0xa6, 0x42, 0x53, 0x2b, 0x43, 0x65, 0x07, 0xd0, 0x2c, 0xfc, 0x98, 0xee, 0xc4, 0x15,
	0x54, 0xb5, 0x6e, 0x40, 0x3d, 0x9e, 0x3a, 0xa8, 0x15, 0x37, 0x81, 0xbf, 0x30, 0x42, 0x35, 0x5f,
	0x42, 0xf1, 0x96, 0x38, 0x53, 0x9a, 0xfe, 0x9e, 0x57, 0x99, 0x27, 0x21, 0x91, 0x54, 0x99, 0x37,
	0x4b, 0x4b, 0x55, 0x69, 0xa7, 0xa4, 0x9e, 0x03, 0x44, 0x69, 0xf3, 0x80, 0xcc, 0xad, 0xa4, 0xcc,
	0xb4, 0xbf, 0x23, 0x48, 0x40, 0xac, 0xdf, 0xbe, 0xd5, 0x40, 0x9f, 0xf1, 0xb2, 0x00, 0xfe, 0x6f,
	0x19, 0xee, 0x15, 0x94, 0xa4, 0x11, 0x33, 0xe4, 0xc6, 0x5f, 0xd6, 0x91, 0xe9, 0x07, 0xae, 0x77,
	0xc4, 0xe8, 0x08, 0x2b, 0xac, 0xfe, 0x6e, 0x55, 0x0d, 0x66, 0x7f, 0x36, 0x13, 0x3f, 0x7b, 0x2c,
	0x13, 0x63, 0x3e, 0x5a, 0x45, 0x8f, 0xf9, 0x06, 0x36, 0xf6, 0xa8, 0x43, 0x97, 0x6c, 0x31, 0xf2,
	0xef, 0xd9, 0xf9, 0xe0, 0xef, 0xd9, 0x3a, 0x44, 0x6e, 0xd9, 0xf9, 0x47, 0x09, 0x9a, 0x31, 0xdf,
	0x7b, 0xb7, 0xb6, 0x49, 0x51, 0x1f, 0x0a, 0xfc, 0x85, 0x87, 0x32, 0x3e, 0xfc, 0xf4, 0xed, 0x6c,
	0xb8, 0x4e, 0x18, 0x0c, 0x13, 0x4a, 0x72, 0xe4, 0x43, 0x59, 0x67, 0x41, 0xfd, 0x47, 0x19, 0x81,
	0x89, 0x8f, 0xc8, 0xf9, 0x09, 0x65, 0x1d, 0xac, 0x52, 0x3e, 0x92, 0x0e, 0x8c, 0x3e, 0x72, 0x05,
	0x65, 0x35, 0x5b, 0xa0, 0xcc, 0x53, 0x87, 0xfe, 0x79, 0x56, 0x64, 0xc2, 0x18, 0x99, 0x62, 0x28,
	0x2b, 0x0b, 0xa6, 0x18, 0x33, 0xa7, 0xe7, 0x84, 0x1f, 0x71, 0x13, 0x44, 0xb2, 0x48, 0x92, 0xeb,
	0xaf, 0x16, 0x00, 0x27, 0xac, 0x92, 0x79, 0x9d, 0x62, 0x55, 0x7a, 0xc2, 0xa7, 0x58, 0x95, 0x0e,
	0x4c, 0x84, 0x48, 0xbd, 0x83, 0x51, 0xe6, 0xa7, 0x72, 0x4a, 0x88, 0xe6, 0x20, 0xc3, 0xef, 0xec,
	0x7e, 0x05, 0x2f, 0x86, 0x8e, 0x3b, 0x20, 0x8e, 0xba, 0x4a, 0x26, 0x76, 0x67, 0xe8, 0x4d, 0xcc,
	0x48, 0xc6, 0x6e, 0x3d, 0x14, 0xd2, 0x9d, 0xd8, 0xe7, 0x4f, 0x7e, 0x55, 0x14, 0xc8, 0x41, 0x49,
	0xfc, 0x17, 0xea, 0x8b, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x6f, 0x09, 0xa2, 0xe1, 0x1a,
	0x00, 0x00,
}
