// Code generated by protoc-gen-go. DO NOT EDIT.
// source: integration_mqtt.proto

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MQTTPublisher_ContentType int32

const (
	MQTTPublisher_DEFAULT MQTTPublisher_ContentType = 0
	MQTTPublisher_JSON    MQTTPublisher_ContentType = 1
	MQTTPublisher_PROTO   MQTTPublisher_ContentType = 2
)

var MQTTPublisher_ContentType_name = map[int32]string{
	0: "DEFAULT",
	1: "JSON",
	2: "PROTO",
}
var MQTTPublisher_ContentType_value = map[string]int32{
	"DEFAULT": 0,
	"JSON":    1,
	"PROTO":   2,
}

func (x MQTTPublisher_ContentType) String() string {
	return proto.EnumName(MQTTPublisher_ContentType_name, int32(x))
}
func (MQTTPublisher_ContentType) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 0} }

type MQTTPublisher_Data_QoS int32

const (
	MQTTPublisher_Data_DEFAULT MQTTPublisher_Data_QoS = 0
	// Qos level 0
	MQTTPublisher_Data_AT_MOST_ONCE MQTTPublisher_Data_QoS = 1
	// Qos level 1
	MQTTPublisher_Data_AT_LEAST_ONCE MQTTPublisher_Data_QoS = 2
	// Qos level 2
	MQTTPublisher_Data_EXACTLY_ONCE MQTTPublisher_Data_QoS = 3
)

var MQTTPublisher_Data_QoS_name = map[int32]string{
	0: "DEFAULT",
	1: "AT_MOST_ONCE",
	2: "AT_LEAST_ONCE",
	3: "EXACTLY_ONCE",
}
var MQTTPublisher_Data_QoS_value = map[string]int32{
	"DEFAULT":       0,
	"AT_MOST_ONCE":  1,
	"AT_LEAST_ONCE": 2,
	"EXACTLY_ONCE":  3,
}

func (x MQTTPublisher_Data_QoS) String() string {
	return proto.EnumName(MQTTPublisher_Data_QoS_name, int32(x))
}
func (MQTTPublisher_Data_QoS) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 0, 0} }

type MQTTPublisher struct {
	Id                 int64               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Description        string              `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Data               *MQTTPublisher_Data `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	FilterEventTypes   *Filter_Events      `protobuf:"bytes,4,opt,name=filter_event_types,json=filterEventTypes" json:"filter_event_types,omitempty"`
	FilterModemNumbers *Filter_Modems      `protobuf:"bytes,5,opt,name=filter_modem_numbers,json=filterModemNumbers" json:"filter_modem_numbers,omitempty"`
	FilterTags         *Filter_Tags        `protobuf:"bytes,6,opt,name=filter_tags,json=filterTags" json:"filter_tags,omitempty"`
	Health             Health              `protobuf:"varint,7,opt,name=health,enum=hiber.Health" json:"health,omitempty"`
	Tags               []*Tag              `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
}

func (m *MQTTPublisher) Reset()                    { *m = MQTTPublisher{} }
func (m *MQTTPublisher) String() string            { return proto.CompactTextString(m) }
func (*MQTTPublisher) ProtoMessage()               {}
func (*MQTTPublisher) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *MQTTPublisher) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MQTTPublisher) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MQTTPublisher) GetData() *MQTTPublisher_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MQTTPublisher) GetFilterEventTypes() *Filter_Events {
	if m != nil {
		return m.FilterEventTypes
	}
	return nil
}

func (m *MQTTPublisher) GetFilterModemNumbers() *Filter_Modems {
	if m != nil {
		return m.FilterModemNumbers
	}
	return nil
}

func (m *MQTTPublisher) GetFilterTags() *Filter_Tags {
	if m != nil {
		return m.FilterTags
	}
	return nil
}

func (m *MQTTPublisher) GetHealth() Health {
	if m != nil {
		return m.Health
	}
	return Health_OK
}

func (m *MQTTPublisher) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type MQTTPublisher_Data struct {
	// The url of an MQTT server to send the events to, i.e. mqtt[s]://example.com:8883
	Url         string                    `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	ContentType MQTTPublisher_ContentType `protobuf:"varint,2,opt,name=content_type,json=contentType,enum=hiber.integration.mqtt.MQTTPublisher_ContentType" json:"content_type,omitempty"`
	// The MQTT topic to send to on the receiving server.
	Topic string `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	// MQTT QoS value.
	Qos MQTTPublisher_Data_QoS `protobuf:"varint,4,opt,name=qos,enum=hiber.integration.mqtt.MQTTPublisher_Data_QoS" json:"qos,omitempty"`
	// Identifier used by the MQTT client. Defaults to "hiber".
	Identifier string `protobuf:"bytes,5,opt,name=identifier" json:"identifier,omitempty"`
	// Optional username to authenticate with.
	Username string `protobuf:"bytes,6,opt,name=username" json:"username,omitempty"`
	// Optional password to authenticate with. Requires username to be set.
	Password          string `protobuf:"bytes,7,opt,name=password" json:"password,omitempty"`
	CertificateId     int64  `protobuf:"varint,8,opt,name=certificate_id,json=certificateId" json:"certificate_id,omitempty"`
	CertificateName   string `protobuf:"bytes,10,opt,name=certificate_name,json=certificateName" json:"certificate_name,omitempty"`
	CaCertificateId   int64  `protobuf:"varint,11,opt,name=ca_certificate_id,json=caCertificateId" json:"ca_certificate_id,omitempty"`
	CaCertificateName string `protobuf:"bytes,12,opt,name=ca_certificate_name,json=caCertificateName" json:"ca_certificate_name,omitempty"`
	Disabled          bool   `protobuf:"varint,9,opt,name=disabled" json:"disabled,omitempty"`
}

func (m *MQTTPublisher_Data) Reset()                    { *m = MQTTPublisher_Data{} }
func (m *MQTTPublisher_Data) String() string            { return proto.CompactTextString(m) }
func (*MQTTPublisher_Data) ProtoMessage()               {}
func (*MQTTPublisher_Data) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 0} }

func (m *MQTTPublisher_Data) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *MQTTPublisher_Data) GetContentType() MQTTPublisher_ContentType {
	if m != nil {
		return m.ContentType
	}
	return MQTTPublisher_DEFAULT
}

func (m *MQTTPublisher_Data) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *MQTTPublisher_Data) GetQos() MQTTPublisher_Data_QoS {
	if m != nil {
		return m.Qos
	}
	return MQTTPublisher_Data_DEFAULT
}

func (m *MQTTPublisher_Data) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *MQTTPublisher_Data) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *MQTTPublisher_Data) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *MQTTPublisher_Data) GetCertificateId() int64 {
	if m != nil {
		return m.CertificateId
	}
	return 0
}

func (m *MQTTPublisher_Data) GetCertificateName() string {
	if m != nil {
		return m.CertificateName
	}
	return ""
}

func (m *MQTTPublisher_Data) GetCaCertificateId() int64 {
	if m != nil {
		return m.CaCertificateId
	}
	return 0
}

func (m *MQTTPublisher_Data) GetCaCertificateName() string {
	if m != nil {
		return m.CaCertificateName
	}
	return ""
}

func (m *MQTTPublisher_Data) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

type MQTTMessage struct {
	Time          *Timestamp          `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	PublisherData *MQTTPublisher_Data `protobuf:"bytes,2,opt,name=publisher_data,json=publisherData" json:"publisher_data,omitempty"`
	Message       *BytesOrHex         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Successful    bool                `protobuf:"varint,4,opt,name=successful" json:"successful,omitempty"`
	Error         string              `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
}

func (m *MQTTMessage) Reset()                    { *m = MQTTMessage{} }
func (m *MQTTMessage) String() string            { return proto.CompactTextString(m) }
func (*MQTTMessage) ProtoMessage()               {}
func (*MQTTMessage) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *MQTTMessage) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *MQTTMessage) GetPublisherData() *MQTTPublisher_Data {
	if m != nil {
		return m.PublisherData
	}
	return nil
}

func (m *MQTTMessage) GetMessage() *BytesOrHex {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *MQTTMessage) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *MQTTMessage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type MQTTPublisherSelection struct {
	// Filter by id.
	Publishers *Filter_Publishers `protobuf:"bytes,1,opt,name=publishers" json:"publishers,omitempty"`
	// Partial text match on the description.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// Partial text match on the url.
	SearchUrl string `protobuf:"bytes,3,opt,name=search_url,json=searchUrl" json:"search_url,omitempty"`
	// Partial text match on the topic.
	SearchTopic    string                      `protobuf:"bytes,4,opt,name=search_topic,json=searchTopic" json:"search_topic,omitempty"`
	ContentTypes   []MQTTPublisher_ContentType `protobuf:"varint,5,rep,packed,name=content_types,json=contentTypes,enum=hiber.integration.mqtt.MQTTPublisher_ContentType" json:"content_types,omitempty"`
	CertificateIds []int64                     `protobuf:"varint,6,rep,packed,name=certificate_ids,json=certificateIds" json:"certificate_ids,omitempty"`
	Tags           *TagSelection               `protobuf:"bytes,7,opt,name=tags" json:"tags,omitempty"`
	Health         []Health                    `protobuf:"varint,8,rep,packed,name=health,enum=hiber.Health" json:"health,omitempty"`
}

func (m *MQTTPublisherSelection) Reset()                    { *m = MQTTPublisherSelection{} }
func (m *MQTTPublisherSelection) String() string            { return proto.CompactTextString(m) }
func (*MQTTPublisherSelection) ProtoMessage()               {}
func (*MQTTPublisherSelection) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *MQTTPublisherSelection) GetPublishers() *Filter_Publishers {
	if m != nil {
		return m.Publishers
	}
	return nil
}

func (m *MQTTPublisherSelection) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MQTTPublisherSelection) GetSearchUrl() string {
	if m != nil {
		return m.SearchUrl
	}
	return ""
}

func (m *MQTTPublisherSelection) GetSearchTopic() string {
	if m != nil {
		return m.SearchTopic
	}
	return ""
}

func (m *MQTTPublisherSelection) GetContentTypes() []MQTTPublisher_ContentType {
	if m != nil {
		return m.ContentTypes
	}
	return nil
}

func (m *MQTTPublisherSelection) GetCertificateIds() []int64 {
	if m != nil {
		return m.CertificateIds
	}
	return nil
}

func (m *MQTTPublisherSelection) GetTags() *TagSelection {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *MQTTPublisherSelection) GetHealth() []Health {
	if m != nil {
		return m.Health
	}
	return nil
}

type ListMQTTPublishersRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                  `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *MQTTPublisherSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination             `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListMQTTPublishersRequest) Reset()                    { *m = ListMQTTPublishersRequest{} }
func (m *ListMQTTPublishersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListMQTTPublishersRequest) ProtoMessage()               {}
func (*ListMQTTPublishersRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *ListMQTTPublishersRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ListMQTTPublishersRequest) GetSelection() *MQTTPublisherSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListMQTTPublishersRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListMQTTPublishersRequest_Response struct {
	Publishers []*MQTTPublisher           `protobuf:"bytes,1,rep,name=publishers" json:"publishers,omitempty"`
	Request    *ListMQTTPublishersRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result         `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListMQTTPublishersRequest_Response) Reset()         { *m = ListMQTTPublishersRequest_Response{} }
func (m *ListMQTTPublishersRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListMQTTPublishersRequest_Response) ProtoMessage()    {}
func (*ListMQTTPublishersRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor7, []int{3, 0}
}

func (m *ListMQTTPublishersRequest_Response) GetPublishers() []*MQTTPublisher {
	if m != nil {
		return m.Publishers
	}
	return nil
}

func (m *ListMQTTPublishersRequest_Response) GetRequest() *ListMQTTPublishersRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListMQTTPublishersRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type MQTTPublisherHistorySelection struct {
	TimeRange    *TimeRange `protobuf:"bytes,1,opt,name=time_range,json=timeRange" json:"time_range,omitempty"`
	OnlyFailures bool       `protobuf:"varint,2,opt,name=only_failures,json=onlyFailures" json:"only_failures,omitempty"`
}

func (m *MQTTPublisherHistorySelection) Reset()                    { *m = MQTTPublisherHistorySelection{} }
func (m *MQTTPublisherHistorySelection) String() string            { return proto.CompactTextString(m) }
func (*MQTTPublisherHistorySelection) ProtoMessage()               {}
func (*MQTTPublisherHistorySelection) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *MQTTPublisherHistorySelection) GetTimeRange() *TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

func (m *MQTTPublisherHistorySelection) GetOnlyFailures() bool {
	if m != nil {
		return m.OnlyFailures
	}
	return false
}

type MQTTPublisherHistoryRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                         `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Id           int64                          `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Selection    *MQTTPublisherHistorySelection `protobuf:"bytes,3,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination                    `protobuf:"bytes,4,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *MQTTPublisherHistoryRequest) Reset()                    { *m = MQTTPublisherHistoryRequest{} }
func (m *MQTTPublisherHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*MQTTPublisherHistoryRequest) ProtoMessage()               {}
func (*MQTTPublisherHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *MQTTPublisherHistoryRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *MQTTPublisherHistoryRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MQTTPublisherHistoryRequest) GetSelection() *MQTTPublisherHistorySelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *MQTTPublisherHistoryRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type MQTTPublisherHistoryRequest_Response struct {
	Items      []*MQTTMessage               `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Request    *MQTTPublisherHistoryRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result           `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *MQTTPublisherHistoryRequest_Response) Reset()         { *m = MQTTPublisherHistoryRequest_Response{} }
func (m *MQTTPublisherHistoryRequest_Response) String() string { return proto.CompactTextString(m) }
func (*MQTTPublisherHistoryRequest_Response) ProtoMessage()    {}
func (*MQTTPublisherHistoryRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor7, []int{5, 0}
}

func (m *MQTTPublisherHistoryRequest_Response) GetItems() []*MQTTMessage {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *MQTTPublisherHistoryRequest_Response) GetRequest() *MQTTPublisherHistoryRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *MQTTPublisherHistoryRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type CreateMQTTPublisherRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization       string         `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Description        string         `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	FilterEventTypes   *Filter_Events `protobuf:"bytes,3,opt,name=filter_event_types,json=filterEventTypes" json:"filter_event_types,omitempty"`
	FilterModemNumbers *Filter_Modems `protobuf:"bytes,4,opt,name=filter_modem_numbers,json=filterModemNumbers" json:"filter_modem_numbers,omitempty"`
	FilterTags         *Filter_Tags   `protobuf:"bytes,5,opt,name=filter_tags,json=filterTags" json:"filter_tags,omitempty"`
	// The url of an MQTT server to send the events to, i.e. mqtt[s]://example.com:8883
	Url         string                    `protobuf:"bytes,10,opt,name=url" json:"url,omitempty"`
	ContentType MQTTPublisher_ContentType `protobuf:"varint,11,opt,name=content_type,json=contentType,enum=hiber.integration.mqtt.MQTTPublisher_ContentType" json:"content_type,omitempty"`
	// The MQTT topic to send to on the receiving server.
	Topic string `protobuf:"bytes,12,opt,name=topic" json:"topic,omitempty"`
	// MQTT QoS value.
	Qos MQTTPublisher_Data_QoS `protobuf:"varint,13,opt,name=qos,enum=hiber.integration.mqtt.MQTTPublisher_Data_QoS" json:"qos,omitempty"`
	// Identifier used by the MQTT client. Defaults to "hiber".
	Identifier string `protobuf:"bytes,14,opt,name=identifier" json:"identifier,omitempty"`
	// Optional username to authenticate with.
	Username string `protobuf:"bytes,15,opt,name=username" json:"username,omitempty"`
	// Optional password to authenticate with. Requires username to be set.
	Password      string `protobuf:"bytes,16,opt,name=password" json:"password,omitempty"`
	CertificateId int64  `protobuf:"varint,17,opt,name=certificate_id,json=certificateId" json:"certificate_id,omitempty"`
	// Disable the MQTT publisher after creation, so it needs to be enabled before it is active.
	Disabled bool    `protobuf:"varint,18,opt,name=disabled" json:"disabled,omitempty"`
	Tags     []int64 `protobuf:"varint,20,rep,packed,name=tags" json:"tags,omitempty"`
}

func (m *CreateMQTTPublisherRequest) Reset()                    { *m = CreateMQTTPublisherRequest{} }
func (m *CreateMQTTPublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateMQTTPublisherRequest) ProtoMessage()               {}
func (*CreateMQTTPublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

func (m *CreateMQTTPublisherRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *CreateMQTTPublisherRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateMQTTPublisherRequest) GetFilterEventTypes() *Filter_Events {
	if m != nil {
		return m.FilterEventTypes
	}
	return nil
}

func (m *CreateMQTTPublisherRequest) GetFilterModemNumbers() *Filter_Modems {
	if m != nil {
		return m.FilterModemNumbers
	}
	return nil
}

func (m *CreateMQTTPublisherRequest) GetFilterTags() *Filter_Tags {
	if m != nil {
		return m.FilterTags
	}
	return nil
}

func (m *CreateMQTTPublisherRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CreateMQTTPublisherRequest) GetContentType() MQTTPublisher_ContentType {
	if m != nil {
		return m.ContentType
	}
	return MQTTPublisher_DEFAULT
}

func (m *CreateMQTTPublisherRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *CreateMQTTPublisherRequest) GetQos() MQTTPublisher_Data_QoS {
	if m != nil {
		return m.Qos
	}
	return MQTTPublisher_Data_DEFAULT
}

func (m *CreateMQTTPublisherRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *CreateMQTTPublisherRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CreateMQTTPublisherRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateMQTTPublisherRequest) GetCertificateId() int64 {
	if m != nil {
		return m.CertificateId
	}
	return 0
}

func (m *CreateMQTTPublisherRequest) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *CreateMQTTPublisherRequest) GetTags() []int64 {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Enable a disabled publisher or re-enable a publisher that's failed and is in cooldown.
type EnableMQTTPublisherRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                  `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *MQTTPublisherSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
}

func (m *EnableMQTTPublisherRequest) Reset()                    { *m = EnableMQTTPublisherRequest{} }
func (m *EnableMQTTPublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*EnableMQTTPublisherRequest) ProtoMessage()               {}
func (*EnableMQTTPublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{7} }

func (m *EnableMQTTPublisherRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *EnableMQTTPublisherRequest) GetSelection() *MQTTPublisherSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

type EnableMQTTPublisherRequest_Response struct {
	Publishers []*MQTTPublisher            `protobuf:"bytes,1,rep,name=publishers" json:"publishers,omitempty"`
	Request    *EnableMQTTPublisherRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *EnableMQTTPublisherRequest_Response) Reset()         { *m = EnableMQTTPublisherRequest_Response{} }
func (m *EnableMQTTPublisherRequest_Response) String() string { return proto.CompactTextString(m) }
func (*EnableMQTTPublisherRequest_Response) ProtoMessage()    {}
func (*EnableMQTTPublisherRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor7, []int{7, 0}
}

func (m *EnableMQTTPublisherRequest_Response) GetPublishers() []*MQTTPublisher {
	if m != nil {
		return m.Publishers
	}
	return nil
}

func (m *EnableMQTTPublisherRequest_Response) GetRequest() *EnableMQTTPublisherRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type DisableMQTTPublisherRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                  `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *MQTTPublisherSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
}

func (m *DisableMQTTPublisherRequest) Reset()                    { *m = DisableMQTTPublisherRequest{} }
func (m *DisableMQTTPublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*DisableMQTTPublisherRequest) ProtoMessage()               {}
func (*DisableMQTTPublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{8} }

func (m *DisableMQTTPublisherRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *DisableMQTTPublisherRequest) GetSelection() *MQTTPublisherSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

type DisableMQTTPublisherRequest_Response struct {
	Publishers []*MQTTPublisher             `protobuf:"bytes,1,rep,name=publishers" json:"publishers,omitempty"`
	Request    *DisableMQTTPublisherRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *DisableMQTTPublisherRequest_Response) Reset()         { *m = DisableMQTTPublisherRequest_Response{} }
func (m *DisableMQTTPublisherRequest_Response) String() string { return proto.CompactTextString(m) }
func (*DisableMQTTPublisherRequest_Response) ProtoMessage()    {}
func (*DisableMQTTPublisherRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor7, []int{8, 0}
}

func (m *DisableMQTTPublisherRequest_Response) GetPublishers() []*MQTTPublisher {
	if m != nil {
		return m.Publishers
	}
	return nil
}

func (m *DisableMQTTPublisherRequest_Response) GetRequest() *DisableMQTTPublisherRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type UpdateMQTTPublisherRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization       string                 `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Id                 int64                  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	FilterEventTypes   *Filter_Events_Update  `protobuf:"bytes,3,opt,name=filter_event_types,json=filterEventTypes" json:"filter_event_types,omitempty"`
	FilterModemNumbers *Filter_Modems_Update  `protobuf:"bytes,4,opt,name=filter_modem_numbers,json=filterModemNumbers" json:"filter_modem_numbers,omitempty"`
	FilterTags         *Filter_Tags_Update    `protobuf:"bytes,5,opt,name=filter_tags,json=filterTags" json:"filter_tags,omitempty"`
	Description        *UpdateClearableString `protobuf:"bytes,10,opt,name=description" json:"description,omitempty"`
	// The url of an MQTT server to send the events to, i.e. mqtt[s]://example.com:8883
	Url         string                    `protobuf:"bytes,11,opt,name=url" json:"url,omitempty"`
	ContentType MQTTPublisher_ContentType `protobuf:"varint,12,opt,name=content_type,json=contentType,enum=hiber.integration.mqtt.MQTTPublisher_ContentType" json:"content_type,omitempty"`
	// The MQTT topic to send to on the receiving server.
	Topic string `protobuf:"bytes,13,opt,name=topic" json:"topic,omitempty"`
	// MQTT QoS value.
	Qos MQTTPublisher_Data_QoS `protobuf:"varint,14,opt,name=qos,enum=hiber.integration.mqtt.MQTTPublisher_Data_QoS" json:"qos,omitempty"`
	// Identifier used by the MQTT client. Defaults to "hiber".
	Identifier *UpdateClearableString `protobuf:"bytes,15,opt,name=identifier" json:"identifier,omitempty"`
	// Optional username to authenticate with.
	Username *UpdateClearableString `protobuf:"bytes,16,opt,name=username" json:"username,omitempty"`
	// Optional password to authenticate with. Requires username to be set.
	Password      *UpdateClearableString `protobuf:"bytes,17,opt,name=password" json:"password,omitempty"`
	CertificateId *UpdateOptionalId      `protobuf:"bytes,18,opt,name=certificate_id,json=certificateId" json:"certificate_id,omitempty"`
	// Disable the MQTT publisher, so it needs to be enabled again before it is active.
	Active *UpdateBoolean `protobuf:"bytes,19,opt,name=active" json:"active,omitempty"`
}

func (m *UpdateMQTTPublisherRequest) Reset()                    { *m = UpdateMQTTPublisherRequest{} }
func (m *UpdateMQTTPublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateMQTTPublisherRequest) ProtoMessage()               {}
func (*UpdateMQTTPublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{9} }

func (m *UpdateMQTTPublisherRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UpdateMQTTPublisherRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateMQTTPublisherRequest) GetFilterEventTypes() *Filter_Events_Update {
	if m != nil {
		return m.FilterEventTypes
	}
	return nil
}

func (m *UpdateMQTTPublisherRequest) GetFilterModemNumbers() *Filter_Modems_Update {
	if m != nil {
		return m.FilterModemNumbers
	}
	return nil
}

func (m *UpdateMQTTPublisherRequest) GetFilterTags() *Filter_Tags_Update {
	if m != nil {
		return m.FilterTags
	}
	return nil
}

func (m *UpdateMQTTPublisherRequest) GetDescription() *UpdateClearableString {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *UpdateMQTTPublisherRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *UpdateMQTTPublisherRequest) GetContentType() MQTTPublisher_ContentType {
	if m != nil {
		return m.ContentType
	}
	return MQTTPublisher_DEFAULT
}

func (m *UpdateMQTTPublisherRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *UpdateMQTTPublisherRequest) GetQos() MQTTPublisher_Data_QoS {
	if m != nil {
		return m.Qos
	}
	return MQTTPublisher_Data_DEFAULT
}

func (m *UpdateMQTTPublisherRequest) GetIdentifier() *UpdateClearableString {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *UpdateMQTTPublisherRequest) GetUsername() *UpdateClearableString {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *UpdateMQTTPublisherRequest) GetPassword() *UpdateClearableString {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *UpdateMQTTPublisherRequest) GetCertificateId() *UpdateOptionalId {
	if m != nil {
		return m.CertificateId
	}
	return nil
}

func (m *UpdateMQTTPublisherRequest) GetActive() *UpdateBoolean {
	if m != nil {
		return m.Active
	}
	return nil
}

type UpdateMQTTPublisherTagsRequest struct {
	Organization string                  `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *MQTTPublisherSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Update       *UpdateTagsForItem      `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
}

func (m *UpdateMQTTPublisherTagsRequest) Reset()                    { *m = UpdateMQTTPublisherTagsRequest{} }
func (m *UpdateMQTTPublisherTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateMQTTPublisherTagsRequest) ProtoMessage()               {}
func (*UpdateMQTTPublisherTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{10} }

func (m *UpdateMQTTPublisherTagsRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UpdateMQTTPublisherTagsRequest) GetSelection() *MQTTPublisherSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *UpdateMQTTPublisherTagsRequest) GetUpdate() *UpdateTagsForItem {
	if m != nil {
		return m.Update
	}
	return nil
}

type UpdateMQTTPublisherTagsRequest_Response struct {
	MqttPublishers []*MQTTPublisher `protobuf:"bytes,1,rep,name=mqtt_publishers,json=mqttPublishers" json:"mqtt_publishers,omitempty"`
}

func (m *UpdateMQTTPublisherTagsRequest_Response) Reset() {
	*m = UpdateMQTTPublisherTagsRequest_Response{}
}
func (m *UpdateMQTTPublisherTagsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*UpdateMQTTPublisherTagsRequest_Response) ProtoMessage()    {}
func (*UpdateMQTTPublisherTagsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor7, []int{10, 0}
}

func (m *UpdateMQTTPublisherTagsRequest_Response) GetMqttPublishers() []*MQTTPublisher {
	if m != nil {
		return m.MqttPublishers
	}
	return nil
}

type DeleteMQTTPublisherRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Id           int64  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteMQTTPublisherRequest) Reset()                    { *m = DeleteMQTTPublisherRequest{} }
func (m *DeleteMQTTPublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteMQTTPublisherRequest) ProtoMessage()               {}
func (*DeleteMQTTPublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{11} }

func (m *DeleteMQTTPublisherRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *DeleteMQTTPublisherRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteMQTTPublisherRequest_Response struct {
}

func (m *DeleteMQTTPublisherRequest_Response) Reset()         { *m = DeleteMQTTPublisherRequest_Response{} }
func (m *DeleteMQTTPublisherRequest_Response) String() string { return proto.CompactTextString(m) }
func (*DeleteMQTTPublisherRequest_Response) ProtoMessage()    {}
func (*DeleteMQTTPublisherRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor7, []int{11, 0}
}

func init() {
	proto.RegisterType((*MQTTPublisher)(nil), "hiber.integration.mqtt.MQTTPublisher")
	proto.RegisterType((*MQTTPublisher_Data)(nil), "hiber.integration.mqtt.MQTTPublisher.Data")
	proto.RegisterType((*MQTTMessage)(nil), "hiber.integration.mqtt.MQTTMessage")
	proto.RegisterType((*MQTTPublisherSelection)(nil), "hiber.integration.mqtt.MQTTPublisherSelection")
	proto.RegisterType((*ListMQTTPublishersRequest)(nil), "hiber.integration.mqtt.ListMQTTPublishersRequest")
	proto.RegisterType((*ListMQTTPublishersRequest_Response)(nil), "hiber.integration.mqtt.ListMQTTPublishersRequest.Response")
	proto.RegisterType((*MQTTPublisherHistorySelection)(nil), "hiber.integration.mqtt.MQTTPublisherHistorySelection")
	proto.RegisterType((*MQTTPublisherHistoryRequest)(nil), "hiber.integration.mqtt.MQTTPublisherHistoryRequest")
	proto.RegisterType((*MQTTPublisherHistoryRequest_Response)(nil), "hiber.integration.mqtt.MQTTPublisherHistoryRequest.Response")
	proto.RegisterType((*CreateMQTTPublisherRequest)(nil), "hiber.integration.mqtt.CreateMQTTPublisherRequest")
	proto.RegisterType((*EnableMQTTPublisherRequest)(nil), "hiber.integration.mqtt.EnableMQTTPublisherRequest")
	proto.RegisterType((*EnableMQTTPublisherRequest_Response)(nil), "hiber.integration.mqtt.EnableMQTTPublisherRequest.Response")
	proto.RegisterType((*DisableMQTTPublisherRequest)(nil), "hiber.integration.mqtt.DisableMQTTPublisherRequest")
	proto.RegisterType((*DisableMQTTPublisherRequest_Response)(nil), "hiber.integration.mqtt.DisableMQTTPublisherRequest.Response")
	proto.RegisterType((*UpdateMQTTPublisherRequest)(nil), "hiber.integration.mqtt.UpdateMQTTPublisherRequest")
	proto.RegisterType((*UpdateMQTTPublisherTagsRequest)(nil), "hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest")
	proto.RegisterType((*UpdateMQTTPublisherTagsRequest_Response)(nil), "hiber.integration.mqtt.UpdateMQTTPublisherTagsRequest.Response")
	proto.RegisterType((*DeleteMQTTPublisherRequest)(nil), "hiber.integration.mqtt.DeleteMQTTPublisherRequest")
	proto.RegisterType((*DeleteMQTTPublisherRequest_Response)(nil), "hiber.integration.mqtt.DeleteMQTTPublisherRequest.Response")
	proto.RegisterEnum("hiber.integration.mqtt.MQTTPublisher_ContentType", MQTTPublisher_ContentType_name, MQTTPublisher_ContentType_value)
	proto.RegisterEnum("hiber.integration.mqtt.MQTTPublisher_Data_QoS", MQTTPublisher_Data_QoS_name, MQTTPublisher_Data_QoS_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MQTTService service

type MQTTServiceClient interface {
	List(ctx context.Context, in *ListMQTTPublishersRequest, opts ...grpc.CallOption) (*ListMQTTPublishersRequest_Response, error)
	Create(ctx context.Context, in *CreateMQTTPublisherRequest, opts ...grpc.CallOption) (*MQTTPublisher, error)
	Update(ctx context.Context, in *UpdateMQTTPublisherRequest, opts ...grpc.CallOption) (*MQTTPublisher, error)
	UpdateTags(ctx context.Context, in *UpdateMQTTPublisherTagsRequest, opts ...grpc.CallOption) (*UpdateMQTTPublisherTagsRequest_Response, error)
	Enable(ctx context.Context, in *EnableMQTTPublisherRequest, opts ...grpc.CallOption) (*EnableMQTTPublisherRequest_Response, error)
	Disable(ctx context.Context, in *DisableMQTTPublisherRequest, opts ...grpc.CallOption) (*DisableMQTTPublisherRequest_Response, error)
	Delete(ctx context.Context, in *DeleteMQTTPublisherRequest, opts ...grpc.CallOption) (*DeleteMQTTPublisherRequest_Response, error)
	History(ctx context.Context, in *MQTTPublisherHistoryRequest, opts ...grpc.CallOption) (*MQTTPublisherHistoryRequest_Response, error)
}

type mQTTServiceClient struct {
	cc *grpc.ClientConn
}

func NewMQTTServiceClient(cc *grpc.ClientConn) MQTTServiceClient {
	return &mQTTServiceClient{cc}
}

func (c *mQTTServiceClient) List(ctx context.Context, in *ListMQTTPublishersRequest, opts ...grpc.CallOption) (*ListMQTTPublishersRequest_Response, error) {
	out := new(ListMQTTPublishersRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.integration.mqtt.MQTTService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQTTServiceClient) Create(ctx context.Context, in *CreateMQTTPublisherRequest, opts ...grpc.CallOption) (*MQTTPublisher, error) {
	out := new(MQTTPublisher)
	err := grpc.Invoke(ctx, "/hiber.integration.mqtt.MQTTService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQTTServiceClient) Update(ctx context.Context, in *UpdateMQTTPublisherRequest, opts ...grpc.CallOption) (*MQTTPublisher, error) {
	out := new(MQTTPublisher)
	err := grpc.Invoke(ctx, "/hiber.integration.mqtt.MQTTService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQTTServiceClient) UpdateTags(ctx context.Context, in *UpdateMQTTPublisherTagsRequest, opts ...grpc.CallOption) (*UpdateMQTTPublisherTagsRequest_Response, error) {
	out := new(UpdateMQTTPublisherTagsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.integration.mqtt.MQTTService/UpdateTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQTTServiceClient) Enable(ctx context.Context, in *EnableMQTTPublisherRequest, opts ...grpc.CallOption) (*EnableMQTTPublisherRequest_Response, error) {
	out := new(EnableMQTTPublisherRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.integration.mqtt.MQTTService/Enable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQTTServiceClient) Disable(ctx context.Context, in *DisableMQTTPublisherRequest, opts ...grpc.CallOption) (*DisableMQTTPublisherRequest_Response, error) {
	out := new(DisableMQTTPublisherRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.integration.mqtt.MQTTService/Disable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQTTServiceClient) Delete(ctx context.Context, in *DeleteMQTTPublisherRequest, opts ...grpc.CallOption) (*DeleteMQTTPublisherRequest_Response, error) {
	out := new(DeleteMQTTPublisherRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.integration.mqtt.MQTTService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQTTServiceClient) History(ctx context.Context, in *MQTTPublisherHistoryRequest, opts ...grpc.CallOption) (*MQTTPublisherHistoryRequest_Response, error) {
	out := new(MQTTPublisherHistoryRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.integration.mqtt.MQTTService/History", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MQTTService service

type MQTTServiceServer interface {
	List(context.Context, *ListMQTTPublishersRequest) (*ListMQTTPublishersRequest_Response, error)
	Create(context.Context, *CreateMQTTPublisherRequest) (*MQTTPublisher, error)
	Update(context.Context, *UpdateMQTTPublisherRequest) (*MQTTPublisher, error)
	UpdateTags(context.Context, *UpdateMQTTPublisherTagsRequest) (*UpdateMQTTPublisherTagsRequest_Response, error)
	Enable(context.Context, *EnableMQTTPublisherRequest) (*EnableMQTTPublisherRequest_Response, error)
	Disable(context.Context, *DisableMQTTPublisherRequest) (*DisableMQTTPublisherRequest_Response, error)
	Delete(context.Context, *DeleteMQTTPublisherRequest) (*DeleteMQTTPublisherRequest_Response, error)
	History(context.Context, *MQTTPublisherHistoryRequest) (*MQTTPublisherHistoryRequest_Response, error)
}

func RegisterMQTTServiceServer(s *grpc.Server, srv MQTTServiceServer) {
	s.RegisterService(&_MQTTService_serviceDesc, srv)
}

func _MQTTService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMQTTPublishersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQTTServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.integration.mqtt.MQTTService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQTTServiceServer).List(ctx, req.(*ListMQTTPublishersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQTTService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMQTTPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQTTServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.integration.mqtt.MQTTService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQTTServiceServer).Create(ctx, req.(*CreateMQTTPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQTTService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMQTTPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQTTServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.integration.mqtt.MQTTService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQTTServiceServer).Update(ctx, req.(*UpdateMQTTPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQTTService_UpdateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMQTTPublisherTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQTTServiceServer).UpdateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.integration.mqtt.MQTTService/UpdateTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQTTServiceServer).UpdateTags(ctx, req.(*UpdateMQTTPublisherTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQTTService_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableMQTTPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQTTServiceServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.integration.mqtt.MQTTService/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQTTServiceServer).Enable(ctx, req.(*EnableMQTTPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQTTService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableMQTTPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQTTServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.integration.mqtt.MQTTService/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQTTServiceServer).Disable(ctx, req.(*DisableMQTTPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQTTService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMQTTPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQTTServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.integration.mqtt.MQTTService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQTTServiceServer).Delete(ctx, req.(*DeleteMQTTPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQTTService_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MQTTPublisherHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQTTServiceServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.integration.mqtt.MQTTService/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQTTServiceServer).History(ctx, req.(*MQTTPublisherHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MQTTService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.integration.mqtt.MQTTService",
	HandlerType: (*MQTTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _MQTTService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MQTTService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MQTTService_Update_Handler,
		},
		{
			MethodName: "UpdateTags",
			Handler:    _MQTTService_UpdateTags_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _MQTTService_Enable_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _MQTTService_Disable_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MQTTService_Delete_Handler,
		},
		{
			MethodName: "History",
			Handler:    _MQTTService_History_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integration_mqtt.proto",
}

func init() { proto.RegisterFile("integration_mqtt.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 1602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x49, 0x6f, 0x1b, 0x47,
	0x16, 0x36, 0x17, 0x71, 0x79, 0x5c, 0x44, 0x95, 0x05, 0x0f, 0xdd, 0xb2, 0x3d, 0x1a, 0x7a, 0x3c,
	0xa3, 0xb1, 0x07, 0x14, 0x4c, 0xcf, 0x0c, 0x3c, 0x1e, 0xc3, 0x13, 0x2d, 0x14, 0xac, 0x44, 0x6b,
	0x91, 0x0e, 0x12, 0x23, 0x00, 0x51, 0x6c, 0x96, 0xa8, 0x06, 0x9a, 0xdd, 0x74, 0x57, 0xd1, 0x89,
	0x82, 0x5c, 0x73, 0xca, 0x2d, 0xd7, 0x1c, 0x92, 0x43, 0x4e, 0x39, 0x05, 0xc9, 0x7f, 0x08, 0x72,
	0xca, 0x39, 0x7f, 0x21, 0xf7, 0xfc, 0x80, 0xa0, 0x16, 0x92, 0xdd, 0x54, 0xb7, 0x4c, 0xd2, 0x32,
	0x92, 0x1b, 0xeb, 0xd5, 0xdb, 0x97, 0xaf, 0x5e, 0x4b, 0x70, 0xcd, 0x72, 0x38, 0xed, 0x7a, 0x84,
	0x5b, 0xae, 0xd3, 0xea, 0xbd, 0xe0, 0xbc, 0xda, 0xf7, 0x5c, 0xee, 0xa2, 0x6b, 0xa7, 0x56, 0x9b,
	0x7a, 0x55, 0xdf, 0x6d, 0x55, 0xdc, 0x1a, 0xd0, 0x26, 0x8c, 0x2a, 0x1e, 0x23, 0xcb, 0x49, 0x57,
	0xff, 0xfc, 0x73, 0xd7, 0x75, 0xbb, 0x36, 0x5d, 0x97, 0xa7, 0xf6, 0xe0, 0x64, 0x9d, 0x5b, 0x3d,
	0xca, 0x38, 0xe9, 0xf5, 0x15, 0x43, 0xe5, 0xd7, 0x34, 0x14, 0xf6, 0x8f, 0x9b, 0xcd, 0xa3, 0x41,
	0xdb, 0xb6, 0xd8, 0x29, 0xf5, 0x50, 0x11, 0xe2, 0x56, 0xa7, 0x1c, 0x5b, 0x8d, 0xad, 0x25, 0x70,
	0xdc, 0xea, 0xa0, 0x55, 0xc8, 0x75, 0x28, 0x33, 0x3d, 0xab, 0x2f, 0xac, 0x95, 0xe3, 0xab, 0xb1,
	0xb5, 0x2c, 0xf6, 0x93, 0xd0, 0x13, 0x48, 0x76, 0x08, 0x27, 0xe5, 0xc4, 0x6a, 0x6c, 0x2d, 0x57,
	0xbb, 0x5b, 0x0d, 0x77, 0xb1, 0x1a, 0x30, 0x53, 0xdd, 0x26, 0x9c, 0x60, 0x29, 0x87, 0x36, 0x01,
	0x9d, 0x58, 0x36, 0xa7, 0x5e, 0x8b, 0xbe, 0xa4, 0x0e, 0x6f, 0xf1, 0xb3, 0x3e, 0x65, 0xe5, 0xa4,
	0xd4, 0xb6, 0xac, 0xb5, 0xed, 0x48, 0x86, 0x6a, 0x5d, 0x30, 0x30, 0x5c, 0x52, 0xfc, 0xf2, 0xd4,
	0x14, 0xdc, 0x68, 0x07, 0x96, 0xb5, 0x8e, 0x9e, 0xdb, 0xa1, 0xbd, 0x96, 0x33, 0xe8, 0xb5, 0xa9,
	0xc7, 0xca, 0x0b, 0x61, 0x5a, 0xf6, 0x05, 0x0b, 0xc3, 0xda, 0xaa, 0x3c, 0x1d, 0x28, 0x7e, 0xf4,
	0x00, 0x72, 0x5a, 0x0f, 0x27, 0x5d, 0x56, 0x4e, 0x49, 0x71, 0x14, 0x14, 0x6f, 0x92, 0x2e, 0xc3,
	0xa0, 0xd8, 0xc4, 0x6f, 0x74, 0x07, 0x52, 0xa7, 0x94, 0xd8, 0xfc, 0xb4, 0x9c, 0x5e, 0x8d, 0xad,
	0x15, 0x6b, 0x05, 0xcd, 0xff, 0x54, 0x12, 0xb1, 0xbe, 0x44, 0x15, 0x48, 0x4a, 0xa5, 0x99, 0xd5,
	0xc4, 0x5a, 0xae, 0x56, 0xd4, 0x4c, 0xa2, 0x58, 0x4d, 0xd2, 0xc5, 0xf2, 0xce, 0xf8, 0x3e, 0x09,
	0x49, 0x91, 0x1a, 0x54, 0x82, 0xc4, 0xc0, 0xb3, 0x65, 0x1d, 0xb2, 0x58, 0xfc, 0x44, 0x4d, 0xc8,
	0x9b, 0xae, 0xc3, 0x87, 0x19, 0x92, 0x95, 0x28, 0xd6, 0xee, 0x4f, 0x97, 0xee, 0x2d, 0x25, 0x29,
	0x92, 0x85, 0x73, 0xe6, 0xf8, 0x80, 0x96, 0x61, 0x81, 0xbb, 0x7d, 0xcb, 0x94, 0xd5, 0xcb, 0x62,
	0x75, 0x40, 0x6f, 0x41, 0xe2, 0x85, 0xab, 0x6a, 0x50, 0xac, 0x55, 0xa7, 0xaf, 0x68, 0xf5, 0xd8,
	0x6d, 0x60, 0x21, 0x8a, 0x6e, 0x01, 0x58, 0x1d, 0xea, 0x70, 0xeb, 0xc4, 0xa2, 0x9e, 0x2c, 0x43,
	0x16, 0xfb, 0x28, 0xc8, 0x80, 0xcc, 0x80, 0x51, 0xcf, 0x21, 0x3d, 0x2a, 0xb3, 0x9c, 0xc5, 0xa3,
	0xb3, 0xb8, 0xeb, 0x13, 0xc6, 0x3e, 0x74, 0xbd, 0x8e, 0xcc, 0x68, 0x16, 0x8f, 0xce, 0xe8, 0x0e,
	0x14, 0x4d, 0xea, 0x09, 0x25, 0x26, 0xe1, 0xb4, 0x65, 0x75, 0xca, 0x19, 0xd9, 0xaa, 0x05, 0x1f,
	0x75, 0xb7, 0x83, 0xfe, 0x01, 0x25, 0x3f, 0x9b, 0x34, 0x03, 0x52, 0xd5, 0xa2, 0x8f, 0x7e, 0x20,
	0xac, 0xdd, 0x85, 0x25, 0x93, 0xb4, 0x26, 0x94, 0xe6, 0xa4, 0xd2, 0x45, 0x93, 0x6c, 0x05, 0xd4,
	0x56, 0xe1, 0xea, 0x04, 0xaf, 0xd4, 0x9c, 0x97, 0x9a, 0x97, 0x02, 0xdc, 0x07, 0x3a, 0x92, 0x8e,
	0xc5, 0x48, 0xdb, 0xa6, 0x9d, 0x72, 0x76, 0x35, 0xb6, 0x96, 0xc1, 0xa3, 0x73, 0x65, 0x17, 0x12,
	0xc7, 0x6e, 0x03, 0xe5, 0x20, 0xbd, 0x5d, 0xdf, 0xd9, 0x78, 0xb6, 0xd7, 0x2c, 0x5d, 0x41, 0x25,
	0xc8, 0x6f, 0x34, 0x5b, 0xfb, 0x87, 0x8d, 0x66, 0xeb, 0xf0, 0x60, 0xab, 0x5e, 0x8a, 0xa1, 0x25,
	0x28, 0x6c, 0x34, 0x5b, 0x7b, 0xf5, 0x8d, 0x21, 0x29, 0x2e, 0x98, 0xea, 0xef, 0x6d, 0x6c, 0x35,
	0xf7, 0xde, 0x57, 0x94, 0x44, 0x65, 0x1d, 0x72, 0xbe, 0x02, 0x07, 0x55, 0x66, 0x20, 0xf9, 0x76,
	0xe3, 0xf0, 0xa0, 0x14, 0x43, 0x59, 0x58, 0x38, 0xc2, 0x87, 0xcd, 0xc3, 0x52, 0xbc, 0xf2, 0x4b,
	0x0c, 0x72, 0xa2, 0x7a, 0xfb, 0x94, 0x31, 0xd2, 0xa5, 0xe8, 0xaf, 0x90, 0x14, 0xc8, 0x20, 0xdb,
	0x2d, 0x57, 0x2b, 0xe9, 0x82, 0x37, 0x87, 0x60, 0x81, 0xe5, 0x2d, 0x3a, 0x86, 0x62, 0x7f, 0x58,
	0xee, 0x96, 0x1c, 0xf9, 0xf8, 0xcc, 0x23, 0x5f, 0x18, 0x69, 0x90, 0x6d, 0x7e, 0x0f, 0xd2, 0x3d,
	0xe5, 0x83, 0x86, 0x8f, 0x25, 0xad, 0x6b, 0xf3, 0x8c, 0x53, 0x76, 0xe8, 0x3d, 0xa5, 0x1f, 0xe1,
	0x21, 0x87, 0xe8, 0x29, 0x36, 0x30, 0x4d, 0xca, 0xd8, 0xc9, 0xc0, 0x96, 0xcd, 0x99, 0xc1, 0x3e,
	0x8a, 0xe8, 0x65, 0xea, 0x79, 0xee, 0xb0, 0xdd, 0xd4, 0xa1, 0xf2, 0x59, 0x02, 0xae, 0x05, 0x1c,
	0x69, 0x50, 0x9b, 0x9a, 0x12, 0xb9, 0x1e, 0x02, 0x8c, 0xdc, 0x61, 0x3a, 0xf8, 0x72, 0x70, 0xd8,
	0x47, 0x52, 0x0c, 0xfb, 0x78, 0xa7, 0x40, 0xc5, 0x9b, 0x00, 0x8c, 0x12, 0xcf, 0x3c, 0x6d, 0x89,
	0x39, 0x56, 0xd3, 0x95, 0x55, 0x94, 0x67, 0x9e, 0x8d, 0xfe, 0x02, 0x79, 0x7d, 0xad, 0xc6, 0x2f,
	0xa9, 0x34, 0x28, 0x5a, 0x53, 0x0e, 0xe1, 0xbb, 0x50, 0xf0, 0x0f, 0xbc, 0x00, 0xb3, 0xc4, 0x7c,
	0x13, 0x9f, 0xf7, 0x4d, 0x3c, 0x43, 0x7f, 0x87, 0xc5, 0x60, 0xb7, 0x0b, 0x9c, 0x4b, 0xac, 0x25,
	0x70, 0x31, 0x30, 0x43, 0x0c, 0xdd, 0xd3, 0x80, 0x95, 0x96, 0x89, 0xf9, 0x53, 0x10, 0xb0, 0x46,
	0x59, 0x54, 0xc8, 0xe5, 0x03, 0xc1, 0x8c, 0x74, 0x33, 0x1c, 0x04, 0x2b, 0x5f, 0x24, 0xe0, 0xfa,
	0x9e, 0xc5, 0x78, 0xc0, 0x59, 0x86, 0xe9, 0x8b, 0x01, 0x65, 0x1c, 0x55, 0x20, 0xef, 0x7a, 0x5d,
	0xe2, 0x58, 0x1f, 0xcb, 0xb8, 0x34, 0xfc, 0x05, 0x68, 0x68, 0x0f, 0xb2, 0x6c, 0x68, 0x5b, 0x37,
	0xe0, 0x74, 0x08, 0x35, 0xf6, 0x78, 0xac, 0x00, 0xdd, 0x07, 0xe8, 0x93, 0xae, 0xe5, 0x28, 0x7b,
	0xc1, 0x1e, 0x3c, 0x1a, 0x5d, 0x60, 0x1f, 0x93, 0xf1, 0x73, 0x0c, 0x32, 0x98, 0xb2, 0xbe, 0xeb,
	0x30, 0x8a, 0xea, 0x13, 0x2d, 0x24, 0xa0, 0xfd, 0xce, 0x54, 0xee, 0x04, 0xfa, 0xe9, 0x1d, 0x48,
	0x7b, 0x2a, 0x07, 0x3a, 0xa4, 0xc8, 0x2a, 0x47, 0x26, 0x0f, 0x0f, 0x35, 0xc8, 0xb6, 0x9e, 0x8c,
	0xa9, 0x7c, 0x2e, 0xa6, 0x2a, 0xa6, 0x6c, 0x60, 0x73, 0x7f, 0x68, 0x95, 0x01, 0xdc, 0x0c, 0xe8,
	0x7e, 0x6a, 0x31, 0xee, 0x7a, 0x67, 0xe3, 0x89, 0x59, 0x07, 0x10, 0x50, 0xd0, 0xf2, 0x88, 0xd3,
	0x0d, 0x83, 0x0b, 0x2c, 0xe8, 0x38, 0xcb, 0x87, 0x3f, 0xd1, 0x6d, 0x28, 0xb8, 0x8e, 0x7d, 0xd6,
	0x3a, 0x21, 0x96, 0x3d, 0xf0, 0x28, 0x93, 0xe1, 0x65, 0x70, 0x5e, 0x10, 0x77, 0x34, 0xad, 0xf2,
	0x4d, 0x02, 0x56, 0xc2, 0xec, 0xce, 0xd2, 0x16, 0x6a, 0x6f, 0x89, 0x8f, 0xf6, 0x96, 0x86, 0xbf,
	0x4d, 0x54, 0x0e, 0xfe, 0x3d, 0x55, 0x5d, 0x26, 0x63, 0x8e, 0xee, 0x96, 0xe4, 0x34, 0xdd, 0xf2,
	0x93, 0xbf, 0x5b, 0xfe, 0x0b, 0x0b, 0x16, 0xa7, 0xbd, 0x61, 0xa3, 0xdc, 0xbe, 0xc8, 0x21, 0x8d,
	0xcd, 0x58, 0x49, 0xa0, 0xfd, 0xc9, 0x0e, 0x79, 0x30, 0x4b, 0x34, 0x97, 0xd8, 0x23, 0x9f, 0x2f,
	0x80, 0xb1, 0xe5, 0x51, 0xc2, 0x69, 0xb0, 0x9d, 0x67, 0xa8, 0xd5, 0xab, 0xd1, 0x33, 0x7c, 0x27,
	0x4c, 0x5c, 0xca, 0x4e, 0x98, 0x7c, 0xbd, 0x9d, 0x70, 0x61, 0xaa, 0x9d, 0x50, 0xef, 0x6f, 0x10,
	0xbd, 0xbf, 0xe5, 0x2e, 0x77, 0x7f, 0xcb, 0x87, 0xec, 0x6f, 0x85, 0xcb, 0xda, 0xdf, 0x8a, 0x17,
	0xee, 0x6f, 0x8b, 0x17, 0xec, 0x6f, 0xa5, 0x57, 0xee, 0x6f, 0x4b, 0x61, 0xfb, 0x9b, 0x7f, 0x71,
	0x42, 0xc1, 0xc5, 0x09, 0x21, 0xfd, 0x2c, 0x2d, 0xcb, 0x47, 0x4b, 0xfe, 0xae, 0x7c, 0x1b, 0x07,
	0xa3, 0xee, 0x88, 0xfb, 0xb9, 0x9b, 0xf2, 0x52, 0xdf, 0x15, 0xe3, 0xcb, 0x37, 0xf0, 0x48, 0xec,
	0x4d, 0x42, 0x40, 0x2d, 0x4a, 0x47, 0x74, 0x2a, 0x46, 0x08, 0x50, 0xf9, 0x2e, 0x0e, 0x2b, 0xdb,
	0x2a, 0xa7, 0x7f, 0x90, 0x9c, 0x7d, 0xf5, 0x06, 0x72, 0x36, 0x3d, 0x6c, 0x5e, 0x90, 0x8b, 0x71,
	0xd2, 0x7e, 0x48, 0x81, 0xf1, 0xac, 0xdf, 0x79, 0x1d, 0xf0, 0x9b, 0x7c, 0xa8, 0x76, 0x2f, 0x80,
	0xba, 0x95, 0x30, 0xa8, 0xab, 0x2a, 0x07, 0x42, 0x10, 0x6f, 0xff, 0x42, 0xc4, 0x5b, 0x09, 0x43,
	0xbc, 0xa1, 0xb2, 0x30, 0xe0, 0x7b, 0x14, 0x06, 0x7c, 0xd7, 0xcf, 0x03, 0xdf, 0x50, 0x87, 0x1f,
	0xff, 0x9e, 0x04, 0x21, 0x1e, 0xa4, 0xec, 0x0d, 0x2d, 0xab, 0xf8, 0xb7, 0x6c, 0x4a, 0x3c, 0x91,
	0xf2, 0x06, 0xf7, 0x2c, 0xa7, 0x1b, 0x7c, 0x00, 0x34, 0x7e, 0xe6, 0xa2, 0xf1, 0x33, 0x7f, 0xb9,
	0xf8, 0x59, 0x08, 0xc1, 0xcf, 0xe2, 0xfc, 0xf8, 0xf9, 0x38, 0x80, 0x9f, 0x8b, 0x53, 0x84, 0xef,
	0x47, 0xd7, 0x87, 0x3e, 0x74, 0x2d, 0x4d, 0x21, 0x3b, 0xc6, 0xde, 0x87, 0x3e, 0xec, 0x5d, 0x9a,
	0x46, 0x72, 0x84, 0xcc, 0x4f, 0xce, 0x21, 0x33, 0x0a, 0xec, 0xfd, 0x4a, 0xfe, 0x50, 0x96, 0x87,
	0xd8, 0xbb, 0x9d, 0x49, 0xc8, 0xfe, 0x27, 0xa4, 0x88, 0xc9, 0xad, 0x97, 0xb4, 0x7c, 0x35, 0xf0,
	0xc0, 0x2a, 0xb9, 0x4d, 0xd7, 0xb5, 0x29, 0x71, 0xb0, 0xe6, 0xa9, 0x7c, 0x1d, 0x87, 0x5b, 0x21,
	0x83, 0x24, 0xdf, 0xd1, 0xdf, 0xed, 0x63, 0xe0, 0x5f, 0x90, 0x1a, 0x48, 0x9f, 0xf4, 0xf8, 0xdd,
	0xf0, 0x7d, 0xf2, 0x28, 0x67, 0x85, 0x7f, 0x3b, 0xae, 0xb7, 0xcb, 0x69, 0x0f, 0x6b, 0x5e, 0xe3,
	0xb9, 0x0f, 0xb5, 0x0e, 0x60, 0x51, 0xd8, 0x6a, 0xcd, 0x0b, 0x5d, 0x45, 0x41, 0x1b, 0xaf, 0xf6,
	0x95, 0x0f, 0xc0, 0xd8, 0xa6, 0x36, 0xbd, 0x3c, 0xb8, 0x31, 0x60, 0xec, 0x6d, 0xed, 0xc7, 0xb4,
	0xfa, 0x33, 0x40, 0x83, 0x7a, 0x2f, 0x2d, 0x93, 0xa2, 0x01, 0x24, 0xc5, 0xe7, 0x05, 0x9a, 0xfd,
	0xe3, 0xc3, 0x78, 0x34, 0xb3, 0x48, 0x75, 0x94, 0x34, 0x13, 0x52, 0x6a, 0xa1, 0x44, 0x91, 0x0f,
	0x5a, 0xf4, 0xc2, 0x69, 0x4c, 0x97, 0x59, 0x61, 0x44, 0x95, 0x30, 0xda, 0x48, 0x34, 0xb0, 0x4f,
	0x6b, 0xe4, 0xd3, 0x18, 0xc0, 0xb8, 0x51, 0xd0, 0x7f, 0x66, 0xb0, 0xe4, 0xeb, 0x7c, 0xe3, 0xff,
	0xf3, 0xc9, 0x8d, 0x33, 0x7a, 0x06, 0x29, 0xb5, 0x02, 0xa0, 0x39, 0x56, 0x04, 0xe3, 0x7f, 0xb3,
	0xcb, 0x8c, 0x4d, 0x7f, 0x02, 0x69, 0xfd, 0x92, 0xa2, 0x79, 0x9e, 0x5a, 0xe3, 0xf1, 0x1c, 0x42,
	0x81, 0xc0, 0xd5, 0xbc, 0x44, 0x07, 0x1e, 0x3d, 0x4f, 0xd1, 0x81, 0x47, 0xcb, 0x04, 0x02, 0xd7,
	0x1f, 0x5b, 0x68, 0x9e, 0x4f, 0xb3, 0xe8, 0xc0, 0x2f, 0x10, 0x1a, 0x59, 0xdf, 0xac, 0xc3, 0xdf,
	0xba, 0xb6, 0xdb, 0x26, 0xb6, 0xd6, 0x42, 0xfa, 0x56, 0xb5, 0xeb, 0xf5, 0xcd, 0x73, 0xea, 0x36,
	0x91, 0xd0, 0xb7, 0x3b, 0xa6, 0x6e, 0xf4, 0xad, 0xa3, 0x2b, 0xcf, 0x17, 0xa4, 0x58, 0x3b, 0x25,
	0xff, 0x2d, 0xf0, 0xe0, 0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0x56, 0xad, 0x96, 0x80, 0x18,
	0x00, 0x00,
}
