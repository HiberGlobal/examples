// Code generated by protoc-gen-go.
// source: map.proto
// DO NOT EDIT!

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Selection object for map data. Filter modems on the map by id, (child)organization.
// Also, filter the map data by level and area restriction, to only display a small area at a detailed map level,
// for example
type MapSelection struct {
	Modems             *Filter_Modems                `protobuf:"bytes,1,opt,name=modems" json:"modems,omitempty"`
	ChildOrganizations *Filter_ChildOrganizations    `protobuf:"bytes,2,opt,name=child_organizations,json=childOrganizations" json:"child_organizations,omitempty"`
	Level              int32                         `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	Area               *MapSelection_AreaRestriction `protobuf:"bytes,4,opt,name=area" json:"area,omitempty"`
}

func (m *MapSelection) Reset()                    { *m = MapSelection{} }
func (m *MapSelection) String() string            { return proto.CompactTextString(m) }
func (*MapSelection) ProtoMessage()               {}
func (*MapSelection) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *MapSelection) GetModems() *Filter_Modems {
	if m != nil {
		return m.Modems
	}
	return nil
}

func (m *MapSelection) GetChildOrganizations() *Filter_ChildOrganizations {
	if m != nil {
		return m.ChildOrganizations
	}
	return nil
}

func (m *MapSelection) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MapSelection) GetArea() *MapSelection_AreaRestriction {
	if m != nil {
		return m.Area
	}
	return nil
}

type MapSelection_AreaRestriction struct {
	BottomLeft *Location `protobuf:"bytes,1,opt,name=bottom_left,json=bottomLeft" json:"bottom_left,omitempty"`
	TopRight   *Location `protobuf:"bytes,2,opt,name=top_right,json=topRight" json:"top_right,omitempty"`
}

func (m *MapSelection_AreaRestriction) Reset()                    { *m = MapSelection_AreaRestriction{} }
func (m *MapSelection_AreaRestriction) String() string            { return proto.CompactTextString(m) }
func (*MapSelection_AreaRestriction) ProtoMessage()               {}
func (*MapSelection_AreaRestriction) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0, 0} }

func (m *MapSelection_AreaRestriction) GetBottomLeft() *Location {
	if m != nil {
		return m.BottomLeft
	}
	return nil
}

func (m *MapSelection_AreaRestriction) GetTopRight() *Location {
	if m != nil {
		return m.TopRight
	}
	return nil
}

// The location of ground stations that receive the data sent from the satellite(s).
// Currently, ground station is just a marker on the map.
type GroundStation struct {
	Location *Location `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
}

func (m *GroundStation) Reset()                    { *m = GroundStation{} }
func (m *GroundStation) String() string            { return proto.CompactTextString(m) }
func (*GroundStation) ProtoMessage()               {}
func (*GroundStation) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *GroundStation) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

// Map block that specifies a modem count in a specific area, bounded by a latitude / longitude 'square' (not really a
// square, since the earth is not flat).
// Also contains an error count and percentage, which signifies any problems in the area.
// Note that the block's area is specified by the selected map level, which the most course map level defined as
// squares of 20 by 20 degrees latitude/longitude.s
type MapBlock struct {
	Area            *Area   `protobuf:"bytes,1,opt,name=area" json:"area,omitempty"`
	ModemCount      int32   `protobuf:"varint,2,opt,name=modem_count,json=modemCount" json:"modem_count,omitempty"`
	ErrorCount      int32   `protobuf:"varint,3,opt,name=error_count,json=errorCount" json:"error_count,omitempty"`
	ErrorPercentage float32 `protobuf:"fixed32,4,opt,name=error_percentage,json=errorPercentage" json:"error_percentage,omitempty"`
}

func (m *MapBlock) Reset()                    { *m = MapBlock{} }
func (m *MapBlock) String() string            { return proto.CompactTextString(m) }
func (*MapBlock) ProtoMessage()               {}
func (*MapBlock) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *MapBlock) GetArea() *Area {
	if m != nil {
		return m.Area
	}
	return nil
}

func (m *MapBlock) GetModemCount() int32 {
	if m != nil {
		return m.ModemCount
	}
	return 0
}

func (m *MapBlock) GetErrorCount() int32 {
	if m != nil {
		return m.ErrorCount
	}
	return 0
}

func (m *MapBlock) GetErrorPercentage() float32 {
	if m != nil {
		return m.ErrorPercentage
	}
	return 0
}

type MapRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string        `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *MapSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
}

func (m *MapRequest) Reset()                    { *m = MapRequest{} }
func (m *MapRequest) String() string            { return proto.CompactTextString(m) }
func (*MapRequest) ProtoMessage()               {}
func (*MapRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *MapRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *MapRequest) GetSelection() *MapSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

type MapRequest_Response struct {
	GroundStations []*GroundStation `protobuf:"bytes,1,rep,name=ground_stations,json=groundStations" json:"ground_stations,omitempty"`
	MapBlocks      []*MapBlock      `protobuf:"bytes,2,rep,name=map_blocks,json=mapBlocks" json:"map_blocks,omitempty"`
	Request        *MapRequest      `protobuf:"bytes,4,opt,name=request" json:"request,omitempty"`
}

func (m *MapRequest_Response) Reset()                    { *m = MapRequest_Response{} }
func (m *MapRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*MapRequest_Response) ProtoMessage()               {}
func (*MapRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3, 0} }

func (m *MapRequest_Response) GetGroundStations() []*GroundStation {
	if m != nil {
		return m.GroundStations
	}
	return nil
}

func (m *MapRequest_Response) GetMapBlocks() []*MapBlock {
	if m != nil {
		return m.MapBlocks
	}
	return nil
}

func (m *MapRequest_Response) GetRequest() *MapRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func init() {
	proto.RegisterType((*MapSelection)(nil), "hiber.map.MapSelection")
	proto.RegisterType((*MapSelection_AreaRestriction)(nil), "hiber.map.MapSelection.AreaRestriction")
	proto.RegisterType((*GroundStation)(nil), "hiber.map.GroundStation")
	proto.RegisterType((*MapBlock)(nil), "hiber.map.MapBlock")
	proto.RegisterType((*MapRequest)(nil), "hiber.map.MapRequest")
	proto.RegisterType((*MapRequest_Response)(nil), "hiber.map.MapRequest.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MapService service

type MapServiceClient interface {
	Map(ctx context.Context, in *MapRequest, opts ...grpc.CallOption) (*MapRequest_Response, error)
}

type mapServiceClient struct {
	cc *grpc.ClientConn
}

func NewMapServiceClient(cc *grpc.ClientConn) MapServiceClient {
	return &mapServiceClient{cc}
}

func (c *mapServiceClient) Map(ctx context.Context, in *MapRequest, opts ...grpc.CallOption) (*MapRequest_Response, error) {
	out := new(MapRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.map.MapService/Map", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MapService service

type MapServiceServer interface {
	Map(context.Context, *MapRequest) (*MapRequest_Response, error)
}

func RegisterMapServiceServer(s *grpc.Server, srv MapServiceServer) {
	s.RegisterService(&_MapService_serviceDesc, srv)
}

func _MapService_Map_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).Map(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.map.MapService/Map",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).Map(ctx, req.(*MapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MapService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.map.MapService",
	HandlerType: (*MapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Map",
			Handler:    _MapService_Map_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "map.proto",
}

func init() { proto.RegisterFile("map.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x71, 0xda, 0x84, 0x64, 0x52, 0x08, 0xda, 0x16, 0x11, 0x72, 0xa0, 0x51, 0x2e, 0x04,
	0x11, 0x19, 0x14, 0xc4, 0x89, 0x5e, 0x92, 0x4a, 0x20, 0xa1, 0x5a, 0x94, 0xcd, 0x8d, 0x8b, 0xb5,
	0x76, 0xa6, 0x8e, 0x85, 0xed, 0xdd, 0xee, 0x6e, 0x7a, 0xe0, 0x49, 0x38, 0xf0, 0x14, 0xbc, 0x0b,
	0xef, 0x83, 0x3c, 0xbb, 0x09, 0x09, 0x6d, 0x6f, 0xd9, 0x7f, 0xbe, 0x7f, 0x33, 0xf3, 0xcf, 0x1a,
	0x3a, 0xa5, 0x50, 0xa1, 0xd2, 0xd2, 0x4a, 0xd6, 0x59, 0xe5, 0x09, 0xea, 0xb0, 0x14, 0x6a, 0x00,
	0x89, 0x30, 0xe8, 0xe4, 0xd1, 0x9f, 0x06, 0x1c, 0x45, 0x42, 0x2d, 0xb0, 0xc0, 0xd4, 0xe6, 0xb2,
	0x62, 0x13, 0x68, 0x95, 0x72, 0x89, 0xa5, 0xe9, 0x07, 0xc3, 0x60, 0xdc, 0x9d, 0x9e, 0x84, 0xce,
	0xf8, 0x31, 0x2f, 0x2c, 0xea, 0x30, 0xa2, 0x1a, 0xf7, 0x0c, 0xfb, 0x0a, 0xc7, 0xe9, 0x2a, 0x2f,
	0x96, 0xb1, 0xd4, 0x99, 0xa8, 0xf2, 0x1f, 0xa2, 0xbe, 0xc3, 0xf4, 0x1b, 0x64, 0x1d, 0xee, 0x5b,
	0xcf, 0x6b, 0xf0, 0xcb, 0x2e, 0xc7, 0x59, 0x7a, 0x4b, 0x63, 0x27, 0xd0, 0x2c, 0xf0, 0x06, 0x8b,
	0xfe, 0xc1, 0x30, 0x18, 0x37, 0xb9, 0x3b, 0xb0, 0x0f, 0x70, 0x28, 0x34, 0x8a, 0xfe, 0x21, 0xdd,
	0xfc, 0x32, 0xdc, 0x4e, 0x13, 0xee, 0x76, 0x1f, 0xce, 0x34, 0x0a, 0x8e, 0xc6, 0xea, 0x9c, 0xce,
	0x9c, 0x4c, 0x83, 0x6b, 0xe8, 0xfd, 0x57, 0x60, 0x6f, 0xa1, 0x9b, 0x48, 0x6b, 0x65, 0x19, 0x17,
	0x78, 0x65, 0xfd, 0xac, 0x3d, 0x7f, 0xed, 0x85, 0x4c, 0xa9, 0x19, 0x0e, 0x8e, 0xb9, 0xc0, 0x2b,
	0xcb, 0x26, 0xd0, 0xb1, 0x52, 0xc5, 0x3a, 0xcf, 0x56, 0xd6, 0x0f, 0x78, 0x8b, 0x6f, 0x5b, 0xa9,
	0x78, 0x0d, 0x8c, 0xce, 0xe0, 0xd1, 0x27, 0x2d, 0xd7, 0xd5, 0x72, 0x61, 0xa9, 0xc4, 0x5e, 0x43,
	0xbb, 0xf0, 0xd8, 0x7d, 0xff, 0xb6, 0x05, 0x46, 0x3f, 0x03, 0x68, 0x47, 0x42, 0xcd, 0x0b, 0x99,
	0x7e, 0x67, 0xa7, 0x7e, 0x74, 0xe7, 0xea, 0x7a, 0x17, 0x0d, 0x44, 0x05, 0x76, 0x0a, 0x5d, 0x5a,
	0x47, 0x9c, 0xca, 0x75, 0xe5, 0x7a, 0x6b, 0x72, 0x20, 0xe9, 0xbc, 0x56, 0x6a, 0x00, 0xb5, 0x96,
	0xda, 0x03, 0x2e, 0x58, 0x20, 0xc9, 0x01, 0xaf, 0xe0, 0x89, 0x03, 0x14, 0xea, 0x14, 0x2b, 0x2b,
	0x32, 0xa4, 0xa4, 0x1b, 0xbc, 0x47, 0xfa, 0xe5, 0x56, 0x1e, 0xfd, 0x6a, 0x00, 0x44, 0x42, 0x71,
	0xbc, 0x5e, 0xa3, 0xb1, 0x6c, 0x04, 0x47, 0xbb, 0xab, 0xa7, 0x26, 0x3b, 0x7c, 0x4f, 0x63, 0xef,
	0xa1, 0x63, 0x36, 0x1b, 0xf2, 0xc9, 0x3d, 0xbb, 0x67, 0x81, 0xfc, 0x1f, 0x39, 0xf8, 0x1d, 0x40,
	0x9b, 0xa3, 0x51, 0xb2, 0x32, 0xc8, 0x66, 0xd0, 0xcb, 0x28, 0xcf, 0xd8, 0x58, 0xff, 0xc8, 0x82,
	0xe1, 0xc1, 0xb8, 0x3b, 0xed, 0xef, 0xdc, 0xb4, 0x97, 0x38, 0x7f, 0x9c, 0xed, 0x1e, 0x0d, 0x9b,
	0x02, 0x94, 0x42, 0xc5, 0x49, 0x1d, 0x6a, 0xfd, 0x44, 0x6b, 0xf7, 0xf1, 0x7e, 0x1f, 0x14, 0x38,
	0xaf, 0xbf, 0x1a, 0xfa, 0x65, 0xd8, 0x1b, 0x78, 0xa8, 0xdd, 0xa4, 0xfe, 0xe5, 0x3d, 0xdd, 0x37,
	0xf8, 0x18, 0xf8, 0x86, 0x9a, 0x7e, 0xa6, 0x74, 0x16, 0xa8, 0x6f, 0xf2, 0x14, 0xd9, 0x19, 0x1c,
	0x44, 0x42, 0xb1, 0xbb, 0x4d, 0x83, 0x17, 0x77, 0xca, 0xe1, 0x66, 0xe6, 0xf9, 0x04, 0x9e, 0x67,
	0x85, 0x4c, 0x44, 0xe1, 0x39, 0xa1, 0xf2, 0x30, 0xd3, 0x2a, 0xad, 0x0d, 0xf3, 0x56, 0x24, 0xd4,
	0x4c, 0xe5, 0x97, 0x0f, 0xbe, 0x35, 0xa9, 0x9a, 0xb4, 0xe8, 0x83, 0x7e, 0xf7, 0x37, 0x00, 0x00,
	0xff, 0xff, 0xf5, 0x4e, 0xc2, 0x92, 0xf4, 0x03, 0x00, 0x00,
}
