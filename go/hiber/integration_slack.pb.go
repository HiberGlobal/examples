// Code generated by protoc-gen-go. DO NOT EDIT.
// source: integration_slack.proto

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SlackPublisher struct {
	Id                 int64                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Description        string               `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Data               *SlackPublisher_Data `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	FilterEventTypes   *Filter_Events       `protobuf:"bytes,4,opt,name=filter_event_types,json=filterEventTypes" json:"filter_event_types,omitempty"`
	FilterModemNumbers *Filter_Modems       `protobuf:"bytes,5,opt,name=filter_modem_numbers,json=filterModemNumbers" json:"filter_modem_numbers,omitempty"`
	FilterTags         *Filter_Tags         `protobuf:"bytes,6,opt,name=filter_tags,json=filterTags" json:"filter_tags,omitempty"`
	Health             Health               `protobuf:"varint,7,opt,name=health,enum=hiber.Health" json:"health,omitempty"`
	Tags               []*Tag               `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
}

func (m *SlackPublisher) Reset()                    { *m = SlackPublisher{} }
func (m *SlackPublisher) String() string            { return proto.CompactTextString(m) }
func (*SlackPublisher) ProtoMessage()               {}
func (*SlackPublisher) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *SlackPublisher) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SlackPublisher) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SlackPublisher) GetData() *SlackPublisher_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SlackPublisher) GetFilterEventTypes() *Filter_Events {
	if m != nil {
		return m.FilterEventTypes
	}
	return nil
}

func (m *SlackPublisher) GetFilterModemNumbers() *Filter_Modems {
	if m != nil {
		return m.FilterModemNumbers
	}
	return nil
}

func (m *SlackPublisher) GetFilterTags() *Filter_Tags {
	if m != nil {
		return m.FilterTags
	}
	return nil
}

func (m *SlackPublisher) GetHealth() Health {
	if m != nil {
		return m.Health
	}
	return Health_OK
}

func (m *SlackPublisher) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type SlackPublisher_Data struct {
	// The slack webhook URL. See https://api.slack.com/messaging/webhooks for information on Slack webhooks.
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// The channel the webhook is configured to send to. This is used purely for display purposes,
	// since Slack webhooks are bound to a single channel.
	Channel  string `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	Disabled bool   `protobuf:"varint,3,opt,name=disabled" json:"disabled,omitempty"`
}

func (m *SlackPublisher_Data) Reset()                    { *m = SlackPublisher_Data{} }
func (m *SlackPublisher_Data) String() string            { return proto.CompactTextString(m) }
func (*SlackPublisher_Data) ProtoMessage()               {}
func (*SlackPublisher_Data) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0, 0} }

func (m *SlackPublisher_Data) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *SlackPublisher_Data) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *SlackPublisher_Data) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

type SlackMessage struct {
	Time          *Timestamp           `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	PublisherData *SlackPublisher_Data `protobuf:"bytes,2,opt,name=publisher_data,json=publisherData" json:"publisher_data,omitempty"`
	Message       *BytesOrHex          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Successful    bool                 `protobuf:"varint,4,opt,name=successful" json:"successful,omitempty"`
	Error         string               `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
}

func (m *SlackMessage) Reset()                    { *m = SlackMessage{} }
func (m *SlackMessage) String() string            { return proto.CompactTextString(m) }
func (*SlackMessage) ProtoMessage()               {}
func (*SlackMessage) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *SlackMessage) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *SlackMessage) GetPublisherData() *SlackPublisher_Data {
	if m != nil {
		return m.PublisherData
	}
	return nil
}

func (m *SlackMessage) GetMessage() *BytesOrHex {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SlackMessage) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *SlackMessage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type SlackPublisherSelection struct {
	// Filter by id.
	Publishers *Filter_Publishers `protobuf:"bytes,1,opt,name=publishers" json:"publishers,omitempty"`
	// Partial text match on the description.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// Partial text match on the url.
	SearchUrl string `protobuf:"bytes,3,opt,name=search_url,json=searchUrl" json:"search_url,omitempty"`
	// Partial text match on the channel.
	SearchChannel string        `protobuf:"bytes,4,opt,name=search_channel,json=searchChannel" json:"search_channel,omitempty"`
	Tags          *TagSelection `protobuf:"bytes,5,opt,name=tags" json:"tags,omitempty"`
	Health        []Health      `protobuf:"varint,6,rep,packed,name=health,enum=hiber.Health" json:"health,omitempty"`
}

func (m *SlackPublisherSelection) Reset()                    { *m = SlackPublisherSelection{} }
func (m *SlackPublisherSelection) String() string            { return proto.CompactTextString(m) }
func (*SlackPublisherSelection) ProtoMessage()               {}
func (*SlackPublisherSelection) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *SlackPublisherSelection) GetPublishers() *Filter_Publishers {
	if m != nil {
		return m.Publishers
	}
	return nil
}

func (m *SlackPublisherSelection) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SlackPublisherSelection) GetSearchUrl() string {
	if m != nil {
		return m.SearchUrl
	}
	return ""
}

func (m *SlackPublisherSelection) GetSearchChannel() string {
	if m != nil {
		return m.SearchChannel
	}
	return ""
}

func (m *SlackPublisherSelection) GetTags() *TagSelection {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SlackPublisherSelection) GetHealth() []Health {
	if m != nil {
		return m.Health
	}
	return nil
}

type ListSlackPublishersRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                   `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *SlackPublisherSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination              `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListSlackPublishersRequest) Reset()                    { *m = ListSlackPublishersRequest{} }
func (m *ListSlackPublishersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSlackPublishersRequest) ProtoMessage()               {}
func (*ListSlackPublishersRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *ListSlackPublishersRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ListSlackPublishersRequest) GetSelection() *SlackPublisherSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListSlackPublishersRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListSlackPublishersRequest_Response struct {
	Publishers []*SlackPublisher           `protobuf:"bytes,1,rep,name=publishers" json:"publishers,omitempty"`
	Request    *ListSlackPublishersRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result          `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListSlackPublishersRequest_Response) Reset()         { *m = ListSlackPublishersRequest_Response{} }
func (m *ListSlackPublishersRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListSlackPublishersRequest_Response) ProtoMessage()    {}
func (*ListSlackPublishersRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{3, 0}
}

func (m *ListSlackPublishersRequest_Response) GetPublishers() []*SlackPublisher {
	if m != nil {
		return m.Publishers
	}
	return nil
}

func (m *ListSlackPublishersRequest_Response) GetRequest() *ListSlackPublishersRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListSlackPublishersRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type SlackPublisherHistorySelection struct {
	TimeRange    *TimeRange `protobuf:"bytes,1,opt,name=time_range,json=timeRange" json:"time_range,omitempty"`
	OnlyFailures bool       `protobuf:"varint,2,opt,name=only_failures,json=onlyFailures" json:"only_failures,omitempty"`
}

func (m *SlackPublisherHistorySelection) Reset()                    { *m = SlackPublisherHistorySelection{} }
func (m *SlackPublisherHistorySelection) String() string            { return proto.CompactTextString(m) }
func (*SlackPublisherHistorySelection) ProtoMessage()               {}
func (*SlackPublisherHistorySelection) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *SlackPublisherHistorySelection) GetTimeRange() *TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

func (m *SlackPublisherHistorySelection) GetOnlyFailures() bool {
	if m != nil {
		return m.OnlyFailures
	}
	return false
}

type SlackPublisherHistoryRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                          `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Id           int64                           `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Selection    *SlackPublisherHistorySelection `protobuf:"bytes,3,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination                     `protobuf:"bytes,4,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *SlackPublisherHistoryRequest) Reset()                    { *m = SlackPublisherHistoryRequest{} }
func (m *SlackPublisherHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*SlackPublisherHistoryRequest) ProtoMessage()               {}
func (*SlackPublisherHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *SlackPublisherHistoryRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *SlackPublisherHistoryRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SlackPublisherHistoryRequest) GetSelection() *SlackPublisherHistorySelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *SlackPublisherHistoryRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type SlackPublisherHistoryRequest_Response struct {
	Items      []*SlackMessage               `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Request    *SlackPublisherHistoryRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result            `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *SlackPublisherHistoryRequest_Response) Reset()         { *m = SlackPublisherHistoryRequest_Response{} }
func (m *SlackPublisherHistoryRequest_Response) String() string { return proto.CompactTextString(m) }
func (*SlackPublisherHistoryRequest_Response) ProtoMessage()    {}
func (*SlackPublisherHistoryRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{5, 0}
}

func (m *SlackPublisherHistoryRequest_Response) GetItems() []*SlackMessage {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SlackPublisherHistoryRequest_Response) GetRequest() *SlackPublisherHistoryRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SlackPublisherHistoryRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type CreateSlackPublisherRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization       string         `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Description        string         `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	FilterEventTypes   *Filter_Events `protobuf:"bytes,3,opt,name=filter_event_types,json=filterEventTypes" json:"filter_event_types,omitempty"`
	FilterModemNumbers *Filter_Modems `protobuf:"bytes,4,opt,name=filter_modem_numbers,json=filterModemNumbers" json:"filter_modem_numbers,omitempty"`
	FilterTags         *Filter_Tags   `protobuf:"bytes,5,opt,name=filter_tags,json=filterTags" json:"filter_tags,omitempty"`
	Url                string         `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	Channel            string         `protobuf:"bytes,7,opt,name=channel" json:"channel,omitempty"`
	Disabled           bool           `protobuf:"varint,8,opt,name=disabled" json:"disabled,omitempty"`
	Tags               []int64        `protobuf:"varint,10,rep,packed,name=tags" json:"tags,omitempty"`
}

func (m *CreateSlackPublisherRequest) Reset()                    { *m = CreateSlackPublisherRequest{} }
func (m *CreateSlackPublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSlackPublisherRequest) ProtoMessage()               {}
func (*CreateSlackPublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

func (m *CreateSlackPublisherRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *CreateSlackPublisherRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateSlackPublisherRequest) GetFilterEventTypes() *Filter_Events {
	if m != nil {
		return m.FilterEventTypes
	}
	return nil
}

func (m *CreateSlackPublisherRequest) GetFilterModemNumbers() *Filter_Modems {
	if m != nil {
		return m.FilterModemNumbers
	}
	return nil
}

func (m *CreateSlackPublisherRequest) GetFilterTags() *Filter_Tags {
	if m != nil {
		return m.FilterTags
	}
	return nil
}

func (m *CreateSlackPublisherRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CreateSlackPublisherRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *CreateSlackPublisherRequest) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *CreateSlackPublisherRequest) GetTags() []int64 {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Enable a disabled publisher or re-enable a publisher that's failed and is in cooldown.
type EnableSlackPublisherRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                   `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *SlackPublisherSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
}

func (m *EnableSlackPublisherRequest) Reset()                    { *m = EnableSlackPublisherRequest{} }
func (m *EnableSlackPublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*EnableSlackPublisherRequest) ProtoMessage()               {}
func (*EnableSlackPublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

func (m *EnableSlackPublisherRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *EnableSlackPublisherRequest) GetSelection() *SlackPublisherSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

type EnableSlackPublisherRequest_Response struct {
	Publishers []*SlackPublisher            `protobuf:"bytes,1,rep,name=publishers" json:"publishers,omitempty"`
	Request    *EnableSlackPublisherRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *EnableSlackPublisherRequest_Response) Reset()         { *m = EnableSlackPublisherRequest_Response{} }
func (m *EnableSlackPublisherRequest_Response) String() string { return proto.CompactTextString(m) }
func (*EnableSlackPublisherRequest_Response) ProtoMessage()    {}
func (*EnableSlackPublisherRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{7, 0}
}

func (m *EnableSlackPublisherRequest_Response) GetPublishers() []*SlackPublisher {
	if m != nil {
		return m.Publishers
	}
	return nil
}

func (m *EnableSlackPublisherRequest_Response) GetRequest() *EnableSlackPublisherRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type DisableSlackPublisherRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                   `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *SlackPublisherSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
}

func (m *DisableSlackPublisherRequest) Reset()                    { *m = DisableSlackPublisherRequest{} }
func (m *DisableSlackPublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*DisableSlackPublisherRequest) ProtoMessage()               {}
func (*DisableSlackPublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

func (m *DisableSlackPublisherRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *DisableSlackPublisherRequest) GetSelection() *SlackPublisherSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

type DisableSlackPublisherRequest_Response struct {
	Publishers []*SlackPublisher             `protobuf:"bytes,1,rep,name=publishers" json:"publishers,omitempty"`
	Request    *DisableSlackPublisherRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *DisableSlackPublisherRequest_Response) Reset()         { *m = DisableSlackPublisherRequest_Response{} }
func (m *DisableSlackPublisherRequest_Response) String() string { return proto.CompactTextString(m) }
func (*DisableSlackPublisherRequest_Response) ProtoMessage()    {}
func (*DisableSlackPublisherRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{8, 0}
}

func (m *DisableSlackPublisherRequest_Response) GetPublishers() []*SlackPublisher {
	if m != nil {
		return m.Publishers
	}
	return nil
}

func (m *DisableSlackPublisherRequest_Response) GetRequest() *DisableSlackPublisherRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type UpdateSlackPublisherRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization       string                 `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Id                 int64                  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	FilterEventTypes   *Filter_Events_Update  `protobuf:"bytes,3,opt,name=filter_event_types,json=filterEventTypes" json:"filter_event_types,omitempty"`
	FilterModemNumbers *Filter_Modems_Update  `protobuf:"bytes,4,opt,name=filter_modem_numbers,json=filterModemNumbers" json:"filter_modem_numbers,omitempty"`
	FilterTags         *Filter_Tags_Update    `protobuf:"bytes,5,opt,name=filter_tags,json=filterTags" json:"filter_tags,omitempty"`
	Description        *UpdateClearableString `protobuf:"bytes,10,opt,name=description" json:"description,omitempty"`
	Url                string                 `protobuf:"bytes,11,opt,name=url" json:"url,omitempty"`
	Channel            *UpdateClearableString `protobuf:"bytes,12,opt,name=channel" json:"channel,omitempty"`
	Active             *UpdateBoolean         `protobuf:"bytes,15,opt,name=active" json:"active,omitempty"`
}

func (m *UpdateSlackPublisherRequest) Reset()                    { *m = UpdateSlackPublisherRequest{} }
func (m *UpdateSlackPublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateSlackPublisherRequest) ProtoMessage()               {}
func (*UpdateSlackPublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{9} }

func (m *UpdateSlackPublisherRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UpdateSlackPublisherRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateSlackPublisherRequest) GetFilterEventTypes() *Filter_Events_Update {
	if m != nil {
		return m.FilterEventTypes
	}
	return nil
}

func (m *UpdateSlackPublisherRequest) GetFilterModemNumbers() *Filter_Modems_Update {
	if m != nil {
		return m.FilterModemNumbers
	}
	return nil
}

func (m *UpdateSlackPublisherRequest) GetFilterTags() *Filter_Tags_Update {
	if m != nil {
		return m.FilterTags
	}
	return nil
}

func (m *UpdateSlackPublisherRequest) GetDescription() *UpdateClearableString {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *UpdateSlackPublisherRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *UpdateSlackPublisherRequest) GetChannel() *UpdateClearableString {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *UpdateSlackPublisherRequest) GetActive() *UpdateBoolean {
	if m != nil {
		return m.Active
	}
	return nil
}

type UpdateSlackPublisherTagsRequest struct {
	Organization string                   `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *SlackPublisherSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Update       *UpdateTagsForItem       `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
}

func (m *UpdateSlackPublisherTagsRequest) Reset()         { *m = UpdateSlackPublisherTagsRequest{} }
func (m *UpdateSlackPublisherTagsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSlackPublisherTagsRequest) ProtoMessage()    {}
func (*UpdateSlackPublisherTagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{10}
}

func (m *UpdateSlackPublisherTagsRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UpdateSlackPublisherTagsRequest) GetSelection() *SlackPublisherSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *UpdateSlackPublisherTagsRequest) GetUpdate() *UpdateTagsForItem {
	if m != nil {
		return m.Update
	}
	return nil
}

type UpdateSlackPublisherTagsRequest_Response struct {
	SlackPublishers []*SlackPublisher `protobuf:"bytes,1,rep,name=slack_publishers,json=slackPublishers" json:"slack_publishers,omitempty"`
}

func (m *UpdateSlackPublisherTagsRequest_Response) Reset() {
	*m = UpdateSlackPublisherTagsRequest_Response{}
}
func (m *UpdateSlackPublisherTagsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*UpdateSlackPublisherTagsRequest_Response) ProtoMessage()    {}
func (*UpdateSlackPublisherTagsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{10, 0}
}

func (m *UpdateSlackPublisherTagsRequest_Response) GetSlackPublishers() []*SlackPublisher {
	if m != nil {
		return m.SlackPublishers
	}
	return nil
}

type DeleteSlackPublisherRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Id           int64  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteSlackPublisherRequest) Reset()                    { *m = DeleteSlackPublisherRequest{} }
func (m *DeleteSlackPublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSlackPublisherRequest) ProtoMessage()               {}
func (*DeleteSlackPublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{11} }

func (m *DeleteSlackPublisherRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *DeleteSlackPublisherRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteSlackPublisherRequest_Response struct {
}

func (m *DeleteSlackPublisherRequest_Response) Reset()         { *m = DeleteSlackPublisherRequest_Response{} }
func (m *DeleteSlackPublisherRequest_Response) String() string { return proto.CompactTextString(m) }
func (*DeleteSlackPublisherRequest_Response) ProtoMessage()    {}
func (*DeleteSlackPublisherRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{11, 0}
}

func init() {
	proto.RegisterType((*SlackPublisher)(nil), "hiber.integration.slack.SlackPublisher")
	proto.RegisterType((*SlackPublisher_Data)(nil), "hiber.integration.slack.SlackPublisher.Data")
	proto.RegisterType((*SlackMessage)(nil), "hiber.integration.slack.SlackMessage")
	proto.RegisterType((*SlackPublisherSelection)(nil), "hiber.integration.slack.SlackPublisherSelection")
	proto.RegisterType((*ListSlackPublishersRequest)(nil), "hiber.integration.slack.ListSlackPublishersRequest")
	proto.RegisterType((*ListSlackPublishersRequest_Response)(nil), "hiber.integration.slack.ListSlackPublishersRequest.Response")
	proto.RegisterType((*SlackPublisherHistorySelection)(nil), "hiber.integration.slack.SlackPublisherHistorySelection")
	proto.RegisterType((*SlackPublisherHistoryRequest)(nil), "hiber.integration.slack.SlackPublisherHistoryRequest")
	proto.RegisterType((*SlackPublisherHistoryRequest_Response)(nil), "hiber.integration.slack.SlackPublisherHistoryRequest.Response")
	proto.RegisterType((*CreateSlackPublisherRequest)(nil), "hiber.integration.slack.CreateSlackPublisherRequest")
	proto.RegisterType((*EnableSlackPublisherRequest)(nil), "hiber.integration.slack.EnableSlackPublisherRequest")
	proto.RegisterType((*EnableSlackPublisherRequest_Response)(nil), "hiber.integration.slack.EnableSlackPublisherRequest.Response")
	proto.RegisterType((*DisableSlackPublisherRequest)(nil), "hiber.integration.slack.DisableSlackPublisherRequest")
	proto.RegisterType((*DisableSlackPublisherRequest_Response)(nil), "hiber.integration.slack.DisableSlackPublisherRequest.Response")
	proto.RegisterType((*UpdateSlackPublisherRequest)(nil), "hiber.integration.slack.UpdateSlackPublisherRequest")
	proto.RegisterType((*UpdateSlackPublisherTagsRequest)(nil), "hiber.integration.slack.UpdateSlackPublisherTagsRequest")
	proto.RegisterType((*UpdateSlackPublisherTagsRequest_Response)(nil), "hiber.integration.slack.UpdateSlackPublisherTagsRequest.Response")
	proto.RegisterType((*DeleteSlackPublisherRequest)(nil), "hiber.integration.slack.DeleteSlackPublisherRequest")
	proto.RegisterType((*DeleteSlackPublisherRequest_Response)(nil), "hiber.integration.slack.DeleteSlackPublisherRequest.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SlackIntegrationService service

type SlackIntegrationServiceClient interface {
	List(ctx context.Context, in *ListSlackPublishersRequest, opts ...grpc.CallOption) (*ListSlackPublishersRequest_Response, error)
	Create(ctx context.Context, in *CreateSlackPublisherRequest, opts ...grpc.CallOption) (*SlackPublisher, error)
	Update(ctx context.Context, in *UpdateSlackPublisherRequest, opts ...grpc.CallOption) (*SlackPublisher, error)
	UpdateTags(ctx context.Context, in *UpdateSlackPublisherTagsRequest, opts ...grpc.CallOption) (*UpdateSlackPublisherTagsRequest_Response, error)
	Enable(ctx context.Context, in *EnableSlackPublisherRequest, opts ...grpc.CallOption) (*EnableSlackPublisherRequest_Response, error)
	Disable(ctx context.Context, in *DisableSlackPublisherRequest, opts ...grpc.CallOption) (*DisableSlackPublisherRequest_Response, error)
	Delete(ctx context.Context, in *DeleteSlackPublisherRequest, opts ...grpc.CallOption) (*DeleteSlackPublisherRequest_Response, error)
	History(ctx context.Context, in *SlackPublisherHistoryRequest, opts ...grpc.CallOption) (*SlackPublisherHistoryRequest_Response, error)
}

type slackIntegrationServiceClient struct {
	cc *grpc.ClientConn
}

func NewSlackIntegrationServiceClient(cc *grpc.ClientConn) SlackIntegrationServiceClient {
	return &slackIntegrationServiceClient{cc}
}

func (c *slackIntegrationServiceClient) List(ctx context.Context, in *ListSlackPublishersRequest, opts ...grpc.CallOption) (*ListSlackPublishersRequest_Response, error) {
	out := new(ListSlackPublishersRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.integration.slack.SlackIntegrationService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackIntegrationServiceClient) Create(ctx context.Context, in *CreateSlackPublisherRequest, opts ...grpc.CallOption) (*SlackPublisher, error) {
	out := new(SlackPublisher)
	err := grpc.Invoke(ctx, "/hiber.integration.slack.SlackIntegrationService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackIntegrationServiceClient) Update(ctx context.Context, in *UpdateSlackPublisherRequest, opts ...grpc.CallOption) (*SlackPublisher, error) {
	out := new(SlackPublisher)
	err := grpc.Invoke(ctx, "/hiber.integration.slack.SlackIntegrationService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackIntegrationServiceClient) UpdateTags(ctx context.Context, in *UpdateSlackPublisherTagsRequest, opts ...grpc.CallOption) (*UpdateSlackPublisherTagsRequest_Response, error) {
	out := new(UpdateSlackPublisherTagsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.integration.slack.SlackIntegrationService/UpdateTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackIntegrationServiceClient) Enable(ctx context.Context, in *EnableSlackPublisherRequest, opts ...grpc.CallOption) (*EnableSlackPublisherRequest_Response, error) {
	out := new(EnableSlackPublisherRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.integration.slack.SlackIntegrationService/Enable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackIntegrationServiceClient) Disable(ctx context.Context, in *DisableSlackPublisherRequest, opts ...grpc.CallOption) (*DisableSlackPublisherRequest_Response, error) {
	out := new(DisableSlackPublisherRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.integration.slack.SlackIntegrationService/Disable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackIntegrationServiceClient) Delete(ctx context.Context, in *DeleteSlackPublisherRequest, opts ...grpc.CallOption) (*DeleteSlackPublisherRequest_Response, error) {
	out := new(DeleteSlackPublisherRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.integration.slack.SlackIntegrationService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackIntegrationServiceClient) History(ctx context.Context, in *SlackPublisherHistoryRequest, opts ...grpc.CallOption) (*SlackPublisherHistoryRequest_Response, error) {
	out := new(SlackPublisherHistoryRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.integration.slack.SlackIntegrationService/History", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SlackIntegrationService service

type SlackIntegrationServiceServer interface {
	List(context.Context, *ListSlackPublishersRequest) (*ListSlackPublishersRequest_Response, error)
	Create(context.Context, *CreateSlackPublisherRequest) (*SlackPublisher, error)
	Update(context.Context, *UpdateSlackPublisherRequest) (*SlackPublisher, error)
	UpdateTags(context.Context, *UpdateSlackPublisherTagsRequest) (*UpdateSlackPublisherTagsRequest_Response, error)
	Enable(context.Context, *EnableSlackPublisherRequest) (*EnableSlackPublisherRequest_Response, error)
	Disable(context.Context, *DisableSlackPublisherRequest) (*DisableSlackPublisherRequest_Response, error)
	Delete(context.Context, *DeleteSlackPublisherRequest) (*DeleteSlackPublisherRequest_Response, error)
	History(context.Context, *SlackPublisherHistoryRequest) (*SlackPublisherHistoryRequest_Response, error)
}

func RegisterSlackIntegrationServiceServer(s *grpc.Server, srv SlackIntegrationServiceServer) {
	s.RegisterService(&_SlackIntegrationService_serviceDesc, srv)
}

func _SlackIntegrationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSlackPublishersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackIntegrationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.integration.slack.SlackIntegrationService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackIntegrationServiceServer).List(ctx, req.(*ListSlackPublishersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlackIntegrationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSlackPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackIntegrationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.integration.slack.SlackIntegrationService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackIntegrationServiceServer).Create(ctx, req.(*CreateSlackPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlackIntegrationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSlackPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackIntegrationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.integration.slack.SlackIntegrationService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackIntegrationServiceServer).Update(ctx, req.(*UpdateSlackPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlackIntegrationService_UpdateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSlackPublisherTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackIntegrationServiceServer).UpdateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.integration.slack.SlackIntegrationService/UpdateTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackIntegrationServiceServer).UpdateTags(ctx, req.(*UpdateSlackPublisherTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlackIntegrationService_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableSlackPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackIntegrationServiceServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.integration.slack.SlackIntegrationService/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackIntegrationServiceServer).Enable(ctx, req.(*EnableSlackPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlackIntegrationService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableSlackPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackIntegrationServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.integration.slack.SlackIntegrationService/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackIntegrationServiceServer).Disable(ctx, req.(*DisableSlackPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlackIntegrationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSlackPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackIntegrationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.integration.slack.SlackIntegrationService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackIntegrationServiceServer).Delete(ctx, req.(*DeleteSlackPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlackIntegrationService_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlackPublisherHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackIntegrationServiceServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.integration.slack.SlackIntegrationService/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackIntegrationServiceServer).History(ctx, req.(*SlackPublisherHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SlackIntegrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.integration.slack.SlackIntegrationService",
	HandlerType: (*SlackIntegrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SlackIntegrationService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SlackIntegrationService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SlackIntegrationService_Update_Handler,
		},
		{
			MethodName: "UpdateTags",
			Handler:    _SlackIntegrationService_UpdateTags_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _SlackIntegrationService_Enable_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _SlackIntegrationService_Disable_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SlackIntegrationService_Delete_Handler,
		},
		{
			MethodName: "History",
			Handler:    _SlackIntegrationService_History_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integration_slack.proto",
}

func init() { proto.RegisterFile("integration_slack.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 1260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xff, 0xda, 0xeb, 0xf8, 0xc7, 0x73, 0xe2, 0xe6, 0x3b, 0x44, 0x8a, 0x59, 0x87, 0xd6, 0x5a,
	0x88, 0x6a, 0xa9, 0x95, 0x03, 0x49, 0x81, 0x8a, 0x1f, 0x15, 0x4d, 0xd2, 0x34, 0x91, 0x48, 0x1a,
	0x4d, 0x92, 0x0b, 0x12, 0x58, 0x63, 0x7b, 0xb2, 0x5e, 0xb1, 0xde, 0x35, 0x33, 0xe3, 0x88, 0x20,
	0x21, 0xf5, 0xca, 0x89, 0xff, 0x01, 0xb8, 0x71, 0xe2, 0x84, 0xf8, 0x37, 0x38, 0x23, 0xc1, 0x1f,
	0xc0, 0x99, 0x33, 0xda, 0x99, 0xb1, 0xbd, 0xeb, 0xac, 0x17, 0x67, 0x9b, 0x0a, 0x6e, 0x3b, 0x33,
	0xef, 0xd7, 0x7c, 0xde, 0xe7, 0xbd, 0x37, 0x36, 0xac, 0x3a, 0x9e, 0xa0, 0x36, 0x23, 0xc2, 0xf1,
	0xbd, 0x16, 0x77, 0x49, 0xe7, 0xf3, 0xe6, 0x80, 0xf9, 0xc2, 0x47, 0xab, 0x3d, 0xa7, 0x4d, 0x59,
	0x33, 0x74, 0xdc, 0x94, 0xc7, 0x26, 0xb4, 0x09, 0xa7, 0x4a, 0xc8, 0x2c, 0x09, 0x62, 0xeb, 0xcf,
	0x3b, 0xb6, 0xef, 0xdb, 0x2e, 0xdd, 0x90, 0xab, 0xf6, 0xf0, 0x7c, 0x43, 0x38, 0x7d, 0xca, 0x05,
	0xe9, 0x0f, 0x94, 0x80, 0xf5, 0x87, 0x01, 0x95, 0x93, 0xc0, 0xc2, 0xf1, 0xb0, 0xed, 0x3a, 0xbc,
	0x47, 0x19, 0xaa, 0x40, 0xd6, 0xe9, 0x56, 0x33, 0xf5, 0x4c, 0xc3, 0xc0, 0x59, 0xa7, 0x8b, 0xea,
	0x50, 0xee, 0x52, 0xde, 0x61, 0xce, 0x20, 0xf0, 0x57, 0xcd, 0xd6, 0x33, 0x8d, 0x12, 0x0e, 0x6f,
	0xa1, 0x8f, 0x20, 0xd7, 0x25, 0x82, 0x54, 0x8d, 0x7a, 0xa6, 0x51, 0xde, 0xbc, 0xdf, 0x9c, 0x11,
	0x64, 0x33, 0xea, 0xa8, 0xb9, 0x4b, 0x04, 0xc1, 0x52, 0x13, 0x6d, 0x03, 0x3a, 0x77, 0x5c, 0x41,
	0x59, 0x8b, 0x5e, 0x50, 0x4f, 0xb4, 0xc4, 0xe5, 0x80, 0xf2, 0x6a, 0x4e, 0xda, 0x5b, 0xd1, 0xf6,
	0xf6, 0xa4, 0x40, 0xf3, 0x49, 0x20, 0xc0, 0xf1, 0xb2, 0x92, 0x97, 0xab, 0xd3, 0x40, 0x1a, 0xed,
	0xc1, 0x8a, 0xb6, 0xd1, 0xf7, 0xbb, 0xb4, 0xdf, 0xf2, 0x86, 0xfd, 0x36, 0x65, 0xbc, 0xba, 0x10,
	0x67, 0xe5, 0x30, 0x10, 0xe1, 0x58, 0x7b, 0x95, 0xab, 0x23, 0x25, 0x8f, 0xb6, 0xa0, 0xac, 0xed,
	0x08, 0x62, 0xf3, 0x6a, 0x5e, 0xaa, 0xa3, 0xa8, 0xfa, 0x29, 0xb1, 0x39, 0x06, 0x25, 0x16, 0x7c,
	0xa3, 0x75, 0xc8, 0xf7, 0x28, 0x71, 0x45, 0xaf, 0x5a, 0xa8, 0x67, 0x1a, 0x95, 0xcd, 0x25, 0x2d,
	0xbf, 0x2f, 0x37, 0xb1, 0x3e, 0x44, 0x16, 0xe4, 0xa4, 0xd1, 0x62, 0xdd, 0x68, 0x94, 0x37, 0x2b,
	0x5a, 0x28, 0xc8, 0xd7, 0x29, 0xb1, 0xb1, 0x3c, 0x33, 0x8f, 0x20, 0x17, 0x20, 0x83, 0x96, 0xc1,
	0x18, 0x32, 0x57, 0x26, 0xa2, 0x84, 0x83, 0x4f, 0x54, 0x85, 0x42, 0xa7, 0x47, 0x3c, 0x8f, 0xba,
	0x3a, 0x0b, 0xa3, 0x25, 0x32, 0xa1, 0xd8, 0x75, 0x38, 0x69, 0xbb, 0xb4, 0x2b, 0xb3, 0x50, 0xc4,
	0xe3, 0xb5, 0xf5, 0x67, 0x06, 0x16, 0x25, 0xf2, 0x87, 0x94, 0x73, 0x62, 0x53, 0xf4, 0x06, 0xe4,
	0x02, 0x1a, 0x48, 0xcb, 0xe5, 0xcd, 0x65, 0x1d, 0xc4, 0xe9, 0x88, 0x19, 0x58, 0x9e, 0xa2, 0x13,
	0xa8, 0x0c, 0x46, 0xa9, 0x6a, 0xc9, 0xf4, 0x66, 0x53, 0xa4, 0x77, 0x69, 0x6c, 0x43, 0xde, 0xe9,
	0x1e, 0x14, 0xfa, 0x2a, 0x0a, 0x4d, 0x96, 0xff, 0x6b, 0x6b, 0xdb, 0x97, 0x82, 0xf2, 0x67, 0x6c,
	0x9f, 0x7e, 0x89, 0x47, 0x12, 0xe8, 0x36, 0x00, 0x1f, 0x76, 0x3a, 0x94, 0xf3, 0xf3, 0xa1, 0x2b,
	0xc9, 0x50, 0xc4, 0xa1, 0x1d, 0xb4, 0x02, 0x0b, 0x94, 0x31, 0x9f, 0xc9, 0x0c, 0x97, 0xb0, 0x5a,
	0x58, 0xdf, 0x66, 0x61, 0x35, 0x1a, 0xc9, 0x09, 0x75, 0x69, 0x47, 0x12, 0xf5, 0x21, 0xc0, 0x38,
	0x1e, 0xae, 0xef, 0x5f, 0x8d, 0x66, 0x76, 0xac, 0xc5, 0x71, 0x48, 0x76, 0x8e, 0x22, 0x78, 0x0d,
	0x80, 0x53, 0xc2, 0x3a, 0xbd, 0x56, 0x90, 0x35, 0x43, 0x0a, 0x94, 0xd4, 0xce, 0x19, 0x73, 0xd1,
	0x3a, 0x54, 0xf4, 0xf1, 0x28, 0x85, 0x39, 0x29, 0xb2, 0xa4, 0x76, 0x77, 0x74, 0x22, 0xef, 0x69,
	0x82, 0x28, 0xd2, 0xae, 0x46, 0x09, 0x32, 0xbe, 0x88, 0x62, 0x4a, 0x88, 0x74, 0xf9, 0xba, 0x31,
	0x93, 0x74, 0xd6, 0x77, 0x06, 0x98, 0x1f, 0x3b, 0x5c, 0x44, 0x51, 0xe1, 0x98, 0x7e, 0x31, 0xa4,
	0x5c, 0x20, 0x0b, 0x16, 0x7d, 0x66, 0x13, 0xcf, 0xf9, 0x4a, 0x26, 0x53, 0x13, 0x2e, 0xb2, 0x87,
	0x8e, 0xa0, 0xc4, 0x47, 0xce, 0x35, 0x0f, 0xde, 0x9c, 0x93, 0x07, 0x93, 0xa0, 0x27, 0x26, 0xd0,
	0x5b, 0x00, 0x03, 0x62, 0x3b, 0x9e, 0xf2, 0x18, 0xa5, 0xc2, 0xf1, 0xf8, 0x00, 0x87, 0x84, 0xcc,
	0xdf, 0x32, 0x50, 0xc4, 0x94, 0x0f, 0x7c, 0x8f, 0x53, 0xf4, 0x74, 0x2a, 0x91, 0x41, 0x35, 0xdd,
	0x9d, 0x33, 0xa0, 0x48, 0x5e, 0x0f, 0xa1, 0xc0, 0x14, 0x0e, 0xfa, 0x5a, 0x5b, 0x33, 0xad, 0xcc,
	0x86, 0x10, 0x8f, 0x6c, 0x48, 0x82, 0x4d, 0xdf, 0xab, 0x7a, 0xe5, 0x5e, 0x4d, 0x4c, 0xf9, 0xd0,
	0x15, 0xe1, 0xeb, 0x59, 0x17, 0x70, 0x3b, 0x6a, 0x7c, 0xdf, 0xe1, 0xc2, 0x67, 0x97, 0x13, 0xf2,
	0x6e, 0x00, 0x04, 0x85, 0xd9, 0x62, 0xc4, 0xb3, 0xe3, 0x8a, 0x17, 0x07, 0xfb, 0xb8, 0x24, 0x46,
	0x9f, 0xe8, 0x75, 0x58, 0xf2, 0x3d, 0xf7, 0xb2, 0x75, 0x4e, 0x1c, 0x77, 0xc8, 0x28, 0x97, 0x37,
	0x2c, 0xe2, 0xc5, 0x60, 0x73, 0x4f, 0xef, 0x59, 0x3f, 0x19, 0xb0, 0x16, 0xeb, 0xf8, 0x3a, 0xf4,
	0x50, 0x23, 0x23, 0x3b, 0x1e, 0x19, 0x67, 0x61, 0xba, 0x28, 0x14, 0xde, 0x9d, 0x33, 0x3b, 0xd3,
	0xd7, 0x9e, 0xcd, 0x9a, 0xdc, 0x3c, 0xac, 0xf9, 0x35, 0xcc, 0x9a, 0xf7, 0x61, 0xc1, 0x11, 0xb4,
	0x3f, 0x22, 0xcc, 0x7a, 0x72, 0x48, 0xba, 0x5d, 0x62, 0xa5, 0x83, 0x9e, 0x4d, 0x33, 0xe5, 0xed,
	0xeb, 0xdd, 0xe8, 0x06, 0xb9, 0xf2, 0xdc, 0x80, 0xda, 0x0e, 0xa3, 0x44, 0xd0, 0x29, 0x66, 0x5f,
	0x23, 0x65, 0xff, 0xdc, 0xd0, 0xe2, 0x67, 0xb2, 0x71, 0x23, 0x33, 0x39, 0xf7, 0x62, 0x33, 0x79,
	0x61, 0xae, 0x99, 0xac, 0x07, 0x68, 0x3e, 0x76, 0x80, 0x16, 0x66, 0x0f, 0xd0, 0x62, 0x74, 0x80,
	0x22, 0xa4, 0x7b, 0x32, 0xd4, 0x8d, 0x86, 0xa1, 0x5a, 0xaf, 0xf5, 0x73, 0x16, 0x6a, 0x4f, 0xbc,
	0xe0, 0x3c, 0x7d, 0x0a, 0x6e, 0xb8, 0xa9, 0x9a, 0xdf, 0xbf, 0x94, 0x0e, 0x79, 0x34, 0xcd, 0xfb,
	0x07, 0x33, 0xad, 0x24, 0x00, 0x32, 0xa6, 0xbd, 0xf5, 0x4b, 0x16, 0xd6, 0x76, 0x15, 0xb4, 0xff,
	0x1d, 0xe8, 0x7e, 0x78, 0x29, 0xd0, 0x5d, 0xa3, 0x65, 0x24, 0x21, 0x32, 0xc1, 0xee, 0x77, 0x03,
	0x6a, 0x67, 0x83, 0xee, 0x0b, 0x15, 0xfe, 0x74, 0xaf, 0x3e, 0x48, 0x28, 0xf3, 0x5a, 0x5c, 0x99,
	0x37, 0x55, 0x04, 0x31, 0xd5, 0x7e, 0x98, 0x58, 0xed, 0xb5, 0xb8, 0x6a, 0x1f, 0x19, 0x8b, 0x2b,
	0xfa, 0xf7, 0xe2, 0x8a, 0xfe, 0xd5, 0xab, 0x45, 0x3f, 0xb2, 0x11, 0xae, 0xfd, 0x47, 0xd1, 0xf6,
	0x06, 0x52, 0x77, 0x4d, 0xeb, 0x2a, 0xf9, 0x1d, 0x97, 0x12, 0x26, 0x41, 0x17, 0xcc, 0xf1, 0xec,
	0x68, 0xf3, 0xd3, 0xbd, 0xa3, 0x3c, 0xe9, 0x1d, 0xef, 0x4c, 0x7a, 0xc7, 0xe2, 0x1c, 0xd6, 0xc6,
	0x9d, 0xe5, 0x3e, 0xe4, 0x49, 0x47, 0x38, 0x17, 0xb4, 0x7a, 0x2b, 0xd2, 0xf4, 0x94, 0xda, 0xb6,
	0xef, 0xbb, 0x94, 0x78, 0x58, 0xcb, 0x58, 0x3f, 0x66, 0xe1, 0x4e, 0x5c, 0x86, 0x65, 0x73, 0xfb,
	0x17, 0x1f, 0x6c, 0x0f, 0x20, 0x3f, 0x94, 0x61, 0x69, 0x66, 0xac, 0x85, 0x5e, 0xa6, 0x2a, 0xde,
	0x20, 0xc2, 0x3d, 0x9f, 0x1d, 0x08, 0xda, 0xc7, 0x5a, 0xd6, 0xfc, 0x2c, 0x54, 0x55, 0x18, 0x96,
	0xa5, 0xb7, 0x56, 0xfa, 0xda, 0xba, 0xc5, 0xa3, 0xcf, 0x2f, 0xeb, 0x53, 0xa8, 0xed, 0x52, 0x97,
	0xde, 0x60, 0x39, 0x98, 0x30, 0x09, 0x79, 0xf3, 0xaf, 0x82, 0xfe, 0x29, 0x71, 0x30, 0x89, 0xec,
	0x84, 0xb2, 0x0b, 0xa7, 0x43, 0xd1, 0x25, 0xe4, 0x82, 0x07, 0x21, 0x4a, 0xf3, 0x5e, 0x34, 0x3f,
	0x48, 0xa1, 0xd4, 0x1c, 0x23, 0x69, 0x43, 0x5e, 0x4d, 0x7f, 0x34, 0xbb, 0x15, 0x27, 0x3c, 0x0f,
	0xcc, 0x79, 0xf1, 0x0e, 0x1c, 0xa9, 0xdc, 0x26, 0x38, 0x4a, 0x68, 0x47, 0xf3, 0x3b, 0xfa, 0x26,
	0x03, 0x30, 0x61, 0x11, 0x7a, 0x78, 0x2d, 0x6f, 0xa1, 0xd2, 0x30, 0x1f, 0xa7, 0xd5, 0x9c, 0xa0,
	0xfb, 0x35, 0xe4, 0xd5, 0x1c, 0x43, 0xa9, 0x06, 0x9d, 0xf9, 0x61, 0x1a, 0xad, 0x89, 0xfb, 0xe7,
	0x19, 0x28, 0xe8, 0x61, 0x80, 0xd2, 0x8d, 0x0b, 0xf3, 0x51, 0x2a, 0xb5, 0x08, 0x02, 0xaa, 0xaa,
	0x12, 0x10, 0x48, 0x28, 0xbb, 0x04, 0x04, 0x12, 0xb4, 0xa2, 0x08, 0xe8, 0x37, 0x33, 0x4a, 0xf7,
	0xc6, 0x4e, 0x40, 0x20, 0x49, 0x6d, 0x1c, 0xc2, 0xf6, 0x53, 0xb8, 0x6b, 0xbb, 0x7e, 0x9b, 0xb8,
	0xda, 0x0e, 0x19, 0x38, 0x4d, 0x9b, 0x0d, 0x3a, 0x57, 0x0d, 0x6e, 0xbf, 0x32, 0xdd, 0x20, 0x1e,
	0x0f, 0x9c, 0xe3, 0xff, 0x7d, 0xb2, 0x20, 0x15, 0xdb, 0x79, 0xf9, 0x2f, 0xdb, 0xd6, 0xdf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x6a, 0xf2, 0x46, 0xda, 0xd1, 0x13, 0x00, 0x00,
}
