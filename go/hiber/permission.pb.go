// Code generated by protoc-gen-go.
// source: permission.proto
// DO NOT EDIT!

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Permissions limit what a user can do through the API.
// By default, everyone who has access to an organization, can access:
// - organization data
// - dashboard (including the map, and message count for the past days, and any events they have access to)
// - tags
// - deleting tags, but only if they are allowed to update the modems and webhooks the tag is assigned to
//
// Events are filtered by permission, i.e. if you cannot access the users, you would not see user-related events.
// Requesting user-related events explicitly if you cannot access the users will return an error.
type OrganizationPermission int32

const (
	OrganizationPermission_PERMISSION_DEFAULT OrganizationPermission = 0
	// Create a new child organization.
	OrganizationPermission_ORGANIZATION_CREATE OrganizationPermission = 1
	// Update the organizations data, such as billing information, address, and contact.
	OrganizationPermission_ORGANIZATION_UPDATE OrganizationPermission = 2
	// Delete child organizations.
	// You cannot delete your own organization. To delete your organization, contact support.
	OrganizationPermission_ORGANIZATION_DELETE OrganizationPermission = 3
	// List modems, see their details and health
	OrganizationPermission_MODEMS OrganizationPermission = 10
	// Update modems, such as their peripherals, display name and tags. Includes MODEMS permission.
	OrganizationPermission_MODEMS_UPDATE OrganizationPermission = 11
	// Show and regenerate license keys. Includes MODEMS permission.
	OrganizationPermission_MODEMS_LICENSE_KEYS OrganizationPermission = 12
	// Read modem messages.
	OrganizationPermission_MODEM_MESSAGES OrganizationPermission = 15
	// Send modem messages using the TestingService. Does not include MODEMS or MESSAGES permission.
	OrganizationPermission_MODEM_MESSAGES_SEND_TEST_MESSAGES OrganizationPermission = 16
	// See modem transfers, inbound and outbound modems. Includes modems permission.
	OrganizationPermission_MODEM_TRANSFERS OrganizationPermission = 20
	// Transfer modems to another organization, cancel open transfers and send return transfers.
	// Includes modems_transfers permission.
	OrganizationPermission_MODEM_TRANSFERS_SEND OrganizationPermission = 21
	// Mark transfers as received, prepare modems for return. This does not include actually sending the return transfer.
	// Includes modems_transfers permission.
	OrganizationPermission_MODEM_TRANSFERS_PROCESS OrganizationPermission = 22
	// Claiming modems.
	OrganizationPermission_MODEM_CLAIM OrganizationPermission = 25
	// List all users, see their names and email addresses.
	OrganizationPermission_USERS OrganizationPermission = 30
	// Approve or create new users, remove users from the organization. Includes users permission.
	OrganizationPermission_USERS_MANAGE OrganizationPermission = 31
	// Manage publishers.
	OrganizationPermission_PUBLISHERS OrganizationPermission = 35
	// Manage tokens.
	OrganizationPermission_TOKENS OrganizationPermission = 36
	// Read and use uploaded certificates (i.e. for publishers).
	OrganizationPermission_CERTIFICATES OrganizationPermission = 38
	// Upload certificates, and update or delete uploaded certificates.
	OrganizationPermission_CERTIFICATES_MANAGE OrganizationPermission = 39
)

var OrganizationPermission_name = map[int32]string{
	0:  "PERMISSION_DEFAULT",
	1:  "ORGANIZATION_CREATE",
	2:  "ORGANIZATION_UPDATE",
	3:  "ORGANIZATION_DELETE",
	10: "MODEMS",
	11: "MODEMS_UPDATE",
	12: "MODEMS_LICENSE_KEYS",
	15: "MODEM_MESSAGES",
	16: "MODEM_MESSAGES_SEND_TEST_MESSAGES",
	20: "MODEM_TRANSFERS",
	21: "MODEM_TRANSFERS_SEND",
	22: "MODEM_TRANSFERS_PROCESS",
	25: "MODEM_CLAIM",
	30: "USERS",
	31: "USERS_MANAGE",
	35: "PUBLISHERS",
	36: "TOKENS",
	38: "CERTIFICATES",
	39: "CERTIFICATES_MANAGE",
}
var OrganizationPermission_value = map[string]int32{
	"PERMISSION_DEFAULT":                0,
	"ORGANIZATION_CREATE":               1,
	"ORGANIZATION_UPDATE":               2,
	"ORGANIZATION_DELETE":               3,
	"MODEMS":                            10,
	"MODEMS_UPDATE":                     11,
	"MODEMS_LICENSE_KEYS":               12,
	"MODEM_MESSAGES":                    15,
	"MODEM_MESSAGES_SEND_TEST_MESSAGES": 16,
	"MODEM_TRANSFERS":                   20,
	"MODEM_TRANSFERS_SEND":              21,
	"MODEM_TRANSFERS_PROCESS":           22,
	"MODEM_CLAIM":                       25,
	"USERS":                             30,
	"USERS_MANAGE":                      31,
	"PUBLISHERS":                        35,
	"TOKENS":                            36,
	"CERTIFICATES":                      38,
	"CERTIFICATES_MANAGE":               39,
}

func (x OrganizationPermission) String() string {
	return proto.EnumName(OrganizationPermission_name, int32(x))
}
func (OrganizationPermission) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

type UserPermission int32

const (
	// Read your name, email, linked organizations and mission-control settings.
	UserPermission_READ UserPermission = 0
	// Update your personal information, mission-control settings and default organization. Includes read permission.
	UserPermission_UPDATE UserPermission = 1
	// Request access to an organization and cancel open requests. Does not include read permission.
	UserPermission_REQUEST_ACCESS UserPermission = 2
	// Delete your user account permanently. Includes read permission.
	UserPermission_DELETE UserPermission = 3
)

var UserPermission_name = map[int32]string{
	0: "READ",
	1: "UPDATE",
	2: "REQUEST_ACCESS",
	3: "DELETE",
}
var UserPermission_value = map[string]int32{
	"READ":           0,
	"UPDATE":         1,
	"REQUEST_ACCESS": 2,
	"DELETE":         3,
}

func (x UserPermission) String() string {
	return proto.EnumName(UserPermission_name, int32(x))
}
func (UserPermission) EnumDescriptor() ([]byte, []int) { return fileDescriptor11, []int{1} }

func init() {
	proto.RegisterEnum("hiber.OrganizationPermission", OrganizationPermission_name, OrganizationPermission_value)
	proto.RegisterEnum("hiber.UserPermission", UserPermission_name, UserPermission_value)
}

func init() { proto.RegisterFile("permission.proto", fileDescriptor11) }

var fileDescriptor11 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x92, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x86, 0x9b, 0x96, 0x56, 0x30, 0x2d, 0xc9, 0x30, 0x6d, 0x53, 0x10, 0x12, 0x1f, 0xe2, 0x4b,
	0xea, 0xc1, 0x17, 0x7e, 0xc1, 0xd6, 0x1e, 0x87, 0x55, 0xfd, 0xc5, 0xce, 0xfa, 0x40, 0x2f, 0x96,
	0x83, 0xa2, 0x60, 0x29, 0xc4, 0x96, 0x93, 0x13, 0x7f, 0x8a, 0xbf, 0x88, 0xd6, 0x4e, 0x20, 0x24,
	0xb7, 0xd1, 0xfb, 0xbc, 0x33, 0xda, 0x99, 0x7d, 0x01, 0x9b, 0x59, 0xfb, 0xb3, 0x5a, 0xad, 0xaa,
	0x7a, 0xe9, 0x35, 0x6d, 0xbd, 0xae, 0xe9, 0xf4, 0x47, 0x35, 0x9d, 0xb5, 0xb7, 0xbf, 0x4f, 0x60,
	0x9c, 0xb6, 0xf3, 0x72, 0x59, 0xfd, 0x2a, 0xd7, 0x55, 0xbd, 0xcc, 0xfe, 0xfa, 0x68, 0x0c, 0x94,
	0xb1, 0x89, 0xb5, 0x88, 0x4e, 0x93, 0x22, 0xe0, 0x50, 0xe5, 0x91, 0xc5, 0x23, 0xba, 0x81, 0xcb,
	0xd4, 0x4c, 0x54, 0xa2, 0x1f, 0x94, 0x75, 0xc4, 0x37, 0xac, 0x2c, 0xe3, 0xe0, 0x00, 0xe4, 0x59,
	0xe0, 0xc0, 0xf1, 0x01, 0x08, 0x38, 0x62, 0xcb, 0x78, 0x42, 0x00, 0x67, 0x71, 0x1a, 0x70, 0x2c,
	0x08, 0xf4, 0x0c, 0x9e, 0xf6, 0xf5, 0xb6, 0xef, 0xdc, 0xf5, 0x6d, 0xa4, 0x48, 0xfb, 0x9c, 0x08,
	0x17, 0xf7, 0xfc, 0x4d, 0xf0, 0x82, 0x08, 0x86, 0x1d, 0x28, 0x62, 0x16, 0x51, 0x13, 0x16, 0x1c,
	0xd1, 0x07, 0x78, 0xfb, 0xbf, 0x56, 0x08, 0x27, 0x41, 0x61, 0x59, 0xec, 0x3f, 0x1b, 0xd2, 0x25,
	0x8c, 0x7a, 0x9b, 0x35, 0x2a, 0x91, 0x90, 0x8d, 0xe0, 0x15, 0x3d, 0x87, 0xab, 0x3d, 0xb1, 0x6b,
	0xc6, 0x6b, 0x7a, 0x09, 0x37, 0xfb, 0x24, 0x33, 0xa9, 0xcf, 0x22, 0x38, 0xa6, 0x11, 0x9c, 0xf7,
	0xd0, 0x8f, 0x94, 0x8e, 0xf1, 0x05, 0x3d, 0x81, 0xd3, 0x5c, 0xdc, 0xc8, 0x57, 0x84, 0x70, 0xd1,
	0x95, 0x45, 0xac, 0x12, 0x35, 0x61, 0x7c, 0x4d, 0x43, 0x80, 0x2c, 0xbf, 0x8b, 0xb4, 0x7c, 0x71,
	0x8e, 0x77, 0x6e, 0x79, 0x9b, 0xde, 0x73, 0x22, 0xf8, 0xde, 0xb9, 0x7d, 0x36, 0x56, 0x87, 0xda,
	0x57, 0x96, 0x05, 0x3f, 0xba, 0xdd, 0x77, 0x95, 0xed, 0x98, 0x4f, 0xb7, 0x21, 0x0c, 0xf3, 0xd5,
	0xac, 0xdd, 0xf9, 0xa8, 0xc7, 0xf0, 0xc8, 0xb0, 0x0a, 0xf0, 0xc8, 0x8d, 0xdc, 0x1c, 0x6f, 0xe0,
	0x6e, 0x64, 0xf8, 0x6b, 0xee, 0xd6, 0x57, 0x7e, 0xf7, 0xe0, 0x63, 0xc7, 0xb7, 0xb7, 0xbf, 0x7b,
	0x03, 0xd7, 0xf3, 0x45, 0x3d, 0x2d, 0x17, 0x5e, 0x97, 0x04, 0xaf, 0x6c, 0x2a, 0x6f, 0xde, 0x36,
	0xdf, 0xb3, 0xc1, 0x43, 0x9f, 0x8d, 0xe9, 0x59, 0x97, 0x94, 0xcf, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xe1, 0x1e, 0x10, 0xfc, 0x3d, 0x02, 0x00, 0x00,
}
