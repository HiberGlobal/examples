// Code generated by protoc-gen-go. DO NOT EDIT.
// source: certificate.proto

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Certificate struct {
	Id                int64       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name              string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Certificate       *BytesOrHex `protobuf:"bytes,3,opt,name=certificate" json:"certificate,omitempty"`
	HasPrivateKey     bool        `protobuf:"varint,4,opt,name=has_private_key,json=hasPrivateKey" json:"has_private_key,omitempty"`
	CaCertificateName string      `protobuf:"bytes,5,opt,name=ca_certificate_name,json=caCertificateName" json:"ca_certificate_name,omitempty"`
	CaCertificateId   int64       `protobuf:"varint,6,opt,name=ca_certificate_id,json=caCertificateId" json:"ca_certificate_id,omitempty"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Certificate) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Certificate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Certificate) GetCertificate() *BytesOrHex {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *Certificate) GetHasPrivateKey() bool {
	if m != nil {
		return m.HasPrivateKey
	}
	return false
}

func (m *Certificate) GetCaCertificateName() string {
	if m != nil {
		return m.CaCertificateName
	}
	return ""
}

func (m *Certificate) GetCaCertificateId() int64 {
	if m != nil {
		return m.CaCertificateId
	}
	return 0
}

type CertificateSelection struct {
	CertificateIds   []int64 `protobuf:"varint,1,rep,packed,name=certificate_ids,json=certificateIds" json:"certificate_ids,omitempty"`
	Search           string  `protobuf:"bytes,2,opt,name=search" json:"search,omitempty"`
	CaCertificateIds []int64 `protobuf:"varint,3,rep,packed,name=ca_certificate_ids,json=caCertificateIds" json:"ca_certificate_ids,omitempty"`
}

func (m *CertificateSelection) Reset()                    { *m = CertificateSelection{} }
func (m *CertificateSelection) String() string            { return proto.CompactTextString(m) }
func (*CertificateSelection) ProtoMessage()               {}
func (*CertificateSelection) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CertificateSelection) GetCertificateIds() []int64 {
	if m != nil {
		return m.CertificateIds
	}
	return nil
}

func (m *CertificateSelection) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

func (m *CertificateSelection) GetCaCertificateIds() []int64 {
	if m != nil {
		return m.CaCertificateIds
	}
	return nil
}

type ListCertificatesRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *CertificateSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination           `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
	// Include the actual certificate content in the response.
	IncludeCertificateContentInResponse bool `protobuf:"varint,4,opt,name=include_certificate_content_in_response,json=includeCertificateContentInResponse" json:"include_certificate_content_in_response,omitempty"`
}

func (m *ListCertificatesRequest) Reset()                    { *m = ListCertificatesRequest{} }
func (m *ListCertificatesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListCertificatesRequest) ProtoMessage()               {}
func (*ListCertificatesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ListCertificatesRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ListCertificatesRequest) GetSelection() *CertificateSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListCertificatesRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListCertificatesRequest) GetIncludeCertificateContentInResponse() bool {
	if m != nil {
		return m.IncludeCertificateContentInResponse
	}
	return false
}

type ListCertificatesRequest_Response struct {
	Certificates []*Certificate           `protobuf:"bytes,1,rep,name=certificates" json:"certificates,omitempty"`
	Request      *ListCertificatesRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination   *Pagination_Result       `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListCertificatesRequest_Response) Reset()         { *m = ListCertificatesRequest_Response{} }
func (m *ListCertificatesRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListCertificatesRequest_Response) ProtoMessage()    {}
func (*ListCertificatesRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{2, 0}
}

func (m *ListCertificatesRequest_Response) GetCertificates() []*Certificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *ListCertificatesRequest_Response) GetRequest() *ListCertificatesRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListCertificatesRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type UploadCertificateRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization      string                                      `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	UploadCertificate *UploadCertificateRequest_UploadCertificate `protobuf:"bytes,2,opt,name=upload_certificate,json=uploadCertificate" json:"upload_certificate,omitempty"`
	// Optionally, either upload a CA certificate or provide the id of a previously uploaded CA certificate.
	UploadCaCertificate *UploadCertificateRequest_UploadCertificate `protobuf:"bytes,3,opt,name=upload_ca_certificate,json=uploadCaCertificate" json:"upload_ca_certificate,omitempty"`
	// Optionally, either upload a CA certificate or provide the id of a previously uploaded CA certificate.
	CaCertificateId int64 `protobuf:"varint,4,opt,name=ca_certificate_id,json=caCertificateId" json:"ca_certificate_id,omitempty"`
	// Include the actual certificate content in the response.
	IncludeCertificateContentInResponse bool `protobuf:"varint,5,opt,name=include_certificate_content_in_response,json=includeCertificateContentInResponse" json:"include_certificate_content_in_response,omitempty"`
}

func (m *UploadCertificateRequest) Reset()                    { *m = UploadCertificateRequest{} }
func (m *UploadCertificateRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadCertificateRequest) ProtoMessage()               {}
func (*UploadCertificateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *UploadCertificateRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UploadCertificateRequest) GetUploadCertificate() *UploadCertificateRequest_UploadCertificate {
	if m != nil {
		return m.UploadCertificate
	}
	return nil
}

func (m *UploadCertificateRequest) GetUploadCaCertificate() *UploadCertificateRequest_UploadCertificate {
	if m != nil {
		return m.UploadCaCertificate
	}
	return nil
}

func (m *UploadCertificateRequest) GetCaCertificateId() int64 {
	if m != nil {
		return m.CaCertificateId
	}
	return 0
}

func (m *UploadCertificateRequest) GetIncludeCertificateContentInResponse() bool {
	if m != nil {
		return m.IncludeCertificateContentInResponse
	}
	return false
}

type UploadCertificateRequest_Response struct {
	Certificate *Certificate              `protobuf:"bytes,1,opt,name=certificate" json:"certificate,omitempty"`
	Request     *UploadCertificateRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *UploadCertificateRequest_Response) Reset()         { *m = UploadCertificateRequest_Response{} }
func (m *UploadCertificateRequest_Response) String() string { return proto.CompactTextString(m) }
func (*UploadCertificateRequest_Response) ProtoMessage()    {}
func (*UploadCertificateRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{3, 0}
}

func (m *UploadCertificateRequest_Response) GetCertificate() *Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *UploadCertificateRequest_Response) GetRequest() *UploadCertificateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type UploadCertificateRequest_UploadCertificate struct {
	Name        string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Certificate *BytesOrHex `protobuf:"bytes,2,opt,name=certificate" json:"certificate,omitempty"`
	// Private key is optional, and will not be retrievable from the API
	PrivateKey *BytesOrHex `protobuf:"bytes,3,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
}

func (m *UploadCertificateRequest_UploadCertificate) Reset() {
	*m = UploadCertificateRequest_UploadCertificate{}
}
func (m *UploadCertificateRequest_UploadCertificate) String() string {
	return proto.CompactTextString(m)
}
func (*UploadCertificateRequest_UploadCertificate) ProtoMessage() {}
func (*UploadCertificateRequest_UploadCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{3, 1}
}

func (m *UploadCertificateRequest_UploadCertificate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UploadCertificateRequest_UploadCertificate) GetCertificate() *BytesOrHex {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *UploadCertificateRequest_UploadCertificate) GetPrivateKey() *BytesOrHex {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

type RenameCertificateRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *CertificateSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	NewName      string                `protobuf:"bytes,3,opt,name=new_name,json=newName" json:"new_name,omitempty"`
	// Include the actual certificate content in the response.
	IncludeCertificateContentInResponse bool `protobuf:"varint,4,opt,name=include_certificate_content_in_response,json=includeCertificateContentInResponse" json:"include_certificate_content_in_response,omitempty"`
}

func (m *RenameCertificateRequest) Reset()                    { *m = RenameCertificateRequest{} }
func (m *RenameCertificateRequest) String() string            { return proto.CompactTextString(m) }
func (*RenameCertificateRequest) ProtoMessage()               {}
func (*RenameCertificateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *RenameCertificateRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *RenameCertificateRequest) GetSelection() *CertificateSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *RenameCertificateRequest) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

func (m *RenameCertificateRequest) GetIncludeCertificateContentInResponse() bool {
	if m != nil {
		return m.IncludeCertificateContentInResponse
	}
	return false
}

type RenameCertificateRequest_Response struct {
	Certificates []*Certificate            `protobuf:"bytes,1,rep,name=certificates" json:"certificates,omitempty"`
	Request      *RenameCertificateRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination   *Pagination_Result        `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *RenameCertificateRequest_Response) Reset()         { *m = RenameCertificateRequest_Response{} }
func (m *RenameCertificateRequest_Response) String() string { return proto.CompactTextString(m) }
func (*RenameCertificateRequest_Response) ProtoMessage()    {}
func (*RenameCertificateRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{4, 0}
}

func (m *RenameCertificateRequest_Response) GetCertificates() []*Certificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *RenameCertificateRequest_Response) GetRequest() *RenameCertificateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *RenameCertificateRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type DeleteCertificateRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *CertificateSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
}

func (m *DeleteCertificateRequest) Reset()                    { *m = DeleteCertificateRequest{} }
func (m *DeleteCertificateRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCertificateRequest) ProtoMessage()               {}
func (*DeleteCertificateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *DeleteCertificateRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *DeleteCertificateRequest) GetSelection() *CertificateSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

type DeleteCertificateRequest_Response struct {
	DeletedCertificateIds []int64                   `protobuf:"varint,1,rep,packed,name=deleted_certificate_ids,json=deletedCertificateIds" json:"deleted_certificate_ids,omitempty"`
	Request               *DeleteCertificateRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *DeleteCertificateRequest_Response) Reset()         { *m = DeleteCertificateRequest_Response{} }
func (m *DeleteCertificateRequest_Response) String() string { return proto.CompactTextString(m) }
func (*DeleteCertificateRequest_Response) ProtoMessage()    {}
func (*DeleteCertificateRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{5, 0}
}

func (m *DeleteCertificateRequest_Response) GetDeletedCertificateIds() []int64 {
	if m != nil {
		return m.DeletedCertificateIds
	}
	return nil
}

func (m *DeleteCertificateRequest_Response) GetRequest() *DeleteCertificateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func init() {
	proto.RegisterType((*Certificate)(nil), "hiber.certificate.Certificate")
	proto.RegisterType((*CertificateSelection)(nil), "hiber.certificate.CertificateSelection")
	proto.RegisterType((*ListCertificatesRequest)(nil), "hiber.certificate.ListCertificatesRequest")
	proto.RegisterType((*ListCertificatesRequest_Response)(nil), "hiber.certificate.ListCertificatesRequest.Response")
	proto.RegisterType((*UploadCertificateRequest)(nil), "hiber.certificate.UploadCertificateRequest")
	proto.RegisterType((*UploadCertificateRequest_Response)(nil), "hiber.certificate.UploadCertificateRequest.Response")
	proto.RegisterType((*UploadCertificateRequest_UploadCertificate)(nil), "hiber.certificate.UploadCertificateRequest.UploadCertificate")
	proto.RegisterType((*RenameCertificateRequest)(nil), "hiber.certificate.RenameCertificateRequest")
	proto.RegisterType((*RenameCertificateRequest_Response)(nil), "hiber.certificate.RenameCertificateRequest.Response")
	proto.RegisterType((*DeleteCertificateRequest)(nil), "hiber.certificate.DeleteCertificateRequest")
	proto.RegisterType((*DeleteCertificateRequest_Response)(nil), "hiber.certificate.DeleteCertificateRequest.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CertificateService service

type CertificateServiceClient interface {
	List(ctx context.Context, in *ListCertificatesRequest, opts ...grpc.CallOption) (*ListCertificatesRequest_Response, error)
	Rename(ctx context.Context, in *RenameCertificateRequest, opts ...grpc.CallOption) (*RenameCertificateRequest_Response, error)
	Upload(ctx context.Context, in *UploadCertificateRequest, opts ...grpc.CallOption) (*UploadCertificateRequest_Response, error)
	Delete(ctx context.Context, in *DeleteCertificateRequest, opts ...grpc.CallOption) (*DeleteCertificateRequest_Response, error)
}

type certificateServiceClient struct {
	cc *grpc.ClientConn
}

func NewCertificateServiceClient(cc *grpc.ClientConn) CertificateServiceClient {
	return &certificateServiceClient{cc}
}

func (c *certificateServiceClient) List(ctx context.Context, in *ListCertificatesRequest, opts ...grpc.CallOption) (*ListCertificatesRequest_Response, error) {
	out := new(ListCertificatesRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.certificate.CertificateService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateServiceClient) Rename(ctx context.Context, in *RenameCertificateRequest, opts ...grpc.CallOption) (*RenameCertificateRequest_Response, error) {
	out := new(RenameCertificateRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.certificate.CertificateService/Rename", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateServiceClient) Upload(ctx context.Context, in *UploadCertificateRequest, opts ...grpc.CallOption) (*UploadCertificateRequest_Response, error) {
	out := new(UploadCertificateRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.certificate.CertificateService/Upload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateServiceClient) Delete(ctx context.Context, in *DeleteCertificateRequest, opts ...grpc.CallOption) (*DeleteCertificateRequest_Response, error) {
	out := new(DeleteCertificateRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.certificate.CertificateService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CertificateService service

type CertificateServiceServer interface {
	List(context.Context, *ListCertificatesRequest) (*ListCertificatesRequest_Response, error)
	Rename(context.Context, *RenameCertificateRequest) (*RenameCertificateRequest_Response, error)
	Upload(context.Context, *UploadCertificateRequest) (*UploadCertificateRequest_Response, error)
	Delete(context.Context, *DeleteCertificateRequest) (*DeleteCertificateRequest_Response, error)
}

func RegisterCertificateServiceServer(s *grpc.Server, srv CertificateServiceServer) {
	s.RegisterService(&_CertificateService_serviceDesc, srv)
}

func _CertificateService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.certificate.CertificateService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServiceServer).List(ctx, req.(*ListCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateService_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServiceServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.certificate.CertificateService/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServiceServer).Rename(ctx, req.(*RenameCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.certificate.CertificateService/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServiceServer).Upload(ctx, req.(*UploadCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.certificate.CertificateService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServiceServer).Delete(ctx, req.(*DeleteCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CertificateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.certificate.CertificateService",
	HandlerType: (*CertificateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CertificateService_List_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _CertificateService_Rename_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _CertificateService_Upload_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CertificateService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "certificate.proto",
}

func init() { proto.RegisterFile("certificate.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 745 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x71, 0x92, 0xb6, 0x93, 0xd2, 0xe2, 0x2d, 0xa5, 0x26, 0x07, 0x14, 0x8c, 0x44, 0xa3,
	0x82, 0x2c, 0x91, 0x22, 0xc4, 0x01, 0x24, 0x48, 0x5b, 0x89, 0x0a, 0x04, 0xd5, 0x02, 0x17, 0x2e,
	0xd6, 0xc6, 0x5e, 0x92, 0x55, 0x8d, 0xed, 0x7a, 0x9d, 0x96, 0x72, 0xe7, 0xc0, 0x0d, 0xc4, 0x2f,
	0x71, 0x40, 0x1c, 0xe0, 0x0f, 0xf8, 0x00, 0xbe, 0x02, 0x65, 0xed, 0xb8, 0xeb, 0xc4, 0x86, 0x18,
	0x8a, 0xb8, 0xc5, 0xbb, 0x33, 0xf3, 0x66, 0xde, 0xcc, 0xbe, 0x09, 0x68, 0x36, 0x0d, 0x23, 0xf6,
	0x92, 0xd9, 0x24, 0xa2, 0x66, 0x10, 0xfa, 0x91, 0x8f, 0xb4, 0x01, 0xeb, 0xd1, 0xd0, 0x94, 0x2e,
	0x9a, 0xd0, 0x23, 0x3c, 0xb9, 0x36, 0x7e, 0x28, 0xd0, 0xd8, 0x3a, 0xb9, 0x43, 0x4b, 0x50, 0x61,
	0x8e, 0xae, 0xb4, 0x94, 0xb6, 0x8a, 0x2b, 0xcc, 0x41, 0x08, 0xaa, 0x1e, 0x79, 0x45, 0xf5, 0x4a,
	0x4b, 0x69, 0x2f, 0x60, 0xf1, 0x1b, 0x6d, 0x42, 0x43, 0x0a, 0xa7, 0xab, 0x2d, 0xa5, 0xdd, 0xe8,
	0x68, 0x66, 0x0c, 0xd4, 0x3d, 0x8e, 0x28, 0x7f, 0x12, 0x3e, 0xa0, 0xaf, 0xb1, 0x6c, 0x85, 0xae,
	0xc2, 0xf2, 0x80, 0x70, 0x2b, 0x08, 0xd9, 0x21, 0x89, 0xa8, 0xb5, 0x4f, 0x8f, 0xf5, 0x6a, 0x4b,
	0x69, 0xcf, 0xe3, 0xb3, 0x03, 0xc2, 0xf7, 0xe2, 0xd3, 0x87, 0xf4, 0x18, 0x99, 0xb0, 0x62, 0x13,
	0x4b, 0xf2, 0xb4, 0x04, 0x7e, 0x4d, 0xe0, 0x6b, 0x36, 0x91, 0x92, 0x7d, 0x3c, 0x4a, 0x66, 0x03,
	0xb4, 0x09, 0x7b, 0xe6, 0xe8, 0x75, 0x91, 0xff, 0x72, 0xc6, 0x7a, 0xd7, 0x31, 0xde, 0x2a, 0x70,
	0x5e, 0x3a, 0x79, 0x4a, 0x5d, 0x6a, 0x47, 0xcc, 0xf7, 0xd0, 0x3a, 0x2c, 0x67, 0x23, 0x70, 0x5d,
	0x69, 0xa9, 0x6d, 0x15, 0x2f, 0xd9, 0x72, 0x00, 0x8e, 0x2e, 0x40, 0x9d, 0x53, 0x12, 0xda, 0x83,
	0x84, 0x90, 0xe4, 0x0b, 0x5d, 0x07, 0x34, 0x95, 0x05, 0xd7, 0x55, 0x11, 0xe3, 0xdc, 0x44, 0x1a,
	0xdc, 0xf8, 0xae, 0xc2, 0xda, 0x23, 0xc6, 0x23, 0xe9, 0x98, 0x63, 0x7a, 0x30, 0xa4, 0x3c, 0x42,
	0x06, 0x2c, 0xfa, 0x61, 0x9f, 0x78, 0xec, 0x0d, 0x19, 0xa5, 0x26, 0x5a, 0xb1, 0x80, 0x33, 0x67,
	0x68, 0x07, 0x16, 0xf8, 0x38, 0x77, 0x91, 0x48, 0xa3, 0xb3, 0x6e, 0x4e, 0xf5, 0xd9, 0xcc, 0x2b,
	0x15, 0x9f, 0x78, 0xa2, 0x1b, 0x00, 0x01, 0xe9, 0x33, 0x2f, 0x06, 0xca, 0xb6, 0x71, 0x2f, 0xbd,
	0xc0, 0x92, 0x11, 0x7a, 0x06, 0xeb, 0xcc, 0xb3, 0xdd, 0xa1, 0x43, 0x33, 0xc5, 0xda, 0xbe, 0x17,
	0x51, 0x2f, 0xb2, 0x98, 0x67, 0x85, 0x94, 0x07, 0xbe, 0xc7, 0x69, 0xd2, 0xdd, 0x2b, 0x89, 0xb9,
	0x94, 0xcb, 0x56, 0x6c, 0xbc, 0xeb, 0xe1, 0xc4, 0xb4, 0xf9, 0x55, 0x81, 0xf9, 0xf1, 0x07, 0xea,
	0xc2, 0xa2, 0x14, 0x3a, 0x6e, 0x44, 0xa3, 0x73, 0xe9, 0xd7, 0xf5, 0xe1, 0x8c, 0x0f, 0xda, 0x86,
	0xb9, 0x30, 0xe6, 0x33, 0xa1, 0x67, 0x23, 0xc7, 0xbd, 0xa0, 0x03, 0x78, 0xec, 0x8a, 0x6e, 0xe7,
	0xf0, 0xa3, 0x4f, 0xf1, 0x63, 0x62, 0xca, 0x87, 0x6e, 0x24, 0xd3, 0x64, 0x7c, 0xa9, 0x81, 0xfe,
	0x3c, 0x70, 0x7d, 0xe2, 0xc8, 0x39, 0x96, 0xe8, 0xb0, 0x0b, 0x68, 0x28, 0xfc, 0x65, 0x9a, 0x93,
	0x5a, 0xee, 0xe6, 0xd4, 0x52, 0x04, 0x96, 0x73, 0xa1, 0x0d, 0x27, 0x8f, 0xd0, 0x01, 0xac, 0x8e,
	0xd1, 0x32, 0x43, 0x9c, 0xd4, 0xfc, 0x97, 0x80, 0x2b, 0x09, 0xa0, 0xfc, 0x0a, 0xf2, 0x9f, 0x6d,
	0x35, 0xf7, 0xd9, 0x96, 0x19, 0xba, 0xda, 0xec, 0x43, 0xf7, 0x51, 0x1e, 0xba, 0x7b, 0x59, 0x49,
	0x53, 0x44, 0xdd, 0xbf, 0x9b, 0xb9, 0x8c, 0xbe, 0xed, 0x4c, 0x8e, 0xdc, 0xb5, 0x12, 0xac, 0xa5,
	0x33, 0xd7, 0x7c, 0xaf, 0x80, 0x36, 0x65, 0x95, 0xaa, 0xb0, 0x52, 0xac, 0xc2, 0x95, 0x99, 0x54,
	0xb8, 0x03, 0x0d, 0x59, 0x81, 0x0b, 0xa5, 0x1b, 0x82, 0x54, 0x91, 0x8d, 0xcf, 0x2a, 0xe8, 0x98,
	0x8e, 0x30, 0xff, 0x70, 0x98, 0x4f, 0x49, 0xae, 0x2e, 0xc2, 0xbc, 0x47, 0x8f, 0xe2, 0x75, 0xa0,
	0x0a, 0x98, 0x39, 0x8f, 0x1e, 0x89, 0x25, 0xf0, 0x6f, 0x64, 0xe9, 0xdb, 0x69, 0xcb, 0xd2, 0x4c,
	0x33, 0x52, 0x44, 0xf5, 0x69, 0xe8, 0xd2, 0x87, 0x0a, 0xe8, 0xdb, 0xd4, 0xa5, 0xd1, 0xff, 0x6d,
	0x65, 0xf3, 0x9d, 0xcc, 0xec, 0x2d, 0x58, 0x73, 0x44, 0x4e, 0x8e, 0x95, 0xbf, 0x84, 0x57, 0x93,
	0xeb, 0xec, 0x16, 0x9d, 0x8d, 0xcd, 0xa2, 0x6a, 0x53, 0x36, 0x3b, 0x9f, 0x54, 0x40, 0x99, 0x7c,
	0xc3, 0x43, 0x66, 0x53, 0xd4, 0x87, 0xea, 0x68, 0x41, 0xa0, 0x12, 0x9b, 0xa3, 0xb9, 0x39, 0xbb,
	0xad, 0x99, 0x96, 0xbf, 0x0f, 0xf5, 0xb8, 0xe5, 0xa8, 0xcc, 0x34, 0x34, 0x6f, 0x96, 0x30, 0xce,
	0x80, 0xc5, 0xea, 0x82, 0xca, 0xc8, 0x53, 0x2e, 0x58, 0xe1, 0x06, 0x90, 0xc1, 0x62, 0xfa, 0x51,
	0x99, 0xce, 0xe4, 0x82, 0x15, 0x19, 0xa7, 0x60, 0xdd, 0x3b, 0x70, 0xb9, 0xef, 0xfa, 0x3d, 0xe2,
	0x26, 0xde, 0x24, 0x60, 0x66, 0x3f, 0x0c, 0x6c, 0x39, 0x4c, 0x77, 0x49, 0x8a, 0x70, 0x3f, 0x60,
	0x7b, 0x67, 0x5e, 0xd4, 0x84, 0x75, 0xaf, 0x2e, 0xfe, 0x0d, 0x6f, 0xfe, 0x0c, 0x00, 0x00, 0xff,
	0xff, 0x51, 0x6c, 0xbd, 0xfc, 0x41, 0x0b, 0x00, 0x00,
}
