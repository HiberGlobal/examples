// Code generated by protoc-gen-go.
// source: tag.proto
// DO NOT EDIT!

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Tag struct {
	Id    int64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Label *Tag_Label `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

func (m *Tag) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Tag) GetLabel() *Tag_Label {
	if m != nil {
		return m.Label
	}
	return nil
}

type Tag_Label struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Tag_Label) Reset()                    { *m = Tag_Label{} }
func (m *Tag_Label) String() string            { return proto.CompactTextString(m) }
func (*Tag_Label) ProtoMessage()               {}
func (*Tag_Label) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0, 0} }

func (m *Tag_Label) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TagSelection struct {
	Search []string     `protobuf:"bytes,1,rep,name=search" json:"search,omitempty"`
	Names  []string     `protobuf:"bytes,2,rep,name=names" json:"names,omitempty"`
	Filter *Filter_Tags `protobuf:"bytes,3,opt,name=filter" json:"filter,omitempty"`
}

func (m *TagSelection) Reset()                    { *m = TagSelection{} }
func (m *TagSelection) String() string            { return proto.CompactTextString(m) }
func (*TagSelection) ProtoMessage()               {}
func (*TagSelection) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

func (m *TagSelection) GetSearch() []string {
	if m != nil {
		return m.Search
	}
	return nil
}

func (m *TagSelection) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *TagSelection) GetFilter() *Filter_Tags {
	if m != nil {
		return m.Filter
	}
	return nil
}

type UpdateTagsForItem struct {
	TagIdsToAdd    []int64      `protobuf:"varint,1,rep,packed,name=tag_ids_to_add,json=tagIdsToAdd" json:"tag_ids_to_add,omitempty"`
	TagIdsToRemove []int64      `protobuf:"varint,2,rep,packed,name=tag_ids_to_remove,json=tagIdsToRemove" json:"tag_ids_to_remove,omitempty"`
	NewTagsToAdd   []*Tag_Label `protobuf:"bytes,3,rep,name=new_tags_to_add,json=newTagsToAdd" json:"new_tags_to_add,omitempty"`
}

func (m *UpdateTagsForItem) Reset()                    { *m = UpdateTagsForItem{} }
func (m *UpdateTagsForItem) String() string            { return proto.CompactTextString(m) }
func (*UpdateTagsForItem) ProtoMessage()               {}
func (*UpdateTagsForItem) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

func (m *UpdateTagsForItem) GetTagIdsToAdd() []int64 {
	if m != nil {
		return m.TagIdsToAdd
	}
	return nil
}

func (m *UpdateTagsForItem) GetTagIdsToRemove() []int64 {
	if m != nil {
		return m.TagIdsToRemove
	}
	return nil
}

func (m *UpdateTagsForItem) GetNewTagsToAdd() []*Tag_Label {
	if m != nil {
		return m.NewTagsToAdd
	}
	return nil
}

type ListTagsRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string        `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *TagSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	ModemCount   bool          `protobuf:"varint,3,opt,name=modem_count,json=modemCount" json:"modem_count,omitempty"`
	WebhookCount bool          `protobuf:"varint,4,opt,name=webhook_count,json=webhookCount" json:"webhook_count,omitempty"`
}

func (m *ListTagsRequest) Reset()                    { *m = ListTagsRequest{} }
func (m *ListTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTagsRequest) ProtoMessage()               {}
func (*ListTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

func (m *ListTagsRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ListTagsRequest) GetSelection() *TagSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListTagsRequest) GetModemCount() bool {
	if m != nil {
		return m.ModemCount
	}
	return false
}

func (m *ListTagsRequest) GetWebhookCount() bool {
	if m != nil {
		return m.WebhookCount
	}
	return false
}

type ListTagsRequest_Response struct {
	Tags            []*Tag           `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
	Request         *ListTagsRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	TagModemCount   map[int64]int32  `protobuf:"bytes,3,rep,name=tag_modem_count,json=tagModemCount" json:"tag_modem_count,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	TagWebhookCount map[int64]int32  `protobuf:"bytes,4,rep,name=tag_webhook_count,json=tagWebhookCount" json:"tag_webhook_count,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *ListTagsRequest_Response) Reset()                    { *m = ListTagsRequest_Response{} }
func (m *ListTagsRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*ListTagsRequest_Response) ProtoMessage()               {}
func (*ListTagsRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{3, 0} }

func (m *ListTagsRequest_Response) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ListTagsRequest_Response) GetRequest() *ListTagsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListTagsRequest_Response) GetTagModemCount() map[int64]int32 {
	if m != nil {
		return m.TagModemCount
	}
	return nil
}

func (m *ListTagsRequest_Response) GetTagWebhookCount() map[int64]int32 {
	if m != nil {
		return m.TagWebhookCount
	}
	return nil
}

type CreateTagRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string     `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Create       *Tag_Label `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
}

func (m *CreateTagRequest) Reset()                    { *m = CreateTagRequest{} }
func (m *CreateTagRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTagRequest) ProtoMessage()               {}
func (*CreateTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{4} }

func (m *CreateTagRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *CreateTagRequest) GetCreate() *Tag_Label {
	if m != nil {
		return m.Create
	}
	return nil
}

type UpdateTagRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string     `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Id           int64      `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Update       *Tag_Label `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
}

func (m *UpdateTagRequest) Reset()                    { *m = UpdateTagRequest{} }
func (m *UpdateTagRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTagRequest) ProtoMessage()               {}
func (*UpdateTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5} }

func (m *UpdateTagRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UpdateTagRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateTagRequest) GetUpdate() *Tag_Label {
	if m != nil {
		return m.Update
	}
	return nil
}

type DeleteTagRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Id           int64  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteTagRequest) Reset()                    { *m = DeleteTagRequest{} }
func (m *DeleteTagRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTagRequest) ProtoMessage()               {}
func (*DeleteTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{6} }

func (m *DeleteTagRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *DeleteTagRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteTagRequest_Response struct {
}

func (m *DeleteTagRequest_Response) Reset()                    { *m = DeleteTagRequest_Response{} }
func (m *DeleteTagRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*DeleteTagRequest_Response) ProtoMessage()               {}
func (*DeleteTagRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{6, 0} }

func init() {
	proto.RegisterType((*Tag)(nil), "hiber.tag.Tag")
	proto.RegisterType((*Tag_Label)(nil), "hiber.tag.Tag.Label")
	proto.RegisterType((*TagSelection)(nil), "hiber.tag.TagSelection")
	proto.RegisterType((*UpdateTagsForItem)(nil), "hiber.tag.UpdateTagsForItem")
	proto.RegisterType((*ListTagsRequest)(nil), "hiber.tag.ListTagsRequest")
	proto.RegisterType((*ListTagsRequest_Response)(nil), "hiber.tag.ListTagsRequest.Response")
	proto.RegisterType((*CreateTagRequest)(nil), "hiber.tag.CreateTagRequest")
	proto.RegisterType((*UpdateTagRequest)(nil), "hiber.tag.UpdateTagRequest")
	proto.RegisterType((*DeleteTagRequest)(nil), "hiber.tag.DeleteTagRequest")
	proto.RegisterType((*DeleteTagRequest_Response)(nil), "hiber.tag.DeleteTagRequest.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TagService service

type TagServiceClient interface {
	List(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsRequest_Response, error)
	Create(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*Tag, error)
	Update(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*Tag, error)
	Delete(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagRequest_Response, error)
}

type tagServiceClient struct {
	cc *grpc.ClientConn
}

func NewTagServiceClient(cc *grpc.ClientConn) TagServiceClient {
	return &tagServiceClient{cc}
}

func (c *tagServiceClient) List(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsRequest_Response, error) {
	out := new(ListTagsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.tag.TagService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) Create(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := grpc.Invoke(ctx, "/hiber.tag.TagService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) Update(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := grpc.Invoke(ctx, "/hiber.tag.TagService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) Delete(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagRequest_Response, error) {
	out := new(DeleteTagRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.tag.TagService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TagService service

type TagServiceServer interface {
	List(context.Context, *ListTagsRequest) (*ListTagsRequest_Response, error)
	Create(context.Context, *CreateTagRequest) (*Tag, error)
	Update(context.Context, *UpdateTagRequest) (*Tag, error)
	Delete(context.Context, *DeleteTagRequest) (*DeleteTagRequest_Response, error)
}

func RegisterTagServiceServer(s *grpc.Server, srv TagServiceServer) {
	s.RegisterService(&_TagService_serviceDesc, srv)
}

func _TagService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.tag.TagService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).List(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.tag.TagService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).Create(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.tag.TagService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).Update(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.tag.TagService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).Delete(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TagService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.tag.TagService",
	HandlerType: (*TagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TagService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TagService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TagService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TagService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tag.proto",
}

func init() { proto.RegisterFile("tag.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 673 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0xfe, 0x35, 0x69, 0xf3, 0x5b, 0x4f, 0xbb, 0xae, 0x3b, 0x9a, 0xa0, 0x84, 0x0b, 0x4a, 0xc6,
	0xc5, 0x98, 0xa6, 0x5c, 0x0c, 0x86, 0x26, 0xb8, 0x61, 0x1b, 0x0c, 0x0d, 0x86, 0x84, 0x4c, 0x11,
	0x12, 0x17, 0x54, 0x6e, 0x73, 0x48, 0xa3, 0xa5, 0x71, 0x49, 0xdc, 0x4d, 0xe3, 0x29, 0x78, 0x04,
	0x1e, 0x81, 0x97, 0xe2, 0x3d, 0x90, 0x1d, 0x37, 0x6b, 0xbb, 0x3f, 0x5a, 0xc5, 0x5d, 0xfc, 0xf9,
	0x3b, 0xfe, 0x3e, 0x7f, 0x3e, 0x76, 0xa0, 0x2a, 0x79, 0xe8, 0x8f, 0x52, 0x21, 0x05, 0x56, 0x07,
	0x51, 0x8f, 0x52, 0x5f, 0xf2, 0xd0, 0x85, 0x1e, 0xcf, 0x28, 0x87, 0xbd, 0x00, 0xec, 0x0e, 0x0f,
	0xb1, 0x01, 0x56, 0x14, 0xb4, 0x4a, 0xed, 0xd2, 0x86, 0xcd, 0xac, 0x28, 0xc0, 0x4d, 0xa8, 0xc4,
	0xbc, 0x47, 0x71, 0xcb, 0x6e, 0x97, 0x36, 0x6a, 0xdb, 0x6b, 0x7e, 0x51, 0xed, 0x77, 0x78, 0xe8,
	0x1f, 0xab, 0x39, 0x96, 0x53, 0xdc, 0x87, 0x50, 0xd1, 0x63, 0x44, 0x28, 0x27, 0x7c, 0x48, 0x7a,
	0x99, 0x2a, 0xd3, 0xdf, 0x6f, 0xcb, 0x4b, 0x56, 0xd3, 0xf6, 0x06, 0x50, 0xef, 0xf0, 0xf0, 0x23,
	0xc5, 0xd4, 0x97, 0x91, 0x48, 0xf0, 0x0e, 0x38, 0x19, 0xf1, 0xb4, 0x3f, 0x68, 0x95, 0xda, 0xf6,
	0x46, 0x95, 0x99, 0x11, 0xae, 0x41, 0x45, 0x55, 0x65, 0x2d, 0x4b, 0xc3, 0xf9, 0x00, 0x37, 0xc1,
	0xf9, 0x16, 0xc5, 0x92, 0x52, 0xe3, 0x06, 0x8d, 0x9b, 0x43, 0x0d, 0x2a, 0x43, 0x19, 0x33, 0x0c,
	0xef, 0x57, 0x09, 0x56, 0x3f, 0x8d, 0x02, 0x2e, 0x49, 0xc1, 0x87, 0x22, 0x3d, 0x92, 0x34, 0xc4,
	0x75, 0x68, 0x48, 0x1e, 0x76, 0xa3, 0x20, 0xeb, 0x4a, 0xd1, 0xe5, 0x41, 0xa0, 0x75, 0x6d, 0x56,
	0x93, 0x3c, 0x3c, 0x0a, 0xb2, 0x8e, 0xd8, 0x0b, 0x02, 0x7c, 0x0c, 0xab, 0x53, 0xa4, 0x94, 0x86,
	0xe2, 0x94, 0xb4, 0x11, 0x9b, 0x35, 0x26, 0x3c, 0xa6, 0x51, 0x7c, 0x01, 0x2b, 0x09, 0x9d, 0x75,
	0x25, 0x0f, 0x8b, 0x05, 0xed, 0xb6, 0x7d, 0x6d, 0x50, 0xf5, 0x84, 0xce, 0x94, 0x1d, 0xad, 0xe3,
	0xfd, 0x29, 0xc3, 0xca, 0x71, 0x94, 0x49, 0xed, 0x9b, 0xbe, 0x8f, 0x29, 0x93, 0xe8, 0x41, 0x5d,
	0xa4, 0x21, 0x4f, 0xa2, 0x1f, 0x5c, 0x05, 0x64, 0x22, 0x9c, 0xc1, 0x70, 0x07, 0xaa, 0xd9, 0x24,
	0xc1, 0x96, 0xa5, 0x93, 0xb8, 0x3b, 0x2b, 0x57, 0x04, 0xcc, 0x2e, 0x98, 0xf8, 0x00, 0x6a, 0x43,
	0x11, 0xd0, 0xb0, 0xdb, 0x17, 0xe3, 0x44, 0xea, 0x08, 0x97, 0x18, 0x68, 0xe8, 0x40, 0x21, 0xb8,
	0x0e, 0xcb, 0x67, 0xd4, 0x1b, 0x08, 0x71, 0x62, 0x28, 0x65, 0x4d, 0xa9, 0x1b, 0x50, 0x93, 0xdc,
	0xdf, 0x36, 0x2c, 0x31, 0xca, 0x46, 0x22, 0xc9, 0x08, 0x3d, 0x28, 0xab, 0xad, 0xeb, 0x10, 0x6b,
	0xdb, 0x8d, 0x59, 0x13, 0x4c, 0xcf, 0xe1, 0x53, 0xf8, 0x3f, 0xcd, 0x37, 0x67, 0xbc, 0xba, 0x53,
	0xb4, 0xb9, 0xed, 0xb3, 0x09, 0x15, 0xbf, 0xc2, 0x8a, 0x3a, 0x83, 0x59, 0xc3, 0x4a, 0xe4, 0xd9,
	0xf5, 0xd5, 0xfe, 0xc4, 0x97, 0x52, 0x7f, 0x5f, 0xec, 0xeb, 0x75, 0x22, 0xd3, 0x73, 0xb6, 0x2c,
	0xa7, 0x31, 0x0c, 0xf2, 0x33, 0x9e, 0xdf, 0xaf, 0x52, 0xd8, 0xbd, 0xa5, 0xc2, 0xe7, 0xa9, 0x58,
	0x72, 0x0d, 0x65, 0x79, 0x1a, 0x75, 0x5f, 0x02, 0x5e, 0xb6, 0x82, 0x4d, 0xb0, 0x4f, 0xe8, 0xdc,
	0x5c, 0x32, 0xf5, 0xa9, 0xda, 0xfd, 0x94, 0xc7, 0x63, 0xd2, 0x09, 0x55, 0x58, 0x3e, 0x78, 0x6e,
	0xed, 0x96, 0xdc, 0x7d, 0x58, 0xbb, 0x4a, 0x6a, 0x91, 0x35, 0xbc, 0x00, 0x9a, 0x07, 0x29, 0xe5,
	0x37, 0x61, 0x91, 0x3e, 0xdb, 0x02, 0xa7, 0xaf, 0xeb, 0xcc, 0xc1, 0x5d, 0xdd, 0xd3, 0x86, 0xe3,
	0x49, 0x68, 0x16, 0xf7, 0x6d, 0x11, 0x95, 0xfc, 0xc5, 0xb1, 0x8a, 0x17, 0x67, 0x0b, 0x9c, 0xb1,
	0x5e, 0xe7, 0xc6, 0x27, 0xc7, 0x70, 0x3c, 0x06, 0xcd, 0x57, 0x14, 0xd3, 0xbf, 0xaa, 0xba, 0x70,
	0xd1, 0xd5, 0xdb, 0x3f, 0x2d, 0x00, 0x7d, 0x89, 0xd2, 0xd3, 0xa8, 0x4f, 0xf8, 0x06, 0xca, 0xaa,
	0x0d, 0xf0, 0x86, 0xbe, 0x75, 0xd7, 0x6f, 0xd1, 0x33, 0xb8, 0x03, 0x4e, 0x7e, 0x0e, 0x78, 0x7f,
	0x8a, 0x3e, 0x7f, 0x34, 0xee, 0xdc, 0x35, 0x52, 0x65, 0x79, 0xb0, 0x33, 0x65, 0xf3, 0x59, 0x5f,
	0x2a, 0x7b, 0x07, 0x4e, 0x9e, 0xcc, 0x4c, 0xd9, 0x7c, 0x58, 0xee, 0xa3, 0x1b, 0x26, 0x0b, 0xeb,
	0xfb, 0x5b, 0x70, 0x2f, 0x8c, 0x45, 0x8f, 0xc7, 0x86, 0xcd, 0x47, 0x91, 0x1f, 0xa6, 0xa3, 0xbe,
	0x2a, 0xdb, 0x77, 0x3a, 0x3c, 0xdc, 0x1b, 0x45, 0x1f, 0xfe, 0xfb, 0x52, 0xd1, 0xb3, 0x3d, 0x47,
	0xff, 0x52, 0x9e, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x43, 0x6d, 0x6f, 0xf2, 0x76, 0x06, 0x00,
	0x00,
}
