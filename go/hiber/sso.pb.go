// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sso.proto

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ZendeskTokenRequest struct {
}

func (m *ZendeskTokenRequest) Reset()                    { *m = ZendeskTokenRequest{} }
func (m *ZendeskTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*ZendeskTokenRequest) ProtoMessage()               {}
func (*ZendeskTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

type ZendeskTokenRequest_Response struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *ZendeskTokenRequest_Response) Reset()         { *m = ZendeskTokenRequest_Response{} }
func (m *ZendeskTokenRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ZendeskTokenRequest_Response) ProtoMessage()    {}
func (*ZendeskTokenRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor14, []int{0, 0}
}

func (m *ZendeskTokenRequest_Response) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*ZendeskTokenRequest)(nil), "hiber.sso.ZendeskTokenRequest")
	proto.RegisterType((*ZendeskTokenRequest_Response)(nil), "hiber.sso.ZendeskTokenRequest.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SingleSignOnService service

type SingleSignOnServiceClient interface {
	// Zendesk SSO using custom JWT
	Zendesk(ctx context.Context, in *ZendeskTokenRequest, opts ...grpc.CallOption) (*ZendeskTokenRequest_Response, error)
}

type singleSignOnServiceClient struct {
	cc *grpc.ClientConn
}

func NewSingleSignOnServiceClient(cc *grpc.ClientConn) SingleSignOnServiceClient {
	return &singleSignOnServiceClient{cc}
}

func (c *singleSignOnServiceClient) Zendesk(ctx context.Context, in *ZendeskTokenRequest, opts ...grpc.CallOption) (*ZendeskTokenRequest_Response, error) {
	out := new(ZendeskTokenRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.sso.SingleSignOnService/Zendesk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SingleSignOnService service

type SingleSignOnServiceServer interface {
	// Zendesk SSO using custom JWT
	Zendesk(context.Context, *ZendeskTokenRequest) (*ZendeskTokenRequest_Response, error)
}

func RegisterSingleSignOnServiceServer(s *grpc.Server, srv SingleSignOnServiceServer) {
	s.RegisterService(&_SingleSignOnService_serviceDesc, srv)
}

func _SingleSignOnService_Zendesk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZendeskTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SingleSignOnServiceServer).Zendesk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.sso.SingleSignOnService/Zendesk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SingleSignOnServiceServer).Zendesk(ctx, req.(*ZendeskTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SingleSignOnService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.sso.SingleSignOnService",
	HandlerType: (*SingleSignOnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Zendesk",
			Handler:    _SingleSignOnService_Zendesk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso.proto",
}

func init() { proto.RegisterFile("sso.proto", fileDescriptor14) }

var fileDescriptor14 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2e, 0xce, 0xd7,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcc, 0xc8, 0x4c, 0x4a, 0x2d, 0xd2, 0x2b, 0x2e, 0xce,
	0x97, 0xe2, 0x4a, 0x4a, 0x2c, 0x4e, 0x85, 0x08, 0x2b, 0x99, 0x73, 0x09, 0x47, 0xa5, 0xe6, 0xa5,
	0xa4, 0x16, 0x67, 0x87, 0xe4, 0x67, 0xa7, 0xe6, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x48,
	0x29, 0x70, 0x71, 0x04, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x89, 0x70, 0xb1, 0x96,
	0x80, 0xe4, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0xa3, 0x4c, 0x2e, 0xe1, 0xe0,
	0xcc, 0xbc, 0xf4, 0x9c, 0xd4, 0xe0, 0xcc, 0xf4, 0x3c, 0xff, 0xbc, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc,
	0xe4, 0x54, 0xa1, 0x20, 0x2e, 0x76, 0xa8, 0x79, 0x42, 0x72, 0x7a, 0x70, 0x2b, 0xf5, 0xb0, 0xd9,
	0xa1, 0x8e, 0x5f, 0x5e, 0x0f, 0xe6, 0x00, 0x27, 0x1d, 0x2e, 0xc9, 0xf4, 0x9c, 0xfc, 0xa4, 0xc4,
	0x1c, 0xa8, 0x86, 0xc4, 0x82, 0x4c, 0xbd, 0xf4, 0xa2, 0x82, 0x64, 0x90, 0x4e, 0x27, 0xb6, 0xe0,
	0x60, 0x7f, 0xc7, 0x82, 0xcc, 0x00, 0x86, 0x28, 0x56, 0xb0, 0x6c, 0x12, 0x1b, 0xd8, 0x63, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x58, 0xcb, 0xd9, 0x22, 0xfc, 0x00, 0x00, 0x00,
}
