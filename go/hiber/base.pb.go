// Code generated by protoc-gen-go.
// source: base.proto
// DO NOT EDIT!

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Enum of api-accessible events.
// The event types in this enum have a protobuf implementation, and can be used, for example, in the
// api event stream and webhooks.
type EventType int32

const (
	EventType_DEFAULT                        EventType = 0
	EventType_WEBHOOK_CREATED                EventType = 1
	EventType_WEBHOOK_UPDATED                EventType = 2
	EventType_WEBHOOK_DELETED                EventType = 3
	EventType_MODEM_LOCATION_UPDATED         EventType = 4
	EventType_MODEM_MESSAGE_RECEIVED         EventType = 5
	EventType_USER_ACCESS_REQUEST            EventType = 8
	EventType_USER_ADDED                     EventType = 9
	EventType_USER_REMOVED                   EventType = 10
	EventType_WEBHOOK_FAILED                 EventType = 11
	EventType_ACCOUNT_UPDATED                EventType = 12
	EventType_MODEM_MESSAGE_SEQUENCE_SKIP    EventType = 13
	EventType_MODEM_MESSAGE_DELAYED          EventType = 14
	EventType_MODEM_MESSAGE_CANNOT_BE_PARSED EventType = 15
	EventType_MODEM_STALE                    EventType = 16
)

var EventType_name = map[int32]string{
	0:  "DEFAULT",
	1:  "WEBHOOK_CREATED",
	2:  "WEBHOOK_UPDATED",
	3:  "WEBHOOK_DELETED",
	4:  "MODEM_LOCATION_UPDATED",
	5:  "MODEM_MESSAGE_RECEIVED",
	8:  "USER_ACCESS_REQUEST",
	9:  "USER_ADDED",
	10: "USER_REMOVED",
	11: "WEBHOOK_FAILED",
	12: "ACCOUNT_UPDATED",
	13: "MODEM_MESSAGE_SEQUENCE_SKIP",
	14: "MODEM_MESSAGE_DELAYED",
	15: "MODEM_MESSAGE_CANNOT_BE_PARSED",
	16: "MODEM_STALE",
}
var EventType_value = map[string]int32{
	"DEFAULT":                        0,
	"WEBHOOK_CREATED":                1,
	"WEBHOOK_UPDATED":                2,
	"WEBHOOK_DELETED":                3,
	"MODEM_LOCATION_UPDATED":         4,
	"MODEM_MESSAGE_RECEIVED":         5,
	"USER_ACCESS_REQUEST":            8,
	"USER_ADDED":                     9,
	"USER_REMOVED":                   10,
	"WEBHOOK_FAILED":                 11,
	"ACCOUNT_UPDATED":                12,
	"MODEM_MESSAGE_SEQUENCE_SKIP":    13,
	"MODEM_MESSAGE_DELAYED":          14,
	"MODEM_MESSAGE_CANNOT_BE_PARSED": 15,
	"MODEM_STALE":                    16,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// Health is an indicator for issues. It is used for modems and webhooks to give a quick indication of issues.
type Health int32

const (
	Health_OK      Health = 0
	Health_WARNING Health = 1
	Health_ERROR   Health = 2
)

var Health_name = map[int32]string{
	0: "OK",
	1: "WARNING",
	2: "ERROR",
}
var Health_value = map[string]int32{
	"OK":      0,
	"WARNING": 1,
	"ERROR":   2,
}

func (x Health) String() string {
	return proto.EnumName(Health_name, int32(x))
}
func (Health) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// Update object for an int that can be set to 0.
// Since 0 is also the default value, we need to distinguish between an omitted value and setting the value to 0,
// in an update object.
//
// To use this to update, set a value and set updated to true
type UpdateZeroableInt struct {
	Updated bool   `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Value   uint32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdateZeroableInt) Reset()                    { *m = UpdateZeroableInt{} }
func (m *UpdateZeroableInt) String() string            { return proto.CompactTextString(m) }
func (*UpdateZeroableInt) ProtoMessage()               {}
func (*UpdateZeroableInt) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *UpdateZeroableInt) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdateZeroableInt) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Update object for a string that can be empty.
// Since an empty string is also the default value, we need to distinguish between an omitted value and
// setting the value to an empty string, in an update object.
//
// To use this to update, set a value and set updated to true
type UpdateClearableString struct {
	Updated bool   `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Value   string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdateClearableString) Reset()                    { *m = UpdateClearableString{} }
func (m *UpdateClearableString) String() string            { return proto.CompactTextString(m) }
func (*UpdateClearableString) ProtoMessage()               {}
func (*UpdateClearableString) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *UpdateClearableString) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdateClearableString) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Update object for a boolean.
// Since false is the default value, we need to distinguish between an omitted value and setting the value to false,
// in an update object.
//
// To use this to update, set a value and set updated to true
type UpdateBoolean struct {
	Updated bool `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Value   bool `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdateBoolean) Reset()                    { *m = UpdateBoolean{} }
func (m *UpdateBoolean) String() string            { return proto.CompactTextString(m) }
func (*UpdateBoolean) ProtoMessage()               {}
func (*UpdateBoolean) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *UpdateBoolean) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdateBoolean) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

// Period of time between two timestamps. Typically used for filtering.
type TimeRange struct {
	Start *Timestamp `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End   *Timestamp `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
}

func (m *TimeRange) Reset()                    { *m = TimeRange{} }
func (m *TimeRange) String() string            { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()               {}
func (*TimeRange) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *TimeRange) GetStart() *Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *TimeRange) GetEnd() *Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

// Timestamp type for convenience.
// Some clients are better at parsing Google's seconds/nanos based timestamp, while others prefer a text-based format.
// To accomodate this, this Timestamp type supports both.
// When used as API output, both the timestamp and textual fields will be set. The textual field has the commonly
// used ISO 8601 format (i.e. "2018-01-01T13:00:00Z").
// When used an API input, only one of the fields is needed, there is no need to set both. When both are set, the
// timestamp field will be used, the textual field will be discarded.
type Timestamp struct {
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Textual   string                     `protobuf:"bytes,4,opt,name=textual" json:"textual,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *Timestamp) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Timestamp) GetTextual() string {
	if m != nil {
		return m.Textual
	}
	return ""
}

type Location struct {
	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *Location) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Location) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

// Area between two locations, normalized to bottom-left and top-right points.
// Center point is added for convenience; it's simple the point directly between the two corner points.
type Area struct {
	Center     *Location `protobuf:"bytes,1,opt,name=center" json:"center,omitempty"`
	BottomLeft *Location `protobuf:"bytes,2,opt,name=bottom_left,json=bottomLeft" json:"bottom_left,omitempty"`
	TopRight   *Location `protobuf:"bytes,4,opt,name=top_right,json=topRight" json:"top_right,omitempty"`
}

func (m *Area) Reset()                    { *m = Area{} }
func (m *Area) String() string            { return proto.CompactTextString(m) }
func (*Area) ProtoMessage()               {}
func (*Area) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *Area) GetCenter() *Location {
	if m != nil {
		return m.Center
	}
	return nil
}

func (m *Area) GetBottomLeft() *Location {
	if m != nil {
		return m.BottomLeft
	}
	return nil
}

func (m *Area) GetTopRight() *Location {
	if m != nil {
		return m.TopRight
	}
	return nil
}

// Pagination is normalized across the api. Provide a pagination object to get a specific page or offset,
// or limit your data.
//
// Calls that have a pagination option automatically return a Pagination.Result, which contains
// either the specified pagination options or the defaults, as well as total counts. It also contains Pagination
// objects that can be used for the previous and next page.
//
// This effectively means that an api user would never need to create their own pagination object; as long as they
// start at the first page and continue to the next, they can use the provided Pagination object.
type Pagination struct {
	Size int32 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	Page int32 `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
}

func (m *Pagination) Reset()                    { *m = Pagination{} }
func (m *Pagination) String() string            { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()               {}
func (*Pagination) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *Pagination) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Pagination) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type Pagination_Result struct {
	Size       int32       `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	Page       int32       `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
	Total      int32       `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
	TotalPages int32       `protobuf:"varint,4,opt,name=totalPages" json:"totalPages,omitempty"`
	Previous   *Pagination `protobuf:"bytes,6,opt,name=previous" json:"previous,omitempty"`
	Next       *Pagination `protobuf:"bytes,7,opt,name=next" json:"next,omitempty"`
}

func (m *Pagination_Result) Reset()                    { *m = Pagination_Result{} }
func (m *Pagination_Result) String() string            { return proto.CompactTextString(m) }
func (*Pagination_Result) ProtoMessage()               {}
func (*Pagination_Result) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7, 0} }

func (m *Pagination_Result) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Pagination_Result) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Pagination_Result) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Pagination_Result) GetTotalPages() int32 {
	if m != nil {
		return m.TotalPages
	}
	return 0
}

func (m *Pagination_Result) GetPrevious() *Pagination {
	if m != nil {
		return m.Previous
	}
	return nil
}

func (m *Pagination_Result) GetNext() *Pagination {
	if m != nil {
		return m.Next
	}
	return nil
}

// Filters used in many api calls to filter the data sources, results, etc.
//
// "Include" fields filter out anything not in the include set.
// When not set, all items will be returned (except excluded items)
// "Exclude" fields filter out anything in the exclude set.
// When combined with include, exclude takes precedence when determining whether an item is filtered
type Filter struct {
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

// Specify which accounts to get data from. By default, data is only retrieved for the current account, but
// using ChildAccounts we can specify to include a number of, or all, sub-accounts.
type Filter_ChildAccounts struct {
	IncludeAll bool     `protobuf:"varint,1,opt,name=include_all,json=includeAll" json:"include_all,omitempty"`
	Include    []string `protobuf:"bytes,2,rep,name=include" json:"include,omitempty"`
	Exclude    []string `protobuf:"bytes,3,rep,name=exclude" json:"exclude,omitempty"`
}

func (m *Filter_ChildAccounts) Reset()                    { *m = Filter_ChildAccounts{} }
func (m *Filter_ChildAccounts) String() string            { return proto.CompactTextString(m) }
func (*Filter_ChildAccounts) ProtoMessage()               {}
func (*Filter_ChildAccounts) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8, 0} }

func (m *Filter_ChildAccounts) GetIncludeAll() bool {
	if m != nil {
		return m.IncludeAll
	}
	return false
}

func (m *Filter_ChildAccounts) GetInclude() []string {
	if m != nil {
		return m.Include
	}
	return nil
}

func (m *Filter_ChildAccounts) GetExclude() []string {
	if m != nil {
		return m.Exclude
	}
	return nil
}

type Filter_Events struct {
	Include []EventType `protobuf:"varint,1,rep,packed,name=include,enum=hiber.EventType" json:"include,omitempty"`
	Exclude []EventType `protobuf:"varint,2,rep,packed,name=exclude,enum=hiber.EventType" json:"exclude,omitempty"`
}

func (m *Filter_Events) Reset()                    { *m = Filter_Events{} }
func (m *Filter_Events) String() string            { return proto.CompactTextString(m) }
func (*Filter_Events) ProtoMessage()               {}
func (*Filter_Events) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8, 1} }

func (m *Filter_Events) GetInclude() []EventType {
	if m != nil {
		return m.Include
	}
	return nil
}

func (m *Filter_Events) GetExclude() []EventType {
	if m != nil {
		return m.Exclude
	}
	return nil
}

type Filter_Modems struct {
	Include []string `protobuf:"bytes,1,rep,name=include" json:"include,omitempty"`
	Exclude []string `protobuf:"bytes,2,rep,name=exclude" json:"exclude,omitempty"`
}

func (m *Filter_Modems) Reset()                    { *m = Filter_Modems{} }
func (m *Filter_Modems) String() string            { return proto.CompactTextString(m) }
func (*Filter_Modems) ProtoMessage()               {}
func (*Filter_Modems) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8, 2} }

func (m *Filter_Modems) GetInclude() []string {
	if m != nil {
		return m.Include
	}
	return nil
}

func (m *Filter_Modems) GetExclude() []string {
	if m != nil {
		return m.Exclude
	}
	return nil
}

type Filter_Tags struct {
	Include []int64 `protobuf:"varint,1,rep,packed,name=include" json:"include,omitempty"`
	Exclude []int64 `protobuf:"varint,2,rep,packed,name=exclude" json:"exclude,omitempty"`
}

func (m *Filter_Tags) Reset()                    { *m = Filter_Tags{} }
func (m *Filter_Tags) String() string            { return proto.CompactTextString(m) }
func (*Filter_Tags) ProtoMessage()               {}
func (*Filter_Tags) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8, 3} }

func (m *Filter_Tags) GetInclude() []int64 {
	if m != nil {
		return m.Include
	}
	return nil
}

func (m *Filter_Tags) GetExclude() []int64 {
	if m != nil {
		return m.Exclude
	}
	return nil
}

type Filter_Webhooks struct {
	Include    []int64 `protobuf:"varint,1,rep,packed,name=include" json:"include,omitempty"`
	Exclude    []int64 `protobuf:"varint,2,rep,packed,name=exclude" json:"exclude,omitempty"`
	OnlyActive bool    `protobuf:"varint,3,opt,name=only_active,json=onlyActive" json:"only_active,omitempty"`
}

func (m *Filter_Webhooks) Reset()                    { *m = Filter_Webhooks{} }
func (m *Filter_Webhooks) String() string            { return proto.CompactTextString(m) }
func (*Filter_Webhooks) ProtoMessage()               {}
func (*Filter_Webhooks) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8, 4} }

func (m *Filter_Webhooks) GetInclude() []int64 {
	if m != nil {
		return m.Include
	}
	return nil
}

func (m *Filter_Webhooks) GetExclude() []int64 {
	if m != nil {
		return m.Exclude
	}
	return nil
}

func (m *Filter_Webhooks) GetOnlyActive() bool {
	if m != nil {
		return m.OnlyActive
	}
	return false
}

type Filter_Users struct {
	Include []string `protobuf:"bytes,1,rep,name=include" json:"include,omitempty"`
	Exclude []string `protobuf:"bytes,2,rep,name=exclude" json:"exclude,omitempty"`
}

func (m *Filter_Users) Reset()                    { *m = Filter_Users{} }
func (m *Filter_Users) String() string            { return proto.CompactTextString(m) }
func (*Filter_Users) ProtoMessage()               {}
func (*Filter_Users) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8, 5} }

func (m *Filter_Users) GetInclude() []string {
	if m != nil {
		return m.Include
	}
	return nil
}

func (m *Filter_Users) GetExclude() []string {
	if m != nil {
		return m.Exclude
	}
	return nil
}

func init() {
	proto.RegisterType((*UpdateZeroableInt)(nil), "hiber.UpdateZeroableInt")
	proto.RegisterType((*UpdateClearableString)(nil), "hiber.UpdateClearableString")
	proto.RegisterType((*UpdateBoolean)(nil), "hiber.UpdateBoolean")
	proto.RegisterType((*TimeRange)(nil), "hiber.TimeRange")
	proto.RegisterType((*Timestamp)(nil), "hiber.Timestamp")
	proto.RegisterType((*Location)(nil), "hiber.Location")
	proto.RegisterType((*Area)(nil), "hiber.Area")
	proto.RegisterType((*Pagination)(nil), "hiber.Pagination")
	proto.RegisterType((*Pagination_Result)(nil), "hiber.Pagination.Result")
	proto.RegisterType((*Filter)(nil), "hiber.Filter")
	proto.RegisterType((*Filter_ChildAccounts)(nil), "hiber.Filter.ChildAccounts")
	proto.RegisterType((*Filter_Events)(nil), "hiber.Filter.Events")
	proto.RegisterType((*Filter_Modems)(nil), "hiber.Filter.Modems")
	proto.RegisterType((*Filter_Tags)(nil), "hiber.Filter.Tags")
	proto.RegisterType((*Filter_Webhooks)(nil), "hiber.Filter.Webhooks")
	proto.RegisterType((*Filter_Users)(nil), "hiber.Filter.Users")
	proto.RegisterEnum("hiber.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("hiber.Health", Health_name, Health_value)
}

func init() { proto.RegisterFile("base.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 890 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x55, 0x5d, 0x6f, 0xe3, 0x44,
	0x14, 0x5d, 0xe7, 0xab, 0xc9, 0xcd, 0xb6, 0xf5, 0xce, 0x52, 0x08, 0x01, 0x6d, 0xab, 0x48, 0x40,
	0x55, 0x41, 0x16, 0xc1, 0x0b, 0x02, 0x24, 0xe4, 0xda, 0xd3, 0x6e, 0xd4, 0x24, 0x0e, 0x63, 0x87,
	0x8a, 0x7d, 0x31, 0x93, 0x64, 0xea, 0x58, 0x4c, 0x3c, 0x96, 0x3d, 0xa9, 0xba, 0xfc, 0x09, 0xfe,
	0x10, 0x3f, 0x87, 0x07, 0xde, 0xf9, 0x03, 0x2b, 0xcf, 0xd8, 0x49, 0xaa, 0xdd, 0x4a, 0xd5, 0xbe,
	0xf9, 0x9e, 0x73, 0xee, 0x99, 0x7b, 0xae, 0xae, 0x12, 0x80, 0x19, 0xcd, 0x58, 0x3f, 0x49, 0x85,
	0x14, 0xa8, 0xbe, 0x8c, 0x66, 0x2c, 0xed, 0x1e, 0x87, 0x42, 0x84, 0x9c, 0xbd, 0x54, 0xe0, 0x6c,
	0x7d, 0xf3, 0x52, 0x46, 0x2b, 0x96, 0x49, 0xba, 0x4a, 0xb4, 0xae, 0x67, 0xc3, 0xb3, 0x69, 0xb2,
	0xa0, 0x92, 0xbd, 0x66, 0xa9, 0xa0, 0x33, 0xce, 0x06, 0xb1, 0x44, 0x1d, 0xd8, 0x5b, 0x2b, 0x70,
	0xd1, 0x31, 0x4e, 0x8c, 0xd3, 0x26, 0x29, 0x4b, 0xf4, 0x11, 0xd4, 0x6f, 0x29, 0x5f, 0xb3, 0x4e,
	0xe5, 0xc4, 0x38, 0xdd, 0x27, 0xba, 0xe8, 0x5d, 0xc2, 0x91, 0x36, 0xb1, 0x39, 0xa3, 0x69, 0xee,
	0xe2, 0xc9, 0x34, 0x8a, 0xc3, 0xc7, 0x1a, 0xb5, 0x4a, 0xa3, 0x5f, 0x60, 0x5f, 0x1b, 0x9d, 0x0b,
	0xc1, 0x19, 0x8d, 0x1f, 0x6b, 0xd0, 0x2c, 0x0d, 0xae, 0xa1, 0xe5, 0x47, 0x2b, 0x46, 0x68, 0x1c,
	0x32, 0xf4, 0x25, 0xd4, 0x33, 0x49, 0x53, 0xa9, 0x5a, 0xdb, 0xdf, 0x99, 0x7d, 0xb5, 0x93, 0xbe,
	0x5f, 0xae, 0x80, 0x68, 0x1a, 0xf5, 0xa0, 0xca, 0xe2, 0x85, 0x32, 0x7a, 0x9f, 0x2a, 0x27, 0x7b,
	0x81, 0x36, 0x56, 0x08, 0xfa, 0x01, 0x5a, 0x9b, 0x3d, 0x16, 0xe6, 0xdd, 0xbe, 0xde, 0x74, 0xbf,
	0xdc, 0xf4, 0x8e, 0xc1, 0x56, 0x9c, 0xe7, 0x91, 0xec, 0x4e, 0xae, 0x29, 0xef, 0xd4, 0x54, 0xf0,
	0xb2, 0xec, 0x39, 0xd0, 0x1c, 0x8a, 0x39, 0x95, 0x91, 0x88, 0x51, 0x17, 0x9a, 0x9c, 0xca, 0x48,
	0xae, 0x17, 0x4c, 0xd9, 0x1b, 0x64, 0x53, 0xa3, 0xcf, 0xa1, 0xc5, 0x45, 0x1c, 0x6a, 0xb2, 0xa2,
	0xc8, 0x2d, 0xd0, 0xfb, 0xdb, 0x80, 0x9a, 0x95, 0x32, 0x8a, 0xbe, 0x82, 0xc6, 0x9c, 0xc5, 0x92,
	0xa5, 0xc5, 0x7c, 0x87, 0x45, 0xac, 0xf2, 0x0d, 0x52, 0xd0, 0xe8, 0x5b, 0x68, 0xcf, 0x84, 0x94,
	0x62, 0x15, 0x70, 0x76, 0x23, 0x8b, 0x25, 0xbc, 0xa3, 0x06, 0xad, 0x19, 0xb2, 0x1b, 0x89, 0xbe,
	0x86, 0x96, 0x14, 0x49, 0x90, 0x46, 0xe1, 0x52, 0xaa, 0x14, 0xef, 0xd1, 0x37, 0xa5, 0x48, 0x48,
	0x2e, 0xe8, 0xfd, 0x6f, 0x00, 0x4c, 0x68, 0x18, 0xc5, 0x3a, 0x1a, 0x82, 0x5a, 0x16, 0xfd, 0xa5,
	0x63, 0xd5, 0x89, 0xfa, 0xce, 0xb1, 0x84, 0x86, 0x3a, 0x4d, 0x9d, 0xa8, 0xef, 0xee, 0x3f, 0x06,
	0x34, 0x08, 0xcb, 0xd6, 0x5c, 0x3e, 0xb6, 0x25, 0xbf, 0x08, 0x29, 0x24, 0xe5, 0x9d, 0xaa, 0x02,
	0x75, 0x81, 0x5e, 0x00, 0xa8, 0x8f, 0x09, 0x0d, 0x59, 0xa6, 0xc6, 0xad, 0x93, 0x1d, 0x04, 0x7d,
	0x03, 0xcd, 0x24, 0x65, 0xb7, 0x91, 0x58, 0x67, 0x9d, 0x86, 0x0a, 0xf3, 0xac, 0x08, 0xb3, 0x9d,
	0x9a, 0x6c, 0x24, 0xe8, 0x0b, 0xa8, 0xc5, 0xec, 0x4e, 0x76, 0xf6, 0x1e, 0x92, 0x2a, 0xba, 0xf7,
	0x5f, 0x15, 0x1a, 0x17, 0x11, 0x97, 0x2c, 0xed, 0x2e, 0x60, 0xdf, 0x5e, 0x46, 0x7c, 0x61, 0xcd,
	0xe7, 0x62, 0x1d, 0xcb, 0x0c, 0x1d, 0x43, 0x3b, 0x8a, 0xe7, 0x7c, 0xbd, 0x60, 0x01, 0xe5, 0xbc,
	0xb8, 0x6b, 0x28, 0x20, 0x8b, 0xf3, 0xfc, 0x48, 0x8a, 0xaa, 0x53, 0x39, 0xa9, 0xe6, 0x47, 0x52,
	0x94, 0x39, 0xc3, 0xee, 0x34, 0x53, 0xd5, 0x4c, 0x51, 0x76, 0xff, 0x80, 0x06, 0xbe, 0x65, 0xb9,
	0xfd, 0xd9, 0xb6, 0xdb, 0x38, 0xa9, 0x9e, 0x1e, 0x6c, 0x2e, 0x5a, 0xf1, 0xfe, 0x9b, 0x84, 0x6d,
	0xfd, 0xce, 0xb6, 0x7e, 0x95, 0x87, 0xb4, 0xe5, 0x0b, 0x3f, 0x43, 0x63, 0x24, 0x16, 0x6c, 0x95,
	0xed, 0xce, 0x67, 0x3c, 0x38, 0x5f, 0xe5, 0xfe, 0x7c, 0x3f, 0x42, 0xcd, 0xa7, 0xe1, 0x3b, 0xbd,
	0xd5, 0x07, 0x7b, 0xab, 0xdb, 0xde, 0x00, 0x9a, 0xd7, 0x6c, 0xb6, 0x14, 0xe2, 0xcf, 0x0f, 0xea,
	0xcf, 0x17, 0x2e, 0x62, 0xfe, 0x26, 0xa0, 0x73, 0x19, 0xdd, 0x32, 0x75, 0x1e, 0x4d, 0x02, 0x39,
	0x64, 0x29, 0xa4, 0xfb, 0x13, 0xd4, 0xa7, 0x19, 0x4b, 0x3f, 0x28, 0xd9, 0xd9, 0xbf, 0x15, 0x68,
	0x6d, 0xd6, 0x85, 0xda, 0xb0, 0xe7, 0xe0, 0x0b, 0x6b, 0x3a, 0xf4, 0xcd, 0x27, 0xe8, 0x39, 0x1c,
	0x5e, 0xe3, 0xf3, 0x57, 0xae, 0x7b, 0x15, 0xd8, 0x04, 0x5b, 0x3e, 0x76, 0x4c, 0x63, 0x17, 0x9c,
	0x4e, 0x1c, 0x05, 0x56, 0x76, 0x41, 0x07, 0x0f, 0x71, 0x0e, 0x56, 0x51, 0x17, 0x3e, 0x1e, 0xb9,
	0x0e, 0x1e, 0x05, 0x43, 0xd7, 0xb6, 0xfc, 0x81, 0x3b, 0xde, 0x34, 0xd4, 0xb6, 0xdc, 0x08, 0x7b,
	0x9e, 0x75, 0x89, 0x03, 0x82, 0x6d, 0x3c, 0xf8, 0x0d, 0x3b, 0x66, 0x1d, 0x7d, 0x02, 0xcf, 0xa7,
	0x1e, 0x26, 0x81, 0x65, 0xdb, 0xd8, 0xf3, 0x02, 0x82, 0x7f, 0x9d, 0x62, 0xcf, 0x37, 0x9b, 0xe8,
	0x00, 0x40, 0x13, 0x8e, 0x83, 0x1d, 0xb3, 0x85, 0x4c, 0x78, 0xaa, 0x6a, 0x82, 0x47, 0x6e, 0xde,
	0x0a, 0x08, 0xc1, 0x41, 0x39, 0xc7, 0x85, 0x35, 0x18, 0x62, 0xc7, 0x6c, 0xe7, 0xb3, 0x59, 0xb6,
	0xed, 0x4e, 0xc7, 0xfe, 0xe6, 0xfd, 0xa7, 0xe8, 0x18, 0x3e, 0xbb, 0xff, 0xbe, 0x97, 0xbf, 0x32,
	0xb6, 0x71, 0xe0, 0x5d, 0x0d, 0x26, 0xe6, 0x3e, 0xfa, 0x14, 0x8e, 0xee, 0x0b, 0x1c, 0x3c, 0xb4,
	0x7e, 0xc7, 0x8e, 0x79, 0x80, 0x7a, 0xf0, 0xe2, 0x3e, 0x65, 0x5b, 0xe3, 0xb1, 0xeb, 0x07, 0xe7,
	0x38, 0x98, 0x58, 0xc4, 0xc3, 0x8e, 0x79, 0x88, 0x0e, 0xa1, 0xad, 0x35, 0x9e, 0x6f, 0x0d, 0xb1,
	0x69, 0x9e, 0x9d, 0x42, 0xe3, 0x15, 0xa3, 0x5c, 0x2e, 0x51, 0x03, 0x2a, 0xee, 0x95, 0xf9, 0x24,
	0x5f, 0xf5, 0xb5, 0x45, 0xc6, 0x83, 0xf1, 0xa5, 0x69, 0xa0, 0x16, 0xd4, 0x31, 0x21, 0x2e, 0x31,
	0x2b, 0xe7, 0x27, 0x70, 0x14, 0x72, 0x31, 0xa3, 0xbc, 0xb8, 0x65, 0x9a, 0x44, 0xfd, 0x30, 0x4d,
	0xe6, 0x13, 0xe3, 0xb5, 0xfe, 0x57, 0x9c, 0x35, 0xd4, 0x8f, 0xf4, 0xf7, 0x6f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xae, 0x27, 0xbf, 0x8b, 0x31, 0x07, 0x00, 0x00,
}
