// Code generated by protoc-gen-go.
// source: token.proto
// DO NOT EDIT!

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Token struct {
	Id                      int64                    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                    string                   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	UserId                  string                   `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Organization            string                   `protobuf:"bytes,4,opt,name=organization" json:"organization,omitempty"`
	ExpiresAt               *Timestamp               `protobuf:"bytes,6,opt,name=expires_at,json=expiresAt" json:"expires_at,omitempty"`
	UserPermissions         []UserPermission         `protobuf:"varint,7,rep,packed,name=user_permissions,json=userPermissions,enum=hiber.UserPermission" json:"user_permissions,omitempty"`
	OrganizationPermissions []OrganizationPermission `protobuf:"varint,8,rep,packed,name=organization_permissions,json=organizationPermissions,enum=hiber.OrganizationPermission" json:"organization_permissions,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{0} }

func (m *Token) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Token) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Token) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Token) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *Token) GetExpiresAt() *Timestamp {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func (m *Token) GetUserPermissions() []UserPermission {
	if m != nil {
		return m.UserPermissions
	}
	return nil
}

func (m *Token) GetOrganizationPermissions() []OrganizationPermission {
	if m != nil {
		return m.OrganizationPermissions
	}
	return nil
}

type TokenSelection struct {
	Users          *Filter_Users `protobuf:"bytes,1,opt,name=users" json:"users,omitempty"`
	Name           string        `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	IncludeExpired bool          `protobuf:"varint,4,opt,name=include_expired,json=includeExpired" json:"include_expired,omitempty"`
}

func (m *TokenSelection) Reset()                    { *m = TokenSelection{} }
func (m *TokenSelection) String() string            { return proto.CompactTextString(m) }
func (*TokenSelection) ProtoMessage()               {}
func (*TokenSelection) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{1} }

func (m *TokenSelection) GetUsers() *Filter_Users {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *TokenSelection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TokenSelection) GetIncludeExpired() bool {
	if m != nil {
		return m.IncludeExpired
	}
	return false
}

type ListTokensRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string          `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *TokenSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination     `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListTokensRequest) Reset()                    { *m = ListTokensRequest{} }
func (m *ListTokensRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTokensRequest) ProtoMessage()               {}
func (*ListTokensRequest) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{2} }

func (m *ListTokensRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ListTokensRequest) GetSelection() *TokenSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListTokensRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListTokensRequest_Response struct {
	Tokens     []*Token           `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
	Request    *ListTokensRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListTokensRequest_Response) Reset()                    { *m = ListTokensRequest_Response{} }
func (m *ListTokensRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*ListTokensRequest_Response) ProtoMessage()               {}
func (*ListTokensRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{2, 0} }

func (m *ListTokensRequest_Response) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *ListTokensRequest_Response) GetRequest() *ListTokensRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListTokensRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type CreateTokenRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization            string                          `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Name                    string                          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ExpiresAt               *Timestamp                      `protobuf:"bytes,4,opt,name=expires_at,json=expiresAt" json:"expires_at,omitempty"`
	UserPermissions         *Filter_UserPermissions         `protobuf:"bytes,5,opt,name=user_permissions,json=userPermissions" json:"user_permissions,omitempty"`
	OrganizationPermissions *Filter_OrganizationPermissions `protobuf:"bytes,6,opt,name=organization_permissions,json=organizationPermissions" json:"organization_permissions,omitempty"`
}

func (m *CreateTokenRequest) Reset()                    { *m = CreateTokenRequest{} }
func (m *CreateTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTokenRequest) ProtoMessage()               {}
func (*CreateTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{3} }

func (m *CreateTokenRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *CreateTokenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateTokenRequest) GetExpiresAt() *Timestamp {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func (m *CreateTokenRequest) GetUserPermissions() *Filter_UserPermissions {
	if m != nil {
		return m.UserPermissions
	}
	return nil
}

func (m *CreateTokenRequest) GetOrganizationPermissions() *Filter_OrganizationPermissions {
	if m != nil {
		return m.OrganizationPermissions
	}
	return nil
}

type CreateTokenRequest_Response struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *CreateTokenRequest_Response) Reset()                    { *m = CreateTokenRequest_Response{} }
func (m *CreateTokenRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*CreateTokenRequest_Response) ProtoMessage()               {}
func (*CreateTokenRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{3, 0} }

func (m *CreateTokenRequest_Response) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type DeleteTokenRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	TokenId      int64  `protobuf:"varint,2,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
}

func (m *DeleteTokenRequest) Reset()                    { *m = DeleteTokenRequest{} }
func (m *DeleteTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTokenRequest) ProtoMessage()               {}
func (*DeleteTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{4} }

func (m *DeleteTokenRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *DeleteTokenRequest) GetTokenId() int64 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

type DeleteTokenRequest_Response struct {
}

func (m *DeleteTokenRequest_Response) Reset()                    { *m = DeleteTokenRequest_Response{} }
func (m *DeleteTokenRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*DeleteTokenRequest_Response) ProtoMessage()               {}
func (*DeleteTokenRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{4, 0} }

type UpdateTokenOrganizationPermissionsRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string  `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	TokenIds     []int64 `protobuf:"varint,2,rep,packed,name=token_ids,json=tokenIds" json:"token_ids,omitempty"`
	// The previous permissions are replaced!
	NewOrganizationPermissions *Filter_OrganizationPermissions `protobuf:"bytes,3,opt,name=new_organization_permissions,json=newOrganizationPermissions" json:"new_organization_permissions,omitempty"`
}

func (m *UpdateTokenOrganizationPermissionsRequest) Reset() {
	*m = UpdateTokenOrganizationPermissionsRequest{}
}
func (m *UpdateTokenOrganizationPermissionsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTokenOrganizationPermissionsRequest) ProtoMessage()    {}
func (*UpdateTokenOrganizationPermissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor17, []int{5}
}

func (m *UpdateTokenOrganizationPermissionsRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UpdateTokenOrganizationPermissionsRequest) GetTokenIds() []int64 {
	if m != nil {
		return m.TokenIds
	}
	return nil
}

func (m *UpdateTokenOrganizationPermissionsRequest) GetNewOrganizationPermissions() *Filter_OrganizationPermissions {
	if m != nil {
		return m.NewOrganizationPermissions
	}
	return nil
}

type UpdateTokenOrganizationPermissionsRequest_Response struct {
}

func (m *UpdateTokenOrganizationPermissionsRequest_Response) Reset() {
	*m = UpdateTokenOrganizationPermissionsRequest_Response{}
}
func (m *UpdateTokenOrganizationPermissionsRequest_Response) String() string {
	return proto.CompactTextString(m)
}
func (*UpdateTokenOrganizationPermissionsRequest_Response) ProtoMessage() {}
func (*UpdateTokenOrganizationPermissionsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor17, []int{5, 0}
}

type UpdateTokenUserPermissionsRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string  `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	TokenIds     []int64 `protobuf:"varint,2,rep,packed,name=token_ids,json=tokenIds" json:"token_ids,omitempty"`
	// The previous permissions are replaced!
	NewUserPermissions *Filter_UserPermissions `protobuf:"bytes,4,opt,name=new_user_permissions,json=newUserPermissions" json:"new_user_permissions,omitempty"`
}

func (m *UpdateTokenUserPermissionsRequest) Reset()         { *m = UpdateTokenUserPermissionsRequest{} }
func (m *UpdateTokenUserPermissionsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTokenUserPermissionsRequest) ProtoMessage()    {}
func (*UpdateTokenUserPermissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor17, []int{6}
}

func (m *UpdateTokenUserPermissionsRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UpdateTokenUserPermissionsRequest) GetTokenIds() []int64 {
	if m != nil {
		return m.TokenIds
	}
	return nil
}

func (m *UpdateTokenUserPermissionsRequest) GetNewUserPermissions() *Filter_UserPermissions {
	if m != nil {
		return m.NewUserPermissions
	}
	return nil
}

type UpdateTokenUserPermissionsRequest_Response struct {
}

func (m *UpdateTokenUserPermissionsRequest_Response) Reset() {
	*m = UpdateTokenUserPermissionsRequest_Response{}
}
func (m *UpdateTokenUserPermissionsRequest_Response) String() string {
	return proto.CompactTextString(m)
}
func (*UpdateTokenUserPermissionsRequest_Response) ProtoMessage() {}
func (*UpdateTokenUserPermissionsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor17, []int{6, 0}
}

func init() {
	proto.RegisterType((*Token)(nil), "hiber.token.Token")
	proto.RegisterType((*TokenSelection)(nil), "hiber.token.TokenSelection")
	proto.RegisterType((*ListTokensRequest)(nil), "hiber.token.ListTokensRequest")
	proto.RegisterType((*ListTokensRequest_Response)(nil), "hiber.token.ListTokensRequest.Response")
	proto.RegisterType((*CreateTokenRequest)(nil), "hiber.token.CreateTokenRequest")
	proto.RegisterType((*CreateTokenRequest_Response)(nil), "hiber.token.CreateTokenRequest.Response")
	proto.RegisterType((*DeleteTokenRequest)(nil), "hiber.token.DeleteTokenRequest")
	proto.RegisterType((*DeleteTokenRequest_Response)(nil), "hiber.token.DeleteTokenRequest.Response")
	proto.RegisterType((*UpdateTokenOrganizationPermissionsRequest)(nil), "hiber.token.UpdateTokenOrganizationPermissionsRequest")
	proto.RegisterType((*UpdateTokenOrganizationPermissionsRequest_Response)(nil), "hiber.token.UpdateTokenOrganizationPermissionsRequest.Response")
	proto.RegisterType((*UpdateTokenUserPermissionsRequest)(nil), "hiber.token.UpdateTokenUserPermissionsRequest")
	proto.RegisterType((*UpdateTokenUserPermissionsRequest_Response)(nil), "hiber.token.UpdateTokenUserPermissionsRequest.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TokenService service

type TokenServiceClient interface {
	List(ctx context.Context, in *ListTokensRequest, opts ...grpc.CallOption) (*ListTokensRequest_Response, error)
	Create(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenRequest_Response, error)
	Delete(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteTokenRequest_Response, error)
	UpdateTokenOrganizationPermissions(ctx context.Context, in *UpdateTokenOrganizationPermissionsRequest, opts ...grpc.CallOption) (*UpdateTokenOrganizationPermissionsRequest_Response, error)
	UpdateTokenUserPermissions(ctx context.Context, in *UpdateTokenUserPermissionsRequest, opts ...grpc.CallOption) (*UpdateTokenUserPermissionsRequest_Response, error)
}

type tokenServiceClient struct {
	cc *grpc.ClientConn
}

func NewTokenServiceClient(cc *grpc.ClientConn) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) List(ctx context.Context, in *ListTokensRequest, opts ...grpc.CallOption) (*ListTokensRequest_Response, error) {
	out := new(ListTokensRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.token.TokenService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) Create(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenRequest_Response, error) {
	out := new(CreateTokenRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.token.TokenService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) Delete(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteTokenRequest_Response, error) {
	out := new(DeleteTokenRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.token.TokenService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) UpdateTokenOrganizationPermissions(ctx context.Context, in *UpdateTokenOrganizationPermissionsRequest, opts ...grpc.CallOption) (*UpdateTokenOrganizationPermissionsRequest_Response, error) {
	out := new(UpdateTokenOrganizationPermissionsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.token.TokenService/UpdateTokenOrganizationPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) UpdateTokenUserPermissions(ctx context.Context, in *UpdateTokenUserPermissionsRequest, opts ...grpc.CallOption) (*UpdateTokenUserPermissionsRequest_Response, error) {
	out := new(UpdateTokenUserPermissionsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.token.TokenService/UpdateTokenUserPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TokenService service

type TokenServiceServer interface {
	List(context.Context, *ListTokensRequest) (*ListTokensRequest_Response, error)
	Create(context.Context, *CreateTokenRequest) (*CreateTokenRequest_Response, error)
	Delete(context.Context, *DeleteTokenRequest) (*DeleteTokenRequest_Response, error)
	UpdateTokenOrganizationPermissions(context.Context, *UpdateTokenOrganizationPermissionsRequest) (*UpdateTokenOrganizationPermissionsRequest_Response, error)
	UpdateTokenUserPermissions(context.Context, *UpdateTokenUserPermissionsRequest) (*UpdateTokenUserPermissionsRequest_Response, error)
}

func RegisterTokenServiceServer(s *grpc.Server, srv TokenServiceServer) {
	s.RegisterService(&_TokenService_serviceDesc, srv)
}

func _TokenService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.token.TokenService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).List(ctx, req.(*ListTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.token.TokenService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).Create(ctx, req.(*CreateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.token.TokenService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).Delete(ctx, req.(*DeleteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_UpdateTokenOrganizationPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokenOrganizationPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).UpdateTokenOrganizationPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.token.TokenService/UpdateTokenOrganizationPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).UpdateTokenOrganizationPermissions(ctx, req.(*UpdateTokenOrganizationPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_UpdateTokenUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokenUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).UpdateTokenUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.token.TokenService/UpdateTokenUserPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).UpdateTokenUserPermissions(ctx, req.(*UpdateTokenUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.token.TokenService",
	HandlerType: (*TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TokenService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TokenService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TokenService_Delete_Handler,
		},
		{
			MethodName: "UpdateTokenOrganizationPermissions",
			Handler:    _TokenService_UpdateTokenOrganizationPermissions_Handler,
		},
		{
			MethodName: "UpdateTokenUserPermissions",
			Handler:    _TokenService_UpdateTokenUserPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token.proto",
}

func init() { proto.RegisterFile("token.proto", fileDescriptor17) }

var fileDescriptor17 = []byte{
	// 741 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x3f, 0x49, 0x9c, 0x49, 0x95, 0xa6, 0x4b, 0x51, 0x8d, 0x4b, 0x21, 0x58, 0x42, 0x4d,
	0x39, 0x18, 0x08, 0x12, 0x94, 0x13, 0xb4, 0xfc, 0x88, 0x56, 0x48, 0xad, 0xb6, 0xad, 0x84, 0xb8,
	0x04, 0x27, 0x5e, 0x85, 0x15, 0x8e, 0x6d, 0xbc, 0x0e, 0xad, 0xb8, 0xf3, 0x18, 0xbc, 0x00, 0x37,
	0xce, 0x9c, 0x78, 0x04, 0x78, 0x03, 0xde, 0x04, 0x79, 0xbd, 0x49, 0xec, 0xd8, 0x69, 0x9a, 0x8a,
	0x5b, 0x76, 0xf6, 0xdb, 0x6f, 0xbe, 0x99, 0xf9, 0xc6, 0x0a, 0xd4, 0x22, 0xff, 0x23, 0xf1, 0xac,
	0x20, 0xf4, 0x23, 0x1f, 0xd5, 0x3e, 0xd0, 0x2e, 0x09, 0x2d, 0x1e, 0x32, 0xa0, 0x6b, 0x33, 0x92,
	0x5c, 0x18, 0x8d, 0x80, 0x84, 0x03, 0xca, 0x18, 0xf5, 0x05, 0xd4, 0xfc, 0x29, 0x43, 0xe9, 0x38,
	0xc6, 0xa1, 0x3a, 0xc8, 0xd4, 0xd1, 0xa5, 0xa6, 0xd4, 0x52, 0xb0, 0x4c, 0x1d, 0x84, 0x40, 0xf5,
	0xec, 0x01, 0xd1, 0xe5, 0xa6, 0xd4, 0xaa, 0x62, 0xfe, 0x1b, 0xad, 0x41, 0x65, 0xc8, 0x48, 0xd8,
	0xa1, 0x8e, 0xae, 0xf0, 0x70, 0x39, 0x3e, 0xee, 0x39, 0xc8, 0x84, 0x25, 0x3f, 0xec, 0xdb, 0x1e,
	0xfd, 0x62, 0x47, 0xd4, 0xf7, 0x74, 0x95, 0xdf, 0x66, 0x62, 0xe8, 0x1e, 0x00, 0x39, 0x0b, 0x68,
	0x48, 0x58, 0xc7, 0x8e, 0xf4, 0x72, 0x53, 0x6a, 0xd5, 0xda, 0x0d, 0x2b, 0x91, 0x7a, 0x4c, 0x07,
	0x84, 0x45, 0xf6, 0x20, 0xc0, 0x55, 0x81, 0xd9, 0x89, 0xd0, 0x33, 0x68, 0xf0, 0x6c, 0x13, 0xd1,
	0x4c, 0xaf, 0x34, 0x95, 0x56, 0xbd, 0x7d, 0x4d, 0x3c, 0x3b, 0x61, 0x24, 0x3c, 0x1c, 0xdf, 0xe2,
	0xe5, 0x61, 0xe6, 0xcc, 0xd0, 0x5b, 0xd0, 0xd3, 0x12, 0x32, 0x4c, 0x1a, 0x67, 0xda, 0x10, 0x4c,
	0x07, 0x29, 0x58, 0x8a, 0x71, 0xcd, 0x2f, 0x8c, 0xb3, 0x7d, 0x55, 0x2b, 0x35, 0xca, 0xe6, 0x19,
	0xd4, 0x79, 0xf3, 0x8e, 0x88, 0x4b, 0x7a, 0xbc, 0xc8, 0x2d, 0x28, 0xc5, 0x22, 0x18, 0x6f, 0x64,
	0xad, 0x7d, 0x55, 0xd0, 0xbf, 0xa2, 0x6e, 0x24, 0xf4, 0x32, 0x9c, 0x20, 0xc6, 0x0d, 0x56, 0x52,
	0x0d, 0xde, 0x84, 0x65, 0xea, 0xf5, 0xdc, 0xa1, 0x43, 0x3a, 0x49, 0x1f, 0x1c, 0xde, 0x4a, 0x0d,
	0xd7, 0x45, 0xf8, 0x65, 0x12, 0x35, 0xff, 0xc8, 0xb0, 0xf2, 0x86, 0xb2, 0x88, 0xa7, 0x67, 0x98,
	0x7c, 0x1a, 0x12, 0x16, 0xe5, 0xc6, 0x20, 0x15, 0x8c, 0xe1, 0x09, 0x54, 0xd9, 0x48, 0x2e, 0x1f,
	0x6e, 0xad, 0xbd, 0x6e, 0xa5, 0x0c, 0x63, 0x65, 0x2b, 0xc2, 0x13, 0x34, 0x7a, 0x00, 0x10, 0xd8,
	0x7d, 0xea, 0x25, 0xe4, 0x0a, 0x7f, 0xbb, 0x22, 0xde, 0x1e, 0x8e, 0x2f, 0x70, 0x0a, 0x64, 0x7c,
	0x97, 0x40, 0xc3, 0x84, 0x05, 0xbe, 0xc7, 0x08, 0xba, 0x0b, 0x65, 0x9e, 0x22, 0xee, 0x8e, 0xd2,
	0xaa, 0xb5, 0x51, 0x3e, 0x2f, 0x16, 0x08, 0xb4, 0x0d, 0x95, 0x30, 0xa9, 0x4a, 0x88, 0xbc, 0x99,
	0x01, 0xe7, 0x6a, 0xc7, 0x23, 0x38, 0xda, 0x2e, 0x50, 0xa9, 0xe7, 0x54, 0x5a, 0x98, 0xb0, 0xa1,
	0x1b, 0xa5, 0xc5, 0x9a, 0xbf, 0x65, 0x40, 0xcf, 0x43, 0x62, 0x47, 0x24, 0xd1, 0xb2, 0x40, 0x57,
	0x8b, 0xb6, 0x25, 0x6b, 0x78, 0x75, 0xbe, 0xe1, 0x5f, 0x17, 0x18, 0xbe, 0xc4, 0x9f, 0x6d, 0xe4,
	0x7d, 0x94, 0x72, 0x63, 0xde, 0xf8, 0xef, 0xcf, 0x31, 0x7e, 0xb2, 0x79, 0x77, 0xb2, 0x8c, 0xc5,
	0xfe, 0x67, 0x33, 0x17, 0xc0, 0x68, 0xa6, 0xe6, 0xba, 0x0a, 0x25, 0x3e, 0x15, 0xd1, 0x99, 0xe4,
	0xb0, 0xaf, 0x6a, 0x4a, 0x43, 0x35, 0x3b, 0x80, 0x5e, 0x10, 0x97, 0x5c, 0xa2, 0xa5, 0xd7, 0x41,
	0xe3, 0x44, 0xf1, 0xd7, 0x46, 0xe6, 0x9f, 0xa5, 0x0a, 0x3f, 0xef, 0x39, 0x06, 0x4c, 0x92, 0x9b,
	0x7f, 0x25, 0xd8, 0x3a, 0x09, 0x9c, 0xd1, 0xd0, 0x66, 0x15, 0xb2, 0x40, 0xe2, 0x75, 0xa8, 0x8e,
	0x12, 0x33, 0x5d, 0x6e, 0x2a, 0x2d, 0x05, 0x6b, 0x22, 0x33, 0x43, 0x7d, 0xb8, 0xe1, 0x91, 0xd3,
	0xce, 0xcc, 0xee, 0x2a, 0x8b, 0x74, 0xd7, 0xf0, 0xc8, 0xe9, 0x8c, 0xbb, 0x4c, 0x8d, 0xbf, 0x24,
	0xb8, 0x9d, 0xaa, 0x71, 0x7a, 0xfc, 0xff, 0xab, 0xb6, 0x03, 0x58, 0x8d, 0x6b, 0xcb, 0x79, 0x50,
	0xbd, 0x88, 0x07, 0x91, 0x47, 0x4e, 0xa7, 0x62, 0xe9, 0x1a, 0xda, 0x3f, 0x54, 0x58, 0x12, 0x9f,
	0x96, 0xf0, 0x33, 0xed, 0x11, 0x74, 0x00, 0x6a, 0xbc, 0xc5, 0x68, 0xce, 0x62, 0x1b, 0x9b, 0xe7,
	0xdf, 0x5b, 0x63, 0x1b, 0x1e, 0x41, 0x39, 0xd9, 0x5e, 0x74, 0x2b, 0xf3, 0x24, 0xbf, 0xd2, 0x46,
	0x6b, 0x0e, 0x20, 0x43, 0x9a, 0xf8, 0x77, 0x8a, 0x34, 0x6f, 0xea, 0x29, 0xd2, 0x3c, 0x60, 0x42,
	0xfa, 0x4d, 0x02, 0x73, 0xbe, 0x67, 0xd1, 0xa3, 0x0c, 0xe1, 0x85, 0x4d, 0x6e, 0x3c, 0xbd, 0xdc,
	0xbb, 0x89, 0xbe, 0xaf, 0x12, 0x18, 0xb3, 0xfd, 0x86, 0xac, 0x59, 0xfc, 0xc5, 0xc6, 0x34, 0x1e,
	0x2f, 0x86, 0x1f, 0xeb, 0xd8, 0xbd, 0x0f, 0xeb, 0x7d, 0xd7, 0xef, 0xda, 0xae, 0x20, 0xb0, 0x03,
	0x6a, 0xf5, 0xc3, 0xa0, 0x97, 0x30, 0xed, 0x6a, 0x9c, 0x64, 0x27, 0xa0, 0x87, 0x57, 0xde, 0x95,
	0x38, 0xa2, 0x5b, 0xe6, 0x7f, 0x6b, 0x1e, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x70, 0x70, 0x84,
	0x6c, 0x10, 0x09, 0x00, 0x00,
}
