// Code generated by protoc-gen-go.
// source: token.proto
// DO NOT EDIT!

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TokenPermission int32

const (
	TokenPermission_USER_READ      TokenPermission = 0
	TokenPermission_USER_ACTION    TokenPermission = 1
	TokenPermission_ACCOUNT_READ   TokenPermission = 2
	TokenPermission_ACCOUNT_ACTION TokenPermission = 3
)

var TokenPermission_name = map[int32]string{
	0: "USER_READ",
	1: "USER_ACTION",
	2: "ACCOUNT_READ",
	3: "ACCOUNT_ACTION",
}
var TokenPermission_value = map[string]int32{
	"USER_READ":      0,
	"USER_ACTION":    1,
	"ACCOUNT_READ":   2,
	"ACCOUNT_ACTION": 3,
}

func (x TokenPermission) String() string {
	return proto.EnumName(TokenPermission_name, int32(x))
}
func (TokenPermission) EnumDescriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

type Token struct {
	Id          int64             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	UserId      string            `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Account     string            `protobuf:"bytes,4,opt,name=account" json:"account,omitempty"`
	Permissions []TokenPermission `protobuf:"varint,5,rep,packed,name=permissions,enum=hiber.token.TokenPermission" json:"permissions,omitempty"`
	ExpiresAt   *Timestamp        `protobuf:"bytes,6,opt,name=expires_at,json=expiresAt" json:"expires_at,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *Token) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Token) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Token) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Token) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Token) GetPermissions() []TokenPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *Token) GetExpiresAt() *Timestamp {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

type TokenSelection struct {
	Users          *Filter_Users `protobuf:"bytes,1,opt,name=users" json:"users,omitempty"`
	Name           string        `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	IncludeExpired bool          `protobuf:"varint,4,opt,name=includeExpired" json:"includeExpired,omitempty"`
}

func (m *TokenSelection) Reset()                    { *m = TokenSelection{} }
func (m *TokenSelection) String() string            { return proto.CompactTextString(m) }
func (*TokenSelection) ProtoMessage()               {}
func (*TokenSelection) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *TokenSelection) GetUsers() *Filter_Users {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *TokenSelection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TokenSelection) GetIncludeExpired() bool {
	if m != nil {
		return m.IncludeExpired
	}
	return false
}

type ListTokensRequest struct {
	Account    string          `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Selection  *TokenSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination *Pagination     `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListTokensRequest) Reset()                    { *m = ListTokensRequest{} }
func (m *ListTokensRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTokensRequest) ProtoMessage()               {}
func (*ListTokensRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *ListTokensRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ListTokensRequest) GetSelection() *TokenSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListTokensRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListTokensRequest_Response struct {
	Tokens     []*Token           `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
	Request    *ListTokensRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListTokensRequest_Response) Reset()                    { *m = ListTokensRequest_Response{} }
func (m *ListTokensRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*ListTokensRequest_Response) ProtoMessage()               {}
func (*ListTokensRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2, 0} }

func (m *ListTokensRequest_Response) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *ListTokensRequest_Response) GetRequest() *ListTokensRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListTokensRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type CreateTokenRequest struct {
	Account     string            `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Permissions []TokenPermission `protobuf:"varint,3,rep,packed,name=permissions,enum=hiber.token.TokenPermission" json:"permissions,omitempty"`
	ExpiresAt   *Timestamp        `protobuf:"bytes,4,opt,name=expires_at,json=expiresAt" json:"expires_at,omitempty"`
}

func (m *CreateTokenRequest) Reset()                    { *m = CreateTokenRequest{} }
func (m *CreateTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTokenRequest) ProtoMessage()               {}
func (*CreateTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

func (m *CreateTokenRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *CreateTokenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateTokenRequest) GetPermissions() []TokenPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *CreateTokenRequest) GetExpiresAt() *Timestamp {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

type CreateTokenRequest_Response struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *CreateTokenRequest_Response) Reset()                    { *m = CreateTokenRequest_Response{} }
func (m *CreateTokenRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*CreateTokenRequest_Response) ProtoMessage()               {}
func (*CreateTokenRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3, 0} }

func (m *CreateTokenRequest_Response) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type DeleteTokenRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	TokenId int64  `protobuf:"varint,2,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
}

func (m *DeleteTokenRequest) Reset()                    { *m = DeleteTokenRequest{} }
func (m *DeleteTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTokenRequest) ProtoMessage()               {}
func (*DeleteTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{4} }

func (m *DeleteTokenRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *DeleteTokenRequest) GetTokenId() int64 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

type DeleteTokenRequest_Response struct {
}

func (m *DeleteTokenRequest_Response) Reset()                    { *m = DeleteTokenRequest_Response{} }
func (m *DeleteTokenRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*DeleteTokenRequest_Response) ProtoMessage()               {}
func (*DeleteTokenRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{4, 0} }

func init() {
	proto.RegisterType((*Token)(nil), "hiber.token.Token")
	proto.RegisterType((*TokenSelection)(nil), "hiber.token.TokenSelection")
	proto.RegisterType((*ListTokensRequest)(nil), "hiber.token.ListTokensRequest")
	proto.RegisterType((*ListTokensRequest_Response)(nil), "hiber.token.ListTokensRequest.Response")
	proto.RegisterType((*CreateTokenRequest)(nil), "hiber.token.CreateTokenRequest")
	proto.RegisterType((*CreateTokenRequest_Response)(nil), "hiber.token.CreateTokenRequest.Response")
	proto.RegisterType((*DeleteTokenRequest)(nil), "hiber.token.DeleteTokenRequest")
	proto.RegisterType((*DeleteTokenRequest_Response)(nil), "hiber.token.DeleteTokenRequest.Response")
	proto.RegisterEnum("hiber.token.TokenPermission", TokenPermission_name, TokenPermission_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TokenService service

type TokenServiceClient interface {
	List(ctx context.Context, in *ListTokensRequest, opts ...grpc.CallOption) (*ListTokensRequest_Response, error)
	Create(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenRequest_Response, error)
	Delete(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteTokenRequest_Response, error)
}

type tokenServiceClient struct {
	cc *grpc.ClientConn
}

func NewTokenServiceClient(cc *grpc.ClientConn) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) List(ctx context.Context, in *ListTokensRequest, opts ...grpc.CallOption) (*ListTokensRequest_Response, error) {
	out := new(ListTokensRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.token.TokenService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) Create(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenRequest_Response, error) {
	out := new(CreateTokenRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.token.TokenService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) Delete(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteTokenRequest_Response, error) {
	out := new(DeleteTokenRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.token.TokenService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TokenService service

type TokenServiceServer interface {
	List(context.Context, *ListTokensRequest) (*ListTokensRequest_Response, error)
	Create(context.Context, *CreateTokenRequest) (*CreateTokenRequest_Response, error)
	Delete(context.Context, *DeleteTokenRequest) (*DeleteTokenRequest_Response, error)
}

func RegisterTokenServiceServer(s *grpc.Server, srv TokenServiceServer) {
	s.RegisterService(&_TokenService_serviceDesc, srv)
}

func _TokenService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.token.TokenService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).List(ctx, req.(*ListTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.token.TokenService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).Create(ctx, req.(*CreateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.token.TokenService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).Delete(ctx, req.(*DeleteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.token.TokenService",
	HandlerType: (*TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TokenService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TokenService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TokenService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token.proto",
}

func init() { proto.RegisterFile("token.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0xed, 0xfc, 0x8e, 0x4b, 0x9a, 0x0e, 0x48, 0x18, 0x17, 0x41, 0x94, 0x03, 0x98, 0x1e,
	0x0c, 0x98, 0x4b, 0xb9, 0x20, 0xa5, 0x69, 0x91, 0x2a, 0xa1, 0x26, 0xda, 0x24, 0x42, 0xe2, 0x12,
	0x39, 0xf6, 0x2a, 0xac, 0x70, 0x6c, 0xe3, 0xdd, 0x00, 0xaf, 0xc0, 0xab, 0xf0, 0x24, 0xdc, 0x38,
	0xf1, 0x3e, 0xc8, 0x6b, 0xc7, 0x75, 0xe2, 0x8a, 0x20, 0x71, 0xcb, 0xcc, 0x7c, 0xdf, 0xcc, 0x7c,
	0xdf, 0x8e, 0x03, 0xba, 0x88, 0x3e, 0xd1, 0xd0, 0x8e, 0x93, 0x48, 0x44, 0xa8, 0x7f, 0x64, 0x0b,
	0x9a, 0xd8, 0x32, 0x65, 0xc2, 0xc2, 0xe5, 0x34, 0x2b, 0xf4, 0x7f, 0x29, 0x50, 0x9f, 0xa6, 0x59,
	0xec, 0x80, 0xca, 0x7c, 0x43, 0xe9, 0x29, 0x96, 0x46, 0x54, 0xe6, 0x23, 0x42, 0x2d, 0x74, 0x57,
	0xd4, 0x50, 0x7b, 0x8a, 0xd5, 0x26, 0xf2, 0x37, 0xde, 0x87, 0xe6, 0x9a, 0xd3, 0x64, 0xce, 0x7c,
	0x43, 0x93, 0xe9, 0x46, 0x1a, 0x5e, 0xf9, 0x68, 0x40, 0xd3, 0xf5, 0xbc, 0x68, 0x1d, 0x0a, 0xa3,
	0x26, 0x0b, 0x9b, 0x10, 0xdf, 0x80, 0x1e, 0xd3, 0x64, 0xc5, 0x38, 0x67, 0x51, 0xc8, 0x8d, 0x7a,
	0x4f, 0xb3, 0x3a, 0xce, 0x43, 0xbb, 0xb4, 0x8f, 0x2d, 0xe7, 0x8f, 0x0b, 0x10, 0x29, 0x13, 0xf0,
	0x39, 0x00, 0xfd, 0x16, 0xb3, 0x84, 0xf2, 0xb9, 0x2b, 0x8c, 0x46, 0x4f, 0xb1, 0x74, 0xa7, 0x9b,
	0xd3, 0xa7, 0x6c, 0x45, 0xb9, 0x70, 0x57, 0x31, 0x69, 0xe7, 0x98, 0x81, 0xe8, 0x7f, 0x85, 0x8e,
	0x6c, 0x38, 0xa1, 0x01, 0xf5, 0x04, 0x8b, 0x42, 0x7c, 0x06, 0xf5, 0x74, 0x4d, 0x2e, 0xc5, 0xe9,
	0xce, 0xdd, 0x9c, 0xfd, 0x96, 0x05, 0x82, 0x26, 0xf6, 0x2c, 0x2d, 0x91, 0x0c, 0x51, 0x88, 0xd6,
	0x4a, 0xa2, 0x9f, 0x40, 0x87, 0x85, 0x5e, 0xb0, 0xf6, 0xe9, 0xa5, 0x1c, 0xe2, 0x4b, 0x89, 0x2d,
	0xb2, 0x93, 0xed, 0xff, 0x54, 0xe1, 0xf8, 0x1d, 0xe3, 0x42, 0x4e, 0xe7, 0x84, 0x7e, 0x5e, 0x53,
	0x2e, 0xca, 0xce, 0x28, 0xdb, 0xce, 0xbc, 0x86, 0x36, 0xdf, 0xec, 0x28, 0x5d, 0xd6, 0x9d, 0x93,
	0xaa, 0x2f, 0x85, 0x0c, 0x72, 0x83, 0xc6, 0x97, 0x00, 0xb1, 0xbb, 0x64, 0xa1, 0x2b, 0xb9, 0x9a,
	0xe4, 0x1e, 0xe7, 0xdc, 0x71, 0x51, 0x20, 0x25, 0x90, 0xf9, 0x43, 0x81, 0x16, 0xa1, 0x3c, 0x8e,
	0x42, 0x4e, 0xf1, 0x14, 0x1a, 0x72, 0x44, 0x6a, 0x89, 0x66, 0xe9, 0x0e, 0x56, 0xe7, 0x92, 0x1c,
	0x81, 0x67, 0xd0, 0x4c, 0x32, 0x2d, 0xf9, 0x92, 0x8f, 0xb6, 0xc0, 0x15, 0xc5, 0x64, 0x03, 0xc7,
	0xb3, 0x5b, 0xb6, 0x34, 0x2a, 0x5b, 0xda, 0x84, 0xf2, 0x75, 0x20, 0xca, 0xcb, 0xf6, 0x7f, 0x2b,
	0x80, 0xc3, 0x84, 0xba, 0x82, 0x66, 0xbb, 0xec, 0xf5, 0xf2, 0xb6, 0x63, 0xdd, 0xb9, 0x3c, 0xed,
	0xff, 0x2e, 0xaf, 0xb6, 0xf7, 0xf2, 0xcc, 0x5e, 0xc9, 0xe1, 0x7b, 0x50, 0x97, 0x23, 0xf2, 0x45,
	0xb3, 0xa0, 0x3f, 0x03, 0xbc, 0xa0, 0x01, 0xfd, 0x67, 0x59, 0x0f, 0xa0, 0x25, 0x89, 0xe9, 0x07,
	0xa7, 0xca, 0x2f, 0xb3, 0x29, 0xe3, 0x2b, 0xdf, 0x84, 0x9b, 0x61, 0xa7, 0xef, 0xe1, 0x68, 0x47,
	0x09, 0xde, 0x81, 0xf6, 0x6c, 0x72, 0x49, 0xe6, 0xe4, 0x72, 0x70, 0xd1, 0x3d, 0xc0, 0x23, 0xd0,
	0x65, 0x38, 0x18, 0x4e, 0xaf, 0x46, 0xd7, 0x5d, 0x05, 0xbb, 0x70, 0x38, 0x18, 0x0e, 0x47, 0xb3,
	0xeb, 0x69, 0x06, 0x51, 0x11, 0xa1, 0xb3, 0xc9, 0xe4, 0x28, 0xcd, 0xf9, 0xae, 0xc2, 0x61, 0x7e,
	0x85, 0xc9, 0x17, 0xe6, 0x51, 0x1c, 0x41, 0x2d, 0x7d, 0x70, 0xdc, 0x73, 0x03, 0xe6, 0xd3, 0xbf,
	0xd7, 0xed, 0xc2, 0xa7, 0x09, 0x34, 0xb2, 0x87, 0xc6, 0xc7, 0x5b, 0x94, 0xea, 0xeb, 0x9b, 0xd6,
	0x1e, 0xc0, 0x56, 0xd3, 0xcc, 0xe6, 0x9d, 0xa6, 0x55, 0xef, 0x77, 0x9a, 0x56, 0x01, 0x45, 0xd3,
	0xf3, 0x17, 0x70, 0xb2, 0x0c, 0xa2, 0x85, 0x1b, 0xe4, 0x0c, 0x37, 0x66, 0xf6, 0x32, 0x89, 0xbd,
	0x8c, 0x7a, 0xde, 0x92, 0xac, 0x41, 0xcc, 0xc6, 0x07, 0x1f, 0xea, 0x12, 0xb1, 0x68, 0xc8, 0xbf,
	0xd8, 0x57, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x5d, 0xb4, 0xea, 0x8a, 0x05, 0x00, 0x00,
}
