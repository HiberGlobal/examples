// Code generated by protoc-gen-go. DO NOT EDIT.
// source: modem_transfer.proto

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ModemTransfer_Type int32

const (
	ModemTransfer_TRANSFER ModemTransfer_Type = 0
	ModemTransfer_RETURN   ModemTransfer_Type = 1
)

var ModemTransfer_Type_name = map[int32]string{
	0: "TRANSFER",
	1: "RETURN",
}
var ModemTransfer_Type_value = map[string]int32{
	"TRANSFER": 0,
	"RETURN":   1,
}

func (x ModemTransfer_Type) String() string {
	return proto.EnumName(ModemTransfer_Type_name, int32(x))
}
func (ModemTransfer_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor9, []int{0, 0} }

type ModemTransfer_Status int32

const (
	ModemTransfer_IN_TRANSIT   ModemTransfer_Status = 0
	ModemTransfer_RECEIVED     ModemTransfer_Status = 1
	ModemTransfer_CANCELLED    ModemTransfer_Status = 3
	ModemTransfer_NOT_RECEIVED ModemTransfer_Status = 4
)

var ModemTransfer_Status_name = map[int32]string{
	0: "IN_TRANSIT",
	1: "RECEIVED",
	3: "CANCELLED",
	4: "NOT_RECEIVED",
}
var ModemTransfer_Status_value = map[string]int32{
	"IN_TRANSIT":   0,
	"RECEIVED":     1,
	"CANCELLED":    3,
	"NOT_RECEIVED": 4,
}

func (x ModemTransfer_Status) String() string {
	return proto.EnumName(ModemTransfer_Status_name, int32(x))
}
func (ModemTransfer_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor9, []int{0, 1} }

type ModemTransferReturnLine_Reason int32

const (
	ModemTransferReturnLine_OTHER                 ModemTransferReturnLine_Reason = 0
	ModemTransferReturnLine_INVALID_RECIPIENT     ModemTransferReturnLine_Reason = 1
	ModemTransferReturnLine_INVALID_CONFIGURATION ModemTransferReturnLine_Reason = 2
	ModemTransferReturnLine_DAMAGED               ModemTransferReturnLine_Reason = 3
	ModemTransferReturnLine_DEAD                  ModemTransferReturnLine_Reason = 4
	ModemTransferReturnLine_MISSING               ModemTransferReturnLine_Reason = 5
)

var ModemTransferReturnLine_Reason_name = map[int32]string{
	0: "OTHER",
	1: "INVALID_RECIPIENT",
	2: "INVALID_CONFIGURATION",
	3: "DAMAGED",
	4: "DEAD",
	5: "MISSING",
}
var ModemTransferReturnLine_Reason_value = map[string]int32{
	"OTHER":                 0,
	"INVALID_RECIPIENT":     1,
	"INVALID_CONFIGURATION": 2,
	"DAMAGED":               3,
	"DEAD":                  4,
	"MISSING":               5,
}

func (x ModemTransferReturnLine_Reason) String() string {
	return proto.EnumName(ModemTransferReturnLine_Reason_name, int32(x))
}
func (ModemTransferReturnLine_Reason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{1, 0}
}

type ModemTransfer struct {
	Identifier            string               `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	ModemNumbers          []string             `protobuf:"bytes,2,rep,name=modem_numbers,json=modemNumbers" json:"modem_numbers,omitempty"`
	Type                  ModemTransfer_Type   `protobuf:"varint,3,opt,name=type,enum=hiber.modem.ModemTransfer_Type" json:"type,omitempty"`
	Status                ModemTransfer_Status `protobuf:"varint,4,opt,name=status,enum=hiber.modem.ModemTransfer_Status" json:"status,omitempty"`
	SenderOrganization    string               `protobuf:"bytes,5,opt,name=sender_organization,json=senderOrganization" json:"sender_organization,omitempty"`
	RecipientOrganization string               `protobuf:"bytes,6,opt,name=recipient_organization,json=recipientOrganization" json:"recipient_organization,omitempty"`
	ReturnTransfers       []string             `protobuf:"bytes,7,rep,name=return_transfers,json=returnTransfers" json:"return_transfers,omitempty"`
	ReturnFor             []string             `protobuf:"bytes,8,rep,name=return_for,json=returnFor" json:"return_for,omitempty"`
	TrackingInformation   string               `protobuf:"bytes,9,opt,name=tracking_information,json=trackingInformation" json:"tracking_information,omitempty"`
	CreatedAt             *Timestamp           `protobuf:"bytes,10,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	ReceivedAt            *Timestamp           `protobuf:"bytes,11,opt,name=received_at,json=receivedAt" json:"received_at,omitempty"`
	CancelledAt           *Timestamp           `protobuf:"bytes,12,opt,name=cancelled_at,json=cancelledAt" json:"cancelled_at,omitempty"`
	NotReceivedAt         *Timestamp           `protobuf:"bytes,13,opt,name=not_received_at,json=notReceivedAt" json:"not_received_at,omitempty"`
	ReturnDeadline        *Timestamp           `protobuf:"bytes,14,opt,name=return_deadline,json=returnDeadline" json:"return_deadline,omitempty"`
	Tags                  []*Tag               `protobuf:"bytes,15,rep,name=tags" json:"tags,omitempty"`
}

func (m *ModemTransfer) Reset()                    { *m = ModemTransfer{} }
func (m *ModemTransfer) String() string            { return proto.CompactTextString(m) }
func (*ModemTransfer) ProtoMessage()               {}
func (*ModemTransfer) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *ModemTransfer) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *ModemTransfer) GetModemNumbers() []string {
	if m != nil {
		return m.ModemNumbers
	}
	return nil
}

func (m *ModemTransfer) GetType() ModemTransfer_Type {
	if m != nil {
		return m.Type
	}
	return ModemTransfer_TRANSFER
}

func (m *ModemTransfer) GetStatus() ModemTransfer_Status {
	if m != nil {
		return m.Status
	}
	return ModemTransfer_IN_TRANSIT
}

func (m *ModemTransfer) GetSenderOrganization() string {
	if m != nil {
		return m.SenderOrganization
	}
	return ""
}

func (m *ModemTransfer) GetRecipientOrganization() string {
	if m != nil {
		return m.RecipientOrganization
	}
	return ""
}

func (m *ModemTransfer) GetReturnTransfers() []string {
	if m != nil {
		return m.ReturnTransfers
	}
	return nil
}

func (m *ModemTransfer) GetReturnFor() []string {
	if m != nil {
		return m.ReturnFor
	}
	return nil
}

func (m *ModemTransfer) GetTrackingInformation() string {
	if m != nil {
		return m.TrackingInformation
	}
	return ""
}

func (m *ModemTransfer) GetCreatedAt() *Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ModemTransfer) GetReceivedAt() *Timestamp {
	if m != nil {
		return m.ReceivedAt
	}
	return nil
}

func (m *ModemTransfer) GetCancelledAt() *Timestamp {
	if m != nil {
		return m.CancelledAt
	}
	return nil
}

func (m *ModemTransfer) GetNotReceivedAt() *Timestamp {
	if m != nil {
		return m.NotReceivedAt
	}
	return nil
}

func (m *ModemTransfer) GetReturnDeadline() *Timestamp {
	if m != nil {
		return m.ReturnDeadline
	}
	return nil
}

func (m *ModemTransfer) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ModemTransferReturnLine struct {
	OriginalTransfer string                         `protobuf:"bytes,1,opt,name=original_transfer,json=originalTransfer" json:"original_transfer,omitempty"`
	ReturnTransfer   string                         `protobuf:"bytes,2,opt,name=return_transfer,json=returnTransfer" json:"return_transfer,omitempty"`
	ModemNumbers     []string                       `protobuf:"bytes,3,rep,name=modem_numbers,json=modemNumbers" json:"modem_numbers,omitempty"`
	Reason           ModemTransferReturnLine_Reason `protobuf:"varint,4,opt,name=reason,enum=hiber.modem.ModemTransferReturnLine_Reason" json:"reason,omitempty"`
	Comment          string                         `protobuf:"bytes,5,opt,name=comment" json:"comment,omitempty"`
	CreatedAt        *Timestamp                     `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	ReturnedAt       *Timestamp                     `protobuf:"bytes,7,opt,name=returned_at,json=returnedAt" json:"returned_at,omitempty"`
	ReturnDeadline   *Timestamp                     `protobuf:"bytes,8,opt,name=return_deadline,json=returnDeadline" json:"return_deadline,omitempty"`
}

func (m *ModemTransferReturnLine) Reset()                    { *m = ModemTransferReturnLine{} }
func (m *ModemTransferReturnLine) String() string            { return proto.CompactTextString(m) }
func (*ModemTransferReturnLine) ProtoMessage()               {}
func (*ModemTransferReturnLine) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *ModemTransferReturnLine) GetOriginalTransfer() string {
	if m != nil {
		return m.OriginalTransfer
	}
	return ""
}

func (m *ModemTransferReturnLine) GetReturnTransfer() string {
	if m != nil {
		return m.ReturnTransfer
	}
	return ""
}

func (m *ModemTransferReturnLine) GetModemNumbers() []string {
	if m != nil {
		return m.ModemNumbers
	}
	return nil
}

func (m *ModemTransferReturnLine) GetReason() ModemTransferReturnLine_Reason {
	if m != nil {
		return m.Reason
	}
	return ModemTransferReturnLine_OTHER
}

func (m *ModemTransferReturnLine) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *ModemTransferReturnLine) GetCreatedAt() *Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ModemTransferReturnLine) GetReturnedAt() *Timestamp {
	if m != nil {
		return m.ReturnedAt
	}
	return nil
}

func (m *ModemTransferReturnLine) GetReturnDeadline() *Timestamp {
	if m != nil {
		return m.ReturnDeadline
	}
	return nil
}

type ModemTransferSelection struct {
	Identifiers   []string               `protobuf:"bytes,1,rep,name=identifiers" json:"identifiers,omitempty"`
	Modems        *ModemSelection        `protobuf:"bytes,2,opt,name=modems" json:"modems,omitempty"`
	Senders       []string               `protobuf:"bytes,3,rep,name=senders" json:"senders,omitempty"`
	Recipients    []string               `protobuf:"bytes,4,rep,name=recipients" json:"recipients,omitempty"`
	Statuses      []ModemTransfer_Status `protobuf:"varint,5,rep,packed,name=statuses,enum=hiber.modem.ModemTransfer_Status" json:"statuses,omitempty"`
	CreatedIn     *TimeRange             `protobuf:"bytes,6,opt,name=created_in,json=createdIn" json:"created_in,omitempty"`
	ReceivedIn    *TimeRange             `protobuf:"bytes,7,opt,name=received_in,json=receivedIn" json:"received_in,omitempty"`
	NotReceivedIn *TimeRange             `protobuf:"bytes,8,opt,name=not_received_in,json=notReceivedIn" json:"not_received_in,omitempty"`
	CancelledIn   *TimeRange             `protobuf:"bytes,9,opt,name=cancelled_in,json=cancelledIn" json:"cancelled_in,omitempty"`
	Types         []ModemTransfer_Type   `protobuf:"varint,10,rep,packed,name=types,enum=hiber.modem.ModemTransfer_Type" json:"types,omitempty"`
	// Convenience method to setting recipients = my organization.
	// Will ignore any current value for recipients, since the only valid recipient is you.
	InboundOnly bool `protobuf:"varint,11,opt,name=inbound_only,json=inboundOnly" json:"inbound_only,omitempty"`
	// Convenience method to setting senders = my organization.
	// Will ignore any current value for senders, since the only valid sender is you.
	OutboundOnly bool `protobuf:"varint,12,opt,name=outbound_only,json=outboundOnly" json:"outbound_only,omitempty"`
}

func (m *ModemTransferSelection) Reset()                    { *m = ModemTransferSelection{} }
func (m *ModemTransferSelection) String() string            { return proto.CompactTextString(m) }
func (*ModemTransferSelection) ProtoMessage()               {}
func (*ModemTransferSelection) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *ModemTransferSelection) GetIdentifiers() []string {
	if m != nil {
		return m.Identifiers
	}
	return nil
}

func (m *ModemTransferSelection) GetModems() *ModemSelection {
	if m != nil {
		return m.Modems
	}
	return nil
}

func (m *ModemTransferSelection) GetSenders() []string {
	if m != nil {
		return m.Senders
	}
	return nil
}

func (m *ModemTransferSelection) GetRecipients() []string {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func (m *ModemTransferSelection) GetStatuses() []ModemTransfer_Status {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func (m *ModemTransferSelection) GetCreatedIn() *TimeRange {
	if m != nil {
		return m.CreatedIn
	}
	return nil
}

func (m *ModemTransferSelection) GetReceivedIn() *TimeRange {
	if m != nil {
		return m.ReceivedIn
	}
	return nil
}

func (m *ModemTransferSelection) GetNotReceivedIn() *TimeRange {
	if m != nil {
		return m.NotReceivedIn
	}
	return nil
}

func (m *ModemTransferSelection) GetCancelledIn() *TimeRange {
	if m != nil {
		return m.CancelledIn
	}
	return nil
}

func (m *ModemTransferSelection) GetTypes() []ModemTransfer_Type {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *ModemTransferSelection) GetInboundOnly() bool {
	if m != nil {
		return m.InboundOnly
	}
	return false
}

func (m *ModemTransferSelection) GetOutboundOnly() bool {
	if m != nil {
		return m.OutboundOnly
	}
	return false
}

type TransferModemsRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	// The ModemSelection is automatically appended with a status filter for 'in stock' modems. Modems with a different
	// status are ignored for the transfer.
	Selection *ModemSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	// Existing organization to send the modems to.
	RecipientOrganization string `protobuf:"bytes,3,opt,name=recipient_organization,json=recipientOrganization" json:"recipient_organization,omitempty"`
	// Create a new organization to transfer the modems to.
	CreateRecipient *CreateOrganizationRequest `protobuf:"bytes,4,opt,name=create_recipient,json=createRecipient" json:"create_recipient,omitempty"`
	// Optional tracking information, like package tracking codes
	TrackingInformation string `protobuf:"bytes,5,opt,name=tracking_information,json=trackingInformation" json:"tracking_information,omitempty"`
	// Mark the transfer as received automatically.
	// This only works if you're able to impersonate the recipient organization.
	MarkReceivedAutomatically bool `protobuf:"varint,6,opt,name=mark_received_automatically,json=markReceivedAutomatically" json:"mark_received_automatically,omitempty"`
	// When this value is not set to true, transferring gateways or modems with an external device id is not allowed.
	// Gateways and external devices are connected to the current organization.
	// Moving either a gateway or connected external device to another organization without moving the other can
	// cause a number of issues.
	AllowGatewaysAndExternalDevices bool `protobuf:"varint,7,opt,name=allow_gateways_and_external_devices,json=allowGatewaysAndExternalDevices" json:"allow_gateways_and_external_devices,omitempty"`
}

func (m *TransferModemsRequest) Reset()                    { *m = TransferModemsRequest{} }
func (m *TransferModemsRequest) String() string            { return proto.CompactTextString(m) }
func (*TransferModemsRequest) ProtoMessage()               {}
func (*TransferModemsRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *TransferModemsRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *TransferModemsRequest) GetSelection() *ModemSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *TransferModemsRequest) GetRecipientOrganization() string {
	if m != nil {
		return m.RecipientOrganization
	}
	return ""
}

func (m *TransferModemsRequest) GetCreateRecipient() *CreateOrganizationRequest {
	if m != nil {
		return m.CreateRecipient
	}
	return nil
}

func (m *TransferModemsRequest) GetTrackingInformation() string {
	if m != nil {
		return m.TrackingInformation
	}
	return ""
}

func (m *TransferModemsRequest) GetMarkReceivedAutomatically() bool {
	if m != nil {
		return m.MarkReceivedAutomatically
	}
	return false
}

func (m *TransferModemsRequest) GetAllowGatewaysAndExternalDevices() bool {
	if m != nil {
		return m.AllowGatewaysAndExternalDevices
	}
	return false
}

type TransferModemsRequest_Response struct {
	Request  *TransferModemsRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Transfer *ModemTransfer         `protobuf:"bytes,2,opt,name=transfer" json:"transfer,omitempty"`
}

func (m *TransferModemsRequest_Response) Reset()         { *m = TransferModemsRequest_Response{} }
func (m *TransferModemsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*TransferModemsRequest_Response) ProtoMessage()    {}
func (*TransferModemsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{3, 0}
}

func (m *TransferModemsRequest_Response) GetRequest() *TransferModemsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *TransferModemsRequest_Response) GetTransfer() *ModemTransfer {
	if m != nil {
		return m.Transfer
	}
	return nil
}

type ListModemTransfersRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                  `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *ModemTransferSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination             `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListModemTransfersRequest) Reset()                    { *m = ListModemTransfersRequest{} }
func (m *ListModemTransfersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListModemTransfersRequest) ProtoMessage()               {}
func (*ListModemTransfersRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

func (m *ListModemTransfersRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ListModemTransfersRequest) GetSelection() *ModemTransferSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListModemTransfersRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListModemTransfersRequest_Response struct {
	Request    *ListModemTransfersRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Transfers  []*ModemTransfer           `protobuf:"bytes,2,rep,name=transfers" json:"transfers,omitempty"`
	Pagination *Pagination_Result         `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListModemTransfersRequest_Response) Reset()         { *m = ListModemTransfersRequest_Response{} }
func (m *ListModemTransfersRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListModemTransfersRequest_Response) ProtoMessage()    {}
func (*ListModemTransfersRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{4, 0}
}

func (m *ListModemTransfersRequest_Response) GetRequest() *ListModemTransfersRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListModemTransfersRequest_Response) GetTransfers() []*ModemTransfer {
	if m != nil {
		return m.Transfers
	}
	return nil
}

func (m *ListModemTransfersRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type CancelModemTransferRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                  `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *ModemTransferSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
}

func (m *CancelModemTransferRequest) Reset()                    { *m = CancelModemTransferRequest{} }
func (m *CancelModemTransferRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelModemTransferRequest) ProtoMessage()               {}
func (*CancelModemTransferRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{5} }

func (m *CancelModemTransferRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *CancelModemTransferRequest) GetSelection() *ModemTransferSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

type CancelModemTransferRequest_Response struct {
	Request   *CancelModemTransferRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Cancelled []*ModemTransfer            `protobuf:"bytes,2,rep,name=cancelled" json:"cancelled,omitempty"`
}

func (m *CancelModemTransferRequest_Response) Reset()         { *m = CancelModemTransferRequest_Response{} }
func (m *CancelModemTransferRequest_Response) String() string { return proto.CompactTextString(m) }
func (*CancelModemTransferRequest_Response) ProtoMessage()    {}
func (*CancelModemTransferRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{5, 0}
}

func (m *CancelModemTransferRequest_Response) GetRequest() *CancelModemTransferRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *CancelModemTransferRequest_Response) GetCancelled() []*ModemTransfer {
	if m != nil {
		return m.Cancelled
	}
	return nil
}

type ReceivedModemTransferRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                  `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *ModemTransferSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
}

func (m *ReceivedModemTransferRequest) Reset()                    { *m = ReceivedModemTransferRequest{} }
func (m *ReceivedModemTransferRequest) String() string            { return proto.CompactTextString(m) }
func (*ReceivedModemTransferRequest) ProtoMessage()               {}
func (*ReceivedModemTransferRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{6} }

func (m *ReceivedModemTransferRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ReceivedModemTransferRequest) GetSelection() *ModemTransferSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

type ReceivedModemTransferRequest_Response struct {
	Request  *ReceivedModemTransferRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Received []*ModemTransfer              `protobuf:"bytes,2,rep,name=received" json:"received,omitempty"`
}

func (m *ReceivedModemTransferRequest_Response) Reset()         { *m = ReceivedModemTransferRequest_Response{} }
func (m *ReceivedModemTransferRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ReceivedModemTransferRequest_Response) ProtoMessage()    {}
func (*ReceivedModemTransferRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{6, 0}
}

func (m *ReceivedModemTransferRequest_Response) GetRequest() *ReceivedModemTransferRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ReceivedModemTransferRequest_Response) GetReceived() []*ModemTransfer {
	if m != nil {
		return m.Received
	}
	return nil
}

type NotReceivedModemTransferRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                  `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *ModemTransferSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
}

func (m *NotReceivedModemTransferRequest) Reset()                    { *m = NotReceivedModemTransferRequest{} }
func (m *NotReceivedModemTransferRequest) String() string            { return proto.CompactTextString(m) }
func (*NotReceivedModemTransferRequest) ProtoMessage()               {}
func (*NotReceivedModemTransferRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{7} }

func (m *NotReceivedModemTransferRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *NotReceivedModemTransferRequest) GetSelection() *ModemTransferSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

type NotReceivedModemTransferRequest_Response struct {
	Request     *NotReceivedModemTransferRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	NotReceived []*ModemTransfer                 `protobuf:"bytes,2,rep,name=not_received,json=notReceived" json:"not_received,omitempty"`
}

func (m *NotReceivedModemTransferRequest_Response) Reset() {
	*m = NotReceivedModemTransferRequest_Response{}
}
func (m *NotReceivedModemTransferRequest_Response) String() string { return proto.CompactTextString(m) }
func (*NotReceivedModemTransferRequest_Response) ProtoMessage()    {}
func (*NotReceivedModemTransferRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{7, 0}
}

func (m *NotReceivedModemTransferRequest_Response) GetRequest() *NotReceivedModemTransferRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *NotReceivedModemTransferRequest_Response) GetNotReceived() []*ModemTransfer {
	if m != nil {
		return m.NotReceived
	}
	return nil
}

type PrepareModemForReturnRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	// The transfer id that you received the modems with, to be used to the return.
	// If this is provided, only one return line is returned.
	// If this is not provided, the given modem selection could match multiple transfers, so multiple
	// return lines would be created.
	TransferId string `protobuf:"bytes,2,opt,name=transfer_id,json=transferId" json:"transfer_id,omitempty"`
	// Selection of modems, received from the transfer above.
	Selection *ModemSelection `protobuf:"bytes,3,opt,name=selection" json:"selection,omitempty"`
	// The reason for the return. For the 'other' reason, a comment is required.
	Reason ModemTransferReturnLine_Reason `protobuf:"varint,4,opt,name=reason,enum=hiber.modem.ModemTransferReturnLine_Reason" json:"reason,omitempty"`
	// Optional, unless the 'other' reason is selected.
	Comment string `protobuf:"bytes,5,opt,name=comment" json:"comment,omitempty"`
	// Use this to update the comment for a return line (using the same transfer_id and reason).
	ReplacePreviousComment bool `protobuf:"varint,6,opt,name=replace_previous_comment,json=replacePreviousComment" json:"replace_previous_comment,omitempty"`
}

func (m *PrepareModemForReturnRequest) Reset()                    { *m = PrepareModemForReturnRequest{} }
func (m *PrepareModemForReturnRequest) String() string            { return proto.CompactTextString(m) }
func (*PrepareModemForReturnRequest) ProtoMessage()               {}
func (*PrepareModemForReturnRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{8} }

func (m *PrepareModemForReturnRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *PrepareModemForReturnRequest) GetTransferId() string {
	if m != nil {
		return m.TransferId
	}
	return ""
}

func (m *PrepareModemForReturnRequest) GetSelection() *ModemSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *PrepareModemForReturnRequest) GetReason() ModemTransferReturnLine_Reason {
	if m != nil {
		return m.Reason
	}
	return ModemTransferReturnLine_OTHER
}

func (m *PrepareModemForReturnRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *PrepareModemForReturnRequest) GetReplacePreviousComment() bool {
	if m != nil {
		return m.ReplacePreviousComment
	}
	return false
}

type PrepareModemForReturnRequest_Response struct {
	Request          *PrepareModemForReturnRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	ModemReturnLines []*ModemTransferReturnLine    `protobuf:"bytes,3,rep,name=modem_return_lines,json=modemReturnLines" json:"modem_return_lines,omitempty"`
}

func (m *PrepareModemForReturnRequest_Response) Reset()         { *m = PrepareModemForReturnRequest_Response{} }
func (m *PrepareModemForReturnRequest_Response) String() string { return proto.CompactTextString(m) }
func (*PrepareModemForReturnRequest_Response) ProtoMessage()    {}
func (*PrepareModemForReturnRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{8, 0}
}

func (m *PrepareModemForReturnRequest_Response) GetRequest() *PrepareModemForReturnRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *PrepareModemForReturnRequest_Response) GetModemReturnLines() []*ModemTransferReturnLine {
	if m != nil {
		return m.ModemReturnLines
	}
	return nil
}

type DeleteModemTransferReturnLinesRequest struct {
	Organization string   `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	TransferId   string   `protobuf:"bytes,2,opt,name=transfer_id,json=transferId" json:"transfer_id,omitempty"`
	ModemNumbers []string `protobuf:"bytes,3,rep,name=modem_numbers,json=modemNumbers" json:"modem_numbers,omitempty"`
}

func (m *DeleteModemTransferReturnLinesRequest) Reset()         { *m = DeleteModemTransferReturnLinesRequest{} }
func (m *DeleteModemTransferReturnLinesRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteModemTransferReturnLinesRequest) ProtoMessage()    {}
func (*DeleteModemTransferReturnLinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{9}
}

func (m *DeleteModemTransferReturnLinesRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *DeleteModemTransferReturnLinesRequest) GetTransferId() string {
	if m != nil {
		return m.TransferId
	}
	return ""
}

func (m *DeleteModemTransferReturnLinesRequest) GetModemNumbers() []string {
	if m != nil {
		return m.ModemNumbers
	}
	return nil
}

type DeleteModemTransferReturnLinesRequest_Response struct {
}

func (m *DeleteModemTransferReturnLinesRequest_Response) Reset() {
	*m = DeleteModemTransferReturnLinesRequest_Response{}
}
func (m *DeleteModemTransferReturnLinesRequest_Response) String() string {
	return proto.CompactTextString(m)
}
func (*DeleteModemTransferReturnLinesRequest_Response) ProtoMessage() {}
func (*DeleteModemTransferReturnLinesRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{9, 0}
}

type ListModemTransferReturnLinesRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                  `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *ModemTransferSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination             `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListModemTransferReturnLinesRequest) Reset()         { *m = ListModemTransferReturnLinesRequest{} }
func (m *ListModemTransferReturnLinesRequest) String() string { return proto.CompactTextString(m) }
func (*ListModemTransferReturnLinesRequest) ProtoMessage()    {}
func (*ListModemTransferReturnLinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{10}
}

func (m *ListModemTransferReturnLinesRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ListModemTransferReturnLinesRequest) GetSelection() *ModemTransferSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListModemTransferReturnLinesRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListModemTransferReturnLinesRequest_Response struct {
	Request    *ListModemTransferReturnLinesRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Lines      []*ModemTransferReturnLine           `protobuf:"bytes,2,rep,name=lines" json:"lines,omitempty"`
	Pagination *Pagination_Result                   `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListModemTransferReturnLinesRequest_Response) Reset() {
	*m = ListModemTransferReturnLinesRequest_Response{}
}
func (m *ListModemTransferReturnLinesRequest_Response) String() string {
	return proto.CompactTextString(m)
}
func (*ListModemTransferReturnLinesRequest_Response) ProtoMessage() {}
func (*ListModemTransferReturnLinesRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{10, 0}
}

func (m *ListModemTransferReturnLinesRequest_Response) GetRequest() *ListModemTransferReturnLinesRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListModemTransferReturnLinesRequest_Response) GetLines() []*ModemTransferReturnLine {
	if m != nil {
		return m.Lines
	}
	return nil
}

func (m *ListModemTransferReturnLinesRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type SendReturnRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization        string                  `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection           *ModemTransferSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	TrackingInformation string                  `protobuf:"bytes,3,opt,name=tracking_information,json=trackingInformation" json:"tracking_information,omitempty"`
}

func (m *SendReturnRequest) Reset()                    { *m = SendReturnRequest{} }
func (m *SendReturnRequest) String() string            { return proto.CompactTextString(m) }
func (*SendReturnRequest) ProtoMessage()               {}
func (*SendReturnRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{11} }

func (m *SendReturnRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *SendReturnRequest) GetSelection() *ModemTransferSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *SendReturnRequest) GetTrackingInformation() string {
	if m != nil {
		return m.TrackingInformation
	}
	return ""
}

type SendReturnRequest_Response struct {
	Request        *SendReturnRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	ReturnTransfer *ModemTransfer     `protobuf:"bytes,2,opt,name=return_transfer,json=returnTransfer" json:"return_transfer,omitempty"`
}

func (m *SendReturnRequest_Response) Reset()                    { *m = SendReturnRequest_Response{} }
func (m *SendReturnRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*SendReturnRequest_Response) ProtoMessage()               {}
func (*SendReturnRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{11, 0} }

func (m *SendReturnRequest_Response) GetRequest() *SendReturnRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SendReturnRequest_Response) GetReturnTransfer() *ModemTransfer {
	if m != nil {
		return m.ReturnTransfer
	}
	return nil
}

func init() {
	proto.RegisterType((*ModemTransfer)(nil), "hiber.modem.ModemTransfer")
	proto.RegisterType((*ModemTransferReturnLine)(nil), "hiber.modem.ModemTransferReturnLine")
	proto.RegisterType((*ModemTransferSelection)(nil), "hiber.modem.ModemTransferSelection")
	proto.RegisterType((*TransferModemsRequest)(nil), "hiber.modem.TransferModemsRequest")
	proto.RegisterType((*TransferModemsRequest_Response)(nil), "hiber.modem.TransferModemsRequest.Response")
	proto.RegisterType((*ListModemTransfersRequest)(nil), "hiber.modem.ListModemTransfersRequest")
	proto.RegisterType((*ListModemTransfersRequest_Response)(nil), "hiber.modem.ListModemTransfersRequest.Response")
	proto.RegisterType((*CancelModemTransferRequest)(nil), "hiber.modem.CancelModemTransferRequest")
	proto.RegisterType((*CancelModemTransferRequest_Response)(nil), "hiber.modem.CancelModemTransferRequest.Response")
	proto.RegisterType((*ReceivedModemTransferRequest)(nil), "hiber.modem.ReceivedModemTransferRequest")
	proto.RegisterType((*ReceivedModemTransferRequest_Response)(nil), "hiber.modem.ReceivedModemTransferRequest.Response")
	proto.RegisterType((*NotReceivedModemTransferRequest)(nil), "hiber.modem.NotReceivedModemTransferRequest")
	proto.RegisterType((*NotReceivedModemTransferRequest_Response)(nil), "hiber.modem.NotReceivedModemTransferRequest.Response")
	proto.RegisterType((*PrepareModemForReturnRequest)(nil), "hiber.modem.PrepareModemForReturnRequest")
	proto.RegisterType((*PrepareModemForReturnRequest_Response)(nil), "hiber.modem.PrepareModemForReturnRequest.Response")
	proto.RegisterType((*DeleteModemTransferReturnLinesRequest)(nil), "hiber.modem.DeleteModemTransferReturnLinesRequest")
	proto.RegisterType((*DeleteModemTransferReturnLinesRequest_Response)(nil), "hiber.modem.DeleteModemTransferReturnLinesRequest.Response")
	proto.RegisterType((*ListModemTransferReturnLinesRequest)(nil), "hiber.modem.ListModemTransferReturnLinesRequest")
	proto.RegisterType((*ListModemTransferReturnLinesRequest_Response)(nil), "hiber.modem.ListModemTransferReturnLinesRequest.Response")
	proto.RegisterType((*SendReturnRequest)(nil), "hiber.modem.SendReturnRequest")
	proto.RegisterType((*SendReturnRequest_Response)(nil), "hiber.modem.SendReturnRequest.Response")
	proto.RegisterEnum("hiber.modem.ModemTransfer_Type", ModemTransfer_Type_name, ModemTransfer_Type_value)
	proto.RegisterEnum("hiber.modem.ModemTransfer_Status", ModemTransfer_Status_name, ModemTransfer_Status_value)
	proto.RegisterEnum("hiber.modem.ModemTransferReturnLine_Reason", ModemTransferReturnLine_Reason_name, ModemTransferReturnLine_Reason_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ModemTransferService service

type ModemTransferServiceClient interface {
	// Transfer modems to a different organization.
	// As a result, the modem will get the outbound status for you, and the inbound status for the recipient.
	// Note: this call can automatically generate a child organization for the recipient if it has no organization.
	Transfer(ctx context.Context, in *TransferModemsRequest, opts ...grpc.CallOption) (*TransferModemsRequest_Response, error)
	// List transfers for modems. This could be used to list all active transfers on a selection of modems,
	// or, for example, to list this history of all transfers for one modem.
	List(ctx context.Context, in *ListModemTransfersRequest, opts ...grpc.CallOption) (*ListModemTransfersRequest_Response, error)
	// Cancel a started transfer.
	Cancel(ctx context.Context, in *CancelModemTransferRequest, opts ...grpc.CallOption) (*CancelModemTransferRequest_Response, error)
	// Mark inbound modems as received, adding them to your organization.
	Received(ctx context.Context, in *ReceivedModemTransferRequest, opts ...grpc.CallOption) (*ReceivedModemTransferRequest_Response, error)
	// Mark modems as not received when they were inbound but did not show up.
	// If you do receive the modems after marking them as not received, you can claim them to still get them in
	// your organization.
	NotReceived(ctx context.Context, in *NotReceivedModemTransferRequest, opts ...grpc.CallOption) (*NotReceivedModemTransferRequest_Response, error)
}

type modemTransferServiceClient struct {
	cc *grpc.ClientConn
}

func NewModemTransferServiceClient(cc *grpc.ClientConn) ModemTransferServiceClient {
	return &modemTransferServiceClient{cc}
}

func (c *modemTransferServiceClient) Transfer(ctx context.Context, in *TransferModemsRequest, opts ...grpc.CallOption) (*TransferModemsRequest_Response, error) {
	out := new(TransferModemsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemTransferService/Transfer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemTransferServiceClient) List(ctx context.Context, in *ListModemTransfersRequest, opts ...grpc.CallOption) (*ListModemTransfersRequest_Response, error) {
	out := new(ListModemTransfersRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemTransferService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemTransferServiceClient) Cancel(ctx context.Context, in *CancelModemTransferRequest, opts ...grpc.CallOption) (*CancelModemTransferRequest_Response, error) {
	out := new(CancelModemTransferRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemTransferService/Cancel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemTransferServiceClient) Received(ctx context.Context, in *ReceivedModemTransferRequest, opts ...grpc.CallOption) (*ReceivedModemTransferRequest_Response, error) {
	out := new(ReceivedModemTransferRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemTransferService/Received", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemTransferServiceClient) NotReceived(ctx context.Context, in *NotReceivedModemTransferRequest, opts ...grpc.CallOption) (*NotReceivedModemTransferRequest_Response, error) {
	out := new(NotReceivedModemTransferRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemTransferService/NotReceived", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ModemTransferService service

type ModemTransferServiceServer interface {
	// Transfer modems to a different organization.
	// As a result, the modem will get the outbound status for you, and the inbound status for the recipient.
	// Note: this call can automatically generate a child organization for the recipient if it has no organization.
	Transfer(context.Context, *TransferModemsRequest) (*TransferModemsRequest_Response, error)
	// List transfers for modems. This could be used to list all active transfers on a selection of modems,
	// or, for example, to list this history of all transfers for one modem.
	List(context.Context, *ListModemTransfersRequest) (*ListModemTransfersRequest_Response, error)
	// Cancel a started transfer.
	Cancel(context.Context, *CancelModemTransferRequest) (*CancelModemTransferRequest_Response, error)
	// Mark inbound modems as received, adding them to your organization.
	Received(context.Context, *ReceivedModemTransferRequest) (*ReceivedModemTransferRequest_Response, error)
	// Mark modems as not received when they were inbound but did not show up.
	// If you do receive the modems after marking them as not received, you can claim them to still get them in
	// your organization.
	NotReceived(context.Context, *NotReceivedModemTransferRequest) (*NotReceivedModemTransferRequest_Response, error)
}

func RegisterModemTransferServiceServer(s *grpc.Server, srv ModemTransferServiceServer) {
	s.RegisterService(&_ModemTransferService_serviceDesc, srv)
}

func _ModemTransferService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferModemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemTransferServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemTransferService/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemTransferServiceServer).Transfer(ctx, req.(*TransferModemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemTransferService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModemTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemTransferServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemTransferService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemTransferServiceServer).List(ctx, req.(*ListModemTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemTransferService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelModemTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemTransferServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemTransferService/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemTransferServiceServer).Cancel(ctx, req.(*CancelModemTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemTransferService_Received_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedModemTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemTransferServiceServer).Received(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemTransferService/Received",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemTransferServiceServer).Received(ctx, req.(*ReceivedModemTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemTransferService_NotReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotReceivedModemTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemTransferServiceServer).NotReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemTransferService/NotReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemTransferServiceServer).NotReceived(ctx, req.(*NotReceivedModemTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModemTransferService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.modem.ModemTransferService",
	HandlerType: (*ModemTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transfer",
			Handler:    _ModemTransferService_Transfer_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ModemTransferService_List_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _ModemTransferService_Cancel_Handler,
		},
		{
			MethodName: "Received",
			Handler:    _ModemTransferService_Received_Handler,
		},
		{
			MethodName: "NotReceived",
			Handler:    _ModemTransferService_NotReceived_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modem_transfer.proto",
}

// Client API for ModemTransferReturnService service

type ModemTransferReturnServiceClient interface {
	// If any problems are detected with the modems within the return period, mark them using this method.
	// Modems marked using this method can be returned in one transfer, as long as they are returned to the same
	// organization.
	Prepare(ctx context.Context, in *PrepareModemForReturnRequest, opts ...grpc.CallOption) (*PrepareModemForReturnRequest_Response, error)
	// List the return lines, either for a return transfer, or lines that have not been
	// returned with a return transfer yet.
	Lines(ctx context.Context, in *ListModemTransferReturnLinesRequest, opts ...grpc.CallOption) (*ListModemTransferReturnLinesRequest_Response, error)
	DeleteLine(ctx context.Context, in *DeleteModemTransferReturnLinesRequest, opts ...grpc.CallOption) (*DeleteModemTransferReturnLinesRequest_Response, error)
	// Transfer modems marked for return back to the sender.
	Send(ctx context.Context, in *SendReturnRequest, opts ...grpc.CallOption) (*SendReturnRequest_Response, error)
}

type modemTransferReturnServiceClient struct {
	cc *grpc.ClientConn
}

func NewModemTransferReturnServiceClient(cc *grpc.ClientConn) ModemTransferReturnServiceClient {
	return &modemTransferReturnServiceClient{cc}
}

func (c *modemTransferReturnServiceClient) Prepare(ctx context.Context, in *PrepareModemForReturnRequest, opts ...grpc.CallOption) (*PrepareModemForReturnRequest_Response, error) {
	out := new(PrepareModemForReturnRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemTransferReturnService/Prepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemTransferReturnServiceClient) Lines(ctx context.Context, in *ListModemTransferReturnLinesRequest, opts ...grpc.CallOption) (*ListModemTransferReturnLinesRequest_Response, error) {
	out := new(ListModemTransferReturnLinesRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemTransferReturnService/Lines", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemTransferReturnServiceClient) DeleteLine(ctx context.Context, in *DeleteModemTransferReturnLinesRequest, opts ...grpc.CallOption) (*DeleteModemTransferReturnLinesRequest_Response, error) {
	out := new(DeleteModemTransferReturnLinesRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemTransferReturnService/DeleteLine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemTransferReturnServiceClient) Send(ctx context.Context, in *SendReturnRequest, opts ...grpc.CallOption) (*SendReturnRequest_Response, error) {
	out := new(SendReturnRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemTransferReturnService/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ModemTransferReturnService service

type ModemTransferReturnServiceServer interface {
	// If any problems are detected with the modems within the return period, mark them using this method.
	// Modems marked using this method can be returned in one transfer, as long as they are returned to the same
	// organization.
	Prepare(context.Context, *PrepareModemForReturnRequest) (*PrepareModemForReturnRequest_Response, error)
	// List the return lines, either for a return transfer, or lines that have not been
	// returned with a return transfer yet.
	Lines(context.Context, *ListModemTransferReturnLinesRequest) (*ListModemTransferReturnLinesRequest_Response, error)
	DeleteLine(context.Context, *DeleteModemTransferReturnLinesRequest) (*DeleteModemTransferReturnLinesRequest_Response, error)
	// Transfer modems marked for return back to the sender.
	Send(context.Context, *SendReturnRequest) (*SendReturnRequest_Response, error)
}

func RegisterModemTransferReturnServiceServer(s *grpc.Server, srv ModemTransferReturnServiceServer) {
	s.RegisterService(&_ModemTransferReturnService_serviceDesc, srv)
}

func _ModemTransferReturnService_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareModemForReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemTransferReturnServiceServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemTransferReturnService/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemTransferReturnServiceServer).Prepare(ctx, req.(*PrepareModemForReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemTransferReturnService_Lines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModemTransferReturnLinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemTransferReturnServiceServer).Lines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemTransferReturnService/Lines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemTransferReturnServiceServer).Lines(ctx, req.(*ListModemTransferReturnLinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemTransferReturnService_DeleteLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModemTransferReturnLinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemTransferReturnServiceServer).DeleteLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemTransferReturnService/DeleteLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemTransferReturnServiceServer).DeleteLine(ctx, req.(*DeleteModemTransferReturnLinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemTransferReturnService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemTransferReturnServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemTransferReturnService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemTransferReturnServiceServer).Send(ctx, req.(*SendReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModemTransferReturnService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.modem.ModemTransferReturnService",
	HandlerType: (*ModemTransferReturnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _ModemTransferReturnService_Prepare_Handler,
		},
		{
			MethodName: "Lines",
			Handler:    _ModemTransferReturnService_Lines_Handler,
		},
		{
			MethodName: "DeleteLine",
			Handler:    _ModemTransferReturnService_DeleteLine_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _ModemTransferReturnService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modem_transfer.proto",
}

func init() { proto.RegisterFile("modem_transfer.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 1676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x4f, 0x73, 0xdb, 0x54,
	0x10, 0xaf, 0xff, 0xc6, 0x5e, 0x39, 0x89, 0xf2, 0xda, 0x14, 0x55, 0x2d, 0x8d, 0xab, 0x00, 0x4d,
	0xa7, 0xe0, 0xb6, 0xce, 0x94, 0x49, 0x80, 0x32, 0xb8, 0xb6, 0x13, 0xd4, 0x49, 0x9d, 0x8c, 0xe2,
	0x76, 0x18, 0x38, 0x68, 0x14, 0xfb, 0xc5, 0xd5, 0x54, 0x7e, 0x32, 0x92, 0xdc, 0x12, 0x66, 0x98,
	0xe1, 0xc6, 0x70, 0x00, 0x86, 0x1b, 0x07, 0xf8, 0x00, 0x7c, 0x04, 0x38, 0x71, 0xe2, 0x42, 0xbf,
	0x05, 0x5f, 0x82, 0x0b, 0x33, 0x8c, 0xde, 0xd3, 0x5f, 0xff, 0x8b, 0x0c, 0x85, 0x72, 0xab, 0x77,
	0x7f, 0xfb, 0x76, 0xdf, 0xee, 0xbe, 0xfd, 0x6d, 0x54, 0x38, 0xd7, 0x37, 0xbb, 0xb8, 0xaf, 0x3a,
	0x96, 0x46, 0xec, 0x63, 0x6c, 0x55, 0x06, 0x96, 0xe9, 0x98, 0x88, 0x7b, 0xa4, 0x1f, 0x61, 0xab,
	0x42, 0x75, 0x22, 0x1c, 0x69, 0x36, 0x66, 0x0a, 0x11, 0x99, 0x56, 0x4f, 0x23, 0xfa, 0xa7, 0x9a,
	0xa3, 0x9b, 0xc4, 0x93, 0x71, 0x14, 0xe6, 0xfd, 0x28, 0x3a, 0x5a, 0x8f, 0xfd, 0x53, 0xfa, 0x35,
	0x0f, 0x8b, 0xf7, 0x5d, 0x55, 0xdb, 0x3b, 0x1c, 0x5d, 0x06, 0xd0, 0xbb, 0x98, 0x38, 0xfa, 0xb1,
	0x8e, 0x2d, 0x21, 0x55, 0x4e, 0x6d, 0x14, 0x95, 0x88, 0x04, 0xad, 0xc3, 0x22, 0x0b, 0x87, 0x0c,
	0xfb, 0x47, 0xd8, 0xb2, 0x85, 0x74, 0x39, 0xb3, 0x51, 0x54, 0x4a, 0x54, 0xd8, 0x62, 0x32, 0xb4,
	0x09, 0x59, 0xe7, 0x64, 0x80, 0x85, 0x4c, 0x39, 0xb5, 0xb1, 0x54, 0x5d, 0xab, 0x44, 0x42, 0xad,
	0xc4, 0xdc, 0x55, 0xda, 0x27, 0x03, 0xac, 0x50, 0x30, 0xda, 0x86, 0xbc, 0xed, 0x68, 0xce, 0xd0,
	0x16, 0xb2, 0xd4, 0xec, 0xca, 0x0c, 0xb3, 0x43, 0x0a, 0x54, 0x3c, 0x03, 0x74, 0x03, 0xce, 0xda,
	0x98, 0x74, 0xb1, 0xa5, 0x46, 0xef, 0x2e, 0xe4, 0x68, 0xf4, 0x88, 0xa9, 0xf6, 0x23, 0x1a, 0x74,
	0x1b, 0xce, 0x5b, 0xb8, 0xa3, 0x0f, 0x74, 0x4c, 0x9c, 0xb8, 0x4d, 0x9e, 0xda, 0xac, 0x06, 0xda,
	0x98, 0xd9, 0x35, 0xe0, 0x2d, 0xec, 0x0c, 0x2d, 0x12, 0x14, 0xc3, 0x16, 0x16, 0xe8, 0xfd, 0x97,
	0x99, 0xdc, 0x0f, 0xd0, 0x46, 0x2f, 0x03, 0x78, 0xd0, 0x63, 0xd3, 0x12, 0x0a, 0x14, 0x54, 0x64,
	0x92, 0x1d, 0xd3, 0x42, 0xb7, 0xe0, 0x9c, 0x63, 0x69, 0x9d, 0xc7, 0x3a, 0xe9, 0xa9, 0x3a, 0x39,
	0x36, 0xad, 0x3e, 0x73, 0x5f, 0xa4, 0xee, 0xcf, 0xfa, 0x3a, 0x39, 0x54, 0xa1, 0x1b, 0x00, 0x1d,
	0x0b, 0x6b, 0x0e, 0xee, 0xaa, 0x9a, 0x23, 0x40, 0x39, 0xb5, 0xc1, 0x55, 0x79, 0x2f, 0x47, 0x6d,
	0xbd, 0x8f, 0x6d, 0x47, 0xeb, 0x0f, 0x94, 0xa2, 0x87, 0xa9, 0x39, 0xe8, 0x16, 0x70, 0x16, 0xee,
	0x60, 0xfd, 0x09, 0xb3, 0xe0, 0xa6, 0x58, 0x80, 0x0f, 0xaa, 0x39, 0x68, 0x13, 0x4a, 0x1d, 0x8d,
	0x74, 0xb0, 0x61, 0x30, 0x9b, 0xd2, 0x14, 0x1b, 0x2e, 0x40, 0xd5, 0x1c, 0xb4, 0x05, 0xcb, 0xc4,
	0x74, 0xd4, 0xa8, 0xaf, 0xc5, 0x29, 0x76, 0x8b, 0xc4, 0x74, 0x94, 0xd0, 0xdd, 0x36, 0x78, 0x79,
	0x53, 0xbb, 0x58, 0xeb, 0x1a, 0x3a, 0xc1, 0xc2, 0xd2, 0x14, 0xcb, 0x25, 0x06, 0x6c, 0x78, 0x38,
	0x24, 0x41, 0xd6, 0xd1, 0x7a, 0xb6, 0xb0, 0x5c, 0xce, 0x6c, 0x70, 0xd5, 0x25, 0x0f, 0xef, 0x76,
	0x76, 0x5b, 0xeb, 0x29, 0x54, 0x27, 0x95, 0x21, 0xeb, 0xf6, 0x17, 0x2a, 0x41, 0xa1, 0xad, 0xd4,
	0x5a, 0x87, 0x3b, 0x4d, 0x85, 0x3f, 0x83, 0x00, 0xf2, 0x4a, 0xb3, 0xfd, 0x40, 0x69, 0xf1, 0x29,
	0x69, 0x17, 0xf2, 0xac, 0x95, 0xd0, 0x12, 0x80, 0xdc, 0x52, 0x29, 0x4c, 0x6e, 0xf3, 0x67, 0x5c,
	0x1b, 0xa5, 0x59, 0x6f, 0xca, 0x0f, 0x9b, 0x0d, 0x3e, 0x85, 0x16, 0xa1, 0x58, 0xaf, 0xb5, 0xea,
	0xcd, 0xbd, 0xbd, 0x66, 0x83, 0xcf, 0x20, 0x1e, 0x4a, 0xad, 0xfd, 0xb6, 0x1a, 0x00, 0xb2, 0xd2,
	0x9f, 0x19, 0x78, 0x29, 0xd6, 0xa2, 0x0a, 0x0d, 0x77, 0xcf, 0x0d, 0xf5, 0x3a, 0xac, 0x98, 0x96,
	0xde, 0xd3, 0x89, 0x66, 0x04, 0x7d, 0xe3, 0xbd, 0x2c, 0xde, 0x57, 0x04, 0xef, 0xef, 0x6a, 0x90,
	0x92, 0x00, 0x9a, 0xa6, 0xd0, 0xa5, 0x78, 0x87, 0x8d, 0x3f, 0xc4, 0xcc, 0x84, 0x87, 0x58, 0x87,
	0xbc, 0x85, 0x35, 0xdb, 0x24, 0xde, 0x9b, 0xba, 0x3e, 0xfd, 0x4d, 0x85, 0x01, 0x57, 0x14, 0x6a,
	0xa2, 0x78, 0xa6, 0x48, 0x80, 0x85, 0x8e, 0xd9, 0xef, 0x63, 0xe2, 0x78, 0x2f, 0xca, 0xff, 0x39,
	0xd2, 0x92, 0xf9, 0x84, 0x2d, 0xe9, 0xfa, 0x61, 0x16, 0x0b, 0xd3, 0x5b, 0x92, 0x81, 0x26, 0xf7,
	0x48, 0x21, 0x59, 0x8f, 0x48, 0x3a, 0xe4, 0xd9, 0x55, 0x50, 0x11, 0x72, 0xfb, 0xed, 0xf7, 0x69,
	0xf9, 0x57, 0x61, 0x45, 0x6e, 0x3d, 0xac, 0xed, 0xc9, 0x0d, 0xb7, 0x7e, 0xf2, 0x81, 0xdc, 0x6c,
	0xb5, 0xf9, 0x14, 0xba, 0x00, 0xab, 0xbe, 0xb8, 0xbe, 0xdf, 0xda, 0x91, 0x77, 0x1f, 0x28, 0xb5,
	0xb6, 0xbc, 0xdf, 0xe2, 0xd3, 0x88, 0x83, 0x85, 0x46, 0xed, 0x7e, 0x6d, 0x97, 0x96, 0xbe, 0x00,
	0xd9, 0x46, 0xb3, 0xd6, 0xe0, 0xb3, 0xae, 0xf8, 0xbe, 0x7c, 0x78, 0x28, 0xb7, 0x76, 0xf9, 0x9c,
	0xf4, 0x73, 0x16, 0xce, 0xc7, 0xd2, 0x79, 0x88, 0x0d, 0xdc, 0xa1, 0xef, 0xb6, 0x0c, 0x5c, 0x38,
	0x3f, 0x6d, 0x21, 0x45, 0xcb, 0x14, 0x15, 0xa1, 0x4d, 0xc8, 0xd3, 0x82, 0xd8, 0xb4, 0xd4, 0x5c,
	0xf5, 0xe2, 0x78, 0x95, 0x82, 0xe3, 0x14, 0x0f, 0xea, 0x56, 0x85, 0x0d, 0x36, 0xbf, 0xf2, 0xfe,
	0x4f, 0x77, 0x84, 0x07, 0xe3, 0xcb, 0x1d, 0xa6, 0xae, 0x32, 0x22, 0x41, 0x77, 0xa0, 0xc0, 0xe6,
	0x26, 0xb6, 0x85, 0x5c, 0x39, 0x93, 0x6c, 0xd4, 0x06, 0x26, 0xd1, 0xa2, 0xeb, 0x64, 0x42, 0xd1,
	0x15, 0x8d, 0xf4, 0x70, 0x50, 0x74, 0x99, 0xc4, 0xe6, 0x90, 0x4e, 0x26, 0x14, 0x9d, 0x59, 0x04,
	0x73, 0x48, 0x26, 0x63, 0x23, 0x45, 0x27, 0x13, 0x8a, 0xce, 0xcc, 0xa2, 0x23, 0x45, 0x26, 0xf1,
	0x09, 0xa6, 0xb3, 0x81, 0x3a, 0xc9, 0x2c, 0x9c, 0x60, 0xb2, 0x4b, 0x07, 0x39, 0x97, 0x82, 0x6c,
	0x01, 0x68, 0x3a, 0x4e, 0x25, 0x2c, 0x86, 0x46, 0x57, 0xa0, 0xa4, 0x93, 0x23, 0x73, 0x48, 0xba,
	0xaa, 0x49, 0x8c, 0x13, 0x3a, 0x61, 0x0b, 0x0a, 0xe7, 0xc9, 0xf6, 0x89, 0x71, 0xe2, 0xbe, 0x52,
	0x73, 0xe8, 0x44, 0x30, 0x25, 0x8a, 0x29, 0xf9, 0x42, 0x17, 0x24, 0xfd, 0x96, 0x85, 0x55, 0xdf,
	0x01, 0xf5, 0x66, 0x2b, 0xf8, 0xe3, 0x21, 0xb6, 0x1d, 0x24, 0x41, 0x29, 0xc6, 0x4e, 0x6c, 0x6a,
	0xc4, 0x64, 0x68, 0x1b, 0x8a, 0xb6, 0xdf, 0x1d, 0x49, 0x1a, 0x28, 0x44, 0xcf, 0xa0, 0xc1, 0xcc,
	0x2c, 0x1a, 0xfc, 0x00, 0x78, 0x56, 0x5d, 0x35, 0xd0, 0xd3, 0xf9, 0xc2, 0x55, 0xdf, 0xf0, 0x1c,
	0xc7, 0x56, 0x90, 0x3a, 0xc5, 0x46, 0x4f, 0xf0, 0xae, 0xa7, 0x2c, 0xb3, 0x63, 0x14, 0xff, 0x94,
	0xa9, 0xb4, 0x98, 0x9b, 0x4e, 0x8b, 0xef, 0xc2, 0xc5, 0xbe, 0x66, 0x3d, 0x8e, 0xd0, 0xcf, 0xd0,
	0x31, 0x5d, 0x5d, 0x47, 0x33, 0x8c, 0x13, 0xda, 0x9f, 0x05, 0xe5, 0x82, 0x0b, 0x09, 0x88, 0x27,
	0x0a, 0x40, 0x7b, 0xb0, 0xae, 0x19, 0x86, 0xf9, 0x54, 0xed, 0x69, 0x0e, 0x7e, 0xaa, 0x9d, 0xd8,
	0xaa, 0x46, 0xba, 0x2a, 0xfe, 0xc4, 0xc1, 0x96, 0x3b, 0xb0, 0xbb, 0xf8, 0x89, 0xde, 0xc1, 0x36,
	0xed, 0xda, 0x82, 0xb2, 0x46, 0xa1, 0xbb, 0x1e, 0xb2, 0x46, 0xba, 0x4d, 0x0f, 0xd7, 0x60, 0x30,
	0xf1, 0xf3, 0x14, 0x14, 0x14, 0x6c, 0x0f, 0x4c, 0x62, 0x63, 0xf4, 0x0e, 0x2c, 0x58, 0xec, 0xa6,
	0xb4, 0x70, 0x5c, 0x55, 0x8a, 0xd5, 0x65, 0x62, 0xc9, 0x15, 0xdf, 0x04, 0xbd, 0x09, 0x85, 0x18,
	0x05, 0x70, 0x55, 0x71, 0xc6, 0xf4, 0x0e, 0xb0, 0xd2, 0x1f, 0x69, 0xb8, 0xb0, 0xa7, 0xdb, 0x4e,
	0x4c, 0x3f, 0x57, 0x47, 0xd5, 0xc6, 0x3b, 0x6a, 0x7d, 0xba, 0xeb, 0x89, 0x9d, 0x75, 0x0b, 0x60,
	0xa0, 0xb9, 0xcc, 0x16, 0x74, 0x13, 0x57, 0x5d, 0xf1, 0xce, 0x38, 0x08, 0x14, 0x4a, 0x04, 0x24,
	0xfe, 0x12, 0x4d, 0xdd, 0x7b, 0xa3, 0xa9, 0x7b, 0x2d, 0x16, 0xc0, 0xd4, 0xfb, 0x85, 0xe9, 0xdb,
	0x82, 0x62, 0xb8, 0xa4, 0xa5, 0xe9, 0x96, 0x30, 0x2b, 0x7f, 0x21, 0x18, 0x6d, 0x4d, 0x88, 0x5d,
	0x18, 0x8b, 0xbd, 0xa2, 0x60, 0x7b, 0x68, 0x38, 0xd1, 0x2b, 0x48, 0x5f, 0xa5, 0x41, 0xac, 0xd3,
	0xb9, 0x32, 0x42, 0xad, 0xff, 0x65, 0xee, 0xc5, 0x2f, 0xa2, 0x89, 0xac, 0x8d, 0x26, 0xf2, 0x6a,
	0xec, 0xb4, 0xe9, 0xd1, 0xc6, 0x32, 0x19, 0x0c, 0xcb, 0x24, 0x99, 0x0c, 0xc0, 0xd2, 0x37, 0x69,
	0xb8, 0xe4, 0xbf, 0xba, 0xff, 0x4d, 0x46, 0xea, 0xa3, 0x19, 0xb9, 0x16, 0x3b, 0x6d, 0x56, 0xbc,
	0xb1, 0xc7, 0xe9, 0x0f, 0x9c, 0x04, 0x29, 0x09, 0xb0, 0xd2, 0xf7, 0x69, 0x58, 0x6b, 0x85, 0x84,
	0xf5, 0x22, 0x93, 0xf2, 0x6d, 0x34, 0x29, 0x3b, 0xa3, 0x49, 0x79, 0x3d, 0x76, 0xda, 0x29, 0x21,
	0x87, 0x79, 0xb9, 0x03, 0xa5, 0x28, 0x71, 0x27, 0xc8, 0x0d, 0x17, 0xe1, 0x6f, 0xe9, 0xf7, 0x0c,
	0x5c, 0x3a, 0xb0, 0xf0, 0x40, 0xb3, 0x30, 0x45, 0xed, 0x98, 0xde, 0x5e, 0x3a, 0x4f, 0x6e, 0xd6,
	0x80, 0xf3, 0x1f, 0xb3, 0xaa, 0x77, 0xbd, 0xf5, 0x19, 0x7c, 0x91, 0xdc, 0x8d, 0x33, 0x66, 0x66,
	0x2e, 0xc6, 0xfc, 0x97, 0x17, 0xea, 0x2d, 0x10, 0x2c, 0x3c, 0x30, 0xb4, 0x0e, 0x56, 0x07, 0x16,
	0x7e, 0xa2, 0x9b, 0x43, 0x5b, 0xf5, 0xa1, 0x8c, 0xc9, 0xce, 0x7b, 0xfa, 0x03, 0x4f, 0x5d, 0x67,
	0x5a, 0xf1, 0xc7, 0x39, 0x5a, 0x7c, 0x56, 0x86, 0xc3, 0x52, 0x2a, 0x80, 0xd8, 0x1f, 0x18, 0xde,
	0xfa, 0xed, 0xae, 0xd4, 0x6c, 0xd7, 0xe4, 0xaa, 0xaf, 0x24, 0xb9, 0xb6, 0xc2, 0x53, 0x75, 0x28,
	0xb0, 0xef, 0x65, 0x0b, 0x69, 0x3e, 0x23, 0xfd, 0x90, 0x82, 0x57, 0x1b, 0xd8, 0xc0, 0x0e, 0x9e,
	0x62, 0x69, 0x3f, 0xd7, 0x72, 0x27, 0xf9, 0x4b, 0x49, 0x84, 0x30, 0x7d, 0xd2, 0xd7, 0x19, 0x58,
	0x1f, 0x63, 0x98, 0xbf, 0x19, 0xdd, 0x8b, 0xe1, 0xd2, 0x67, 0xd1, 0x6e, 0xb8, 0x37, 0xda, 0x0d,
	0x37, 0x67, 0x73, 0xe9, 0xf8, 0x4d, 0xc3, 0xa6, 0x78, 0x0b, 0x72, 0xac, 0x0f, 0xd2, 0x73, 0xf4,
	0x01, 0x33, 0xf9, 0x07, 0xbc, 0xfa, 0x53, 0x1a, 0x56, 0x0e, 0x31, 0xe9, 0xce, 0x3f, 0x0b, 0x9e,
	0x4b, 0xfa, 0x27, 0xef, 0xa4, 0x99, 0xa9, 0x3b, 0xa9, 0xf8, 0x65, 0x34, 0xfd, 0x5b, 0xa3, 0xe9,
	0xbf, 0x1c, 0x0b, 0x60, 0xec, 0x5e, 0x61, 0xb2, 0xeb, 0x93, 0xbf, 0x05, 0xcc, 0x9e, 0xa7, 0x23,
	0xdf, 0x09, 0xaa, 0xdf, 0x65, 0xe1, 0xdc, 0xc8, 0x25, 0x2d, 0x77, 0x57, 0x45, 0x1f, 0x41, 0x21,
	0xf8, 0x98, 0x90, 0x60, 0x31, 0x15, 0xaf, 0x9f, 0x8e, 0xa9, 0x04, 0x97, 0x56, 0x21, 0xeb, 0xf6,
	0x15, 0x4a, 0xb8, 0xb6, 0x89, 0x37, 0x92, 0xe1, 0x42, 0x07, 0x1d, 0xc8, 0xb3, 0xdd, 0x05, 0x25,
	0x5d, 0x68, 0xc4, 0x9b, 0x09, 0x81, 0xa1, 0x13, 0xdd, 0x2d, 0x23, 0xa3, 0x26, 0x94, 0x7c, 0x4b,
	0x10, 0xab, 0x89, 0xa1, 0xa1, 0x2b, 0x0b, 0xb8, 0x08, 0xc9, 0xa2, 0xb9, 0xe8, 0x57, 0xbc, 0x3d,
	0x0f, 0x3a, 0xf0, 0x59, 0x7d, 0x96, 0x01, 0x71, 0xc2, 0x9b, 0xf5, 0x1b, 0xe4, 0x11, 0x2c, 0x78,
	0x4c, 0x81, 0x92, 0xf3, 0xc7, 0xc8, 0xe5, 0x67, 0x41, 0xc3, 0xcb, 0x3b, 0x90, 0xa3, 0xe3, 0x06,
	0xcd, 0x3d, 0x99, 0xc4, 0xed, 0x79, 0x2d, 0x42, 0xaf, 0x9f, 0x01, 0x30, 0x16, 0xa2, 0x5f, 0xe9,
	0xe2, 0x71, 0x27, 0xa2, 0x27, 0xf1, 0xed, 0xf9, 0x6d, 0x42, 0xf7, 0xfb, 0x90, 0x75, 0xdf, 0x3e,
	0x3a, 0x65, 0x1c, 0x88, 0x57, 0x67, 0xeb, 0x83, 0x03, 0xef, 0x6e, 0xc1, 0xc5, 0x9e, 0x61, 0x1e,
	0x69, 0x86, 0x67, 0xa0, 0x0d, 0xf4, 0x4a, 0xcf, 0x1a, 0x74, 0x98, 0xe5, 0x5d, 0x3e, 0x16, 0x59,
	0x6d, 0xa0, 0x1f, 0x9c, 0xf9, 0x30, 0x47, 0x91, 0x47, 0x79, 0xfa, 0xbf, 0x01, 0x9b, 0x7f, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x43, 0xec, 0xf8, 0xfc, 0x6a, 0x18, 0x00, 0x00,
}
