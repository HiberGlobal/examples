// Code generated by protoc-gen-go.
// source: modem.proto
// DO NOT EDIT!

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ListModemsRequest_Sort int32

const (
	ListModemsRequest_LAST_MESSAGE_RECEIVED          ListModemsRequest_Sort = 0
	ListModemsRequest_LAST_MESSAGE_RECEIVED_INVERTED ListModemsRequest_Sort = 1
	ListModemsRequest_MODEM_NUMBER_ASC               ListModemsRequest_Sort = 2
	ListModemsRequest_MODEM_NUMBER_DESC              ListModemsRequest_Sort = 3
)

var ListModemsRequest_Sort_name = map[int32]string{
	0: "LAST_MESSAGE_RECEIVED",
	1: "LAST_MESSAGE_RECEIVED_INVERTED",
	2: "MODEM_NUMBER_ASC",
	3: "MODEM_NUMBER_DESC",
}
var ListModemsRequest_Sort_value = map[string]int32{
	"LAST_MESSAGE_RECEIVED":          0,
	"LAST_MESSAGE_RECEIVED_INVERTED": 1,
	"MODEM_NUMBER_ASC":               2,
	"MODEM_NUMBER_DESC":              3,
}

func (x ListModemsRequest_Sort) String() string {
	return proto.EnumName(ListModemsRequest_Sort_name, int32(x))
}
func (ListModemsRequest_Sort) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{4, 0} }

// Modem data, including location and last message (if available).
// Location, last message and firmware version can be updated by messages, the rest is typically either set
// when the modem is registered into the system or when a subscription is authorized.
type Modem struct {
	// An 8-character hexadecimal string
	Number                string                    `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
	Account               string                    `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Name                  string                    `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Location              *Location                 `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	LastMessageReceivedAt *Timestamp                `protobuf:"bytes,5,opt,name=last_message_received_at,json=lastMessageReceivedAt" json:"last_message_received_at,omitempty"`
	ActiveSubscription    *Modem_ActiveSubscription `protobuf:"bytes,6,opt,name=active_subscription,json=activeSubscription" json:"active_subscription,omitempty"`
	Technical             *Modem_TechnicalData      `protobuf:"bytes,7,opt,name=technical" json:"technical,omitempty"`
	GuardPeriod           int32                     `protobuf:"varint,8,opt,name=guard_period,json=guardPeriod" json:"guard_period,omitempty"`
	Health                Health                    `protobuf:"varint,9,opt,name=health,enum=hiber.Health" json:"health,omitempty"`
	Tags                  []*Tag                    `protobuf:"bytes,10,rep,name=tags" json:"tags,omitempty"`
}

func (m *Modem) Reset()                    { *m = Modem{} }
func (m *Modem) String() string            { return proto.CompactTextString(m) }
func (*Modem) ProtoMessage()               {}
func (*Modem) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *Modem) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Modem) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Modem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Modem) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Modem) GetLastMessageReceivedAt() *Timestamp {
	if m != nil {
		return m.LastMessageReceivedAt
	}
	return nil
}

func (m *Modem) GetActiveSubscription() *Modem_ActiveSubscription {
	if m != nil {
		return m.ActiveSubscription
	}
	return nil
}

func (m *Modem) GetTechnical() *Modem_TechnicalData {
	if m != nil {
		return m.Technical
	}
	return nil
}

func (m *Modem) GetGuardPeriod() int32 {
	if m != nil {
		return m.GuardPeriod
	}
	return 0
}

func (m *Modem) GetHealth() Health {
	if m != nil {
		return m.Health
	}
	return Health_OK
}

func (m *Modem) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Modem_TechnicalData struct {
	ChipId                  int64  `protobuf:"varint,1,opt,name=chip_id,json=chipId" json:"chip_id,omitempty"`
	HardwareName            string `protobuf:"bytes,2,opt,name=hardware_name,json=hardwareName" json:"hardware_name,omitempty"`
	FirmwareVersionName     string `protobuf:"bytes,3,opt,name=firmware_version_name,json=firmwareVersionName" json:"firmware_version_name,omitempty"`
	MessageFormatVersion    int32  `protobuf:"varint,4,opt,name=message_format_version,json=messageFormatVersion" json:"message_format_version,omitempty"`
	PayloadTemplate         string `protobuf:"bytes,5,opt,name=payload_template,json=payloadTemplate" json:"payload_template,omitempty"`
	HardwareProductionBatch string `protobuf:"bytes,6,opt,name=hardware_production_batch,json=hardwareProductionBatch" json:"hardware_production_batch,omitempty"`
}

func (m *Modem_TechnicalData) Reset()                    { *m = Modem_TechnicalData{} }
func (m *Modem_TechnicalData) String() string            { return proto.CompactTextString(m) }
func (*Modem_TechnicalData) ProtoMessage()               {}
func (*Modem_TechnicalData) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 0} }

func (m *Modem_TechnicalData) GetChipId() int64 {
	if m != nil {
		return m.ChipId
	}
	return 0
}

func (m *Modem_TechnicalData) GetHardwareName() string {
	if m != nil {
		return m.HardwareName
	}
	return ""
}

func (m *Modem_TechnicalData) GetFirmwareVersionName() string {
	if m != nil {
		return m.FirmwareVersionName
	}
	return ""
}

func (m *Modem_TechnicalData) GetMessageFormatVersion() int32 {
	if m != nil {
		return m.MessageFormatVersion
	}
	return 0
}

func (m *Modem_TechnicalData) GetPayloadTemplate() string {
	if m != nil {
		return m.PayloadTemplate
	}
	return ""
}

func (m *Modem_TechnicalData) GetHardwareProductionBatch() string {
	if m != nil {
		return m.HardwareProductionBatch
	}
	return ""
}

type Modem_ActiveSubscription struct {
	LicenseKey string      `protobuf:"bytes,2,opt,name=license_key,json=licenseKey" json:"license_key,omitempty"`
	Type       ServiceType `protobuf:"varint,3,opt,name=type,enum=hiber.account.subscription.ServiceType" json:"type,omitempty"`
	StartDate  *Timestamp  `protobuf:"bytes,4,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	EndDate    *Timestamp  `protobuf:"bytes,5,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
}

func (m *Modem_ActiveSubscription) Reset()                    { *m = Modem_ActiveSubscription{} }
func (m *Modem_ActiveSubscription) String() string            { return proto.CompactTextString(m) }
func (*Modem_ActiveSubscription) ProtoMessage()               {}
func (*Modem_ActiveSubscription) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 1} }

func (m *Modem_ActiveSubscription) GetLicenseKey() string {
	if m != nil {
		return m.LicenseKey
	}
	return ""
}

func (m *Modem_ActiveSubscription) GetType() ServiceType {
	if m != nil {
		return m.Type
	}
	return ServiceType_OncePerDay
}

func (m *Modem_ActiveSubscription) GetStartDate() *Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *Modem_ActiveSubscription) GetEndDate() *Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

// Selection object for modems.
// Filter modems by modem id, (child)account, tags, activation status and time, service type and last message time.
type ModemSelection struct {
	Modems            *Filter_Modems        `protobuf:"bytes,1,opt,name=modems" json:"modems,omitempty"`
	Tags              *TagSelection         `protobuf:"bytes,2,opt,name=tags" json:"tags,omitempty"`
	ChildAccounts     *Filter_ChildAccounts `protobuf:"bytes,3,opt,name=child_accounts,json=childAccounts" json:"child_accounts,omitempty"`
	OnlyActive        bool                  `protobuf:"varint,4,opt,name=only_active,json=onlyActive" json:"only_active,omitempty"`
	ActivatedIn       *TimeRange            `protobuf:"bytes,5,opt,name=activated_in,json=activatedIn" json:"activated_in,omitempty"`
	WithServiceType   []ServiceType         `protobuf:"varint,6,rep,packed,name=with_service_type,json=withServiceType,enum=hiber.account.subscription.ServiceType" json:"with_service_type,omitempty"`
	WithLastMessageIn *TimeRange            `protobuf:"bytes,7,opt,name=with_last_message_in,json=withLastMessageIn" json:"with_last_message_in,omitempty"`
	FreeTextSearch    string                `protobuf:"bytes,8,opt,name=freeTextSearch" json:"freeTextSearch,omitempty"`
	Health            []Health              `protobuf:"varint,9,rep,packed,name=health,enum=hiber.Health" json:"health,omitempty"`
}

func (m *ModemSelection) Reset()                    { *m = ModemSelection{} }
func (m *ModemSelection) String() string            { return proto.CompactTextString(m) }
func (*ModemSelection) ProtoMessage()               {}
func (*ModemSelection) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *ModemSelection) GetModems() *Filter_Modems {
	if m != nil {
		return m.Modems
	}
	return nil
}

func (m *ModemSelection) GetTags() *TagSelection {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ModemSelection) GetChildAccounts() *Filter_ChildAccounts {
	if m != nil {
		return m.ChildAccounts
	}
	return nil
}

func (m *ModemSelection) GetOnlyActive() bool {
	if m != nil {
		return m.OnlyActive
	}
	return false
}

func (m *ModemSelection) GetActivatedIn() *TimeRange {
	if m != nil {
		return m.ActivatedIn
	}
	return nil
}

func (m *ModemSelection) GetWithServiceType() []ServiceType {
	if m != nil {
		return m.WithServiceType
	}
	return nil
}

func (m *ModemSelection) GetWithLastMessageIn() *TimeRange {
	if m != nil {
		return m.WithLastMessageIn
	}
	return nil
}

func (m *ModemSelection) GetFreeTextSearch() string {
	if m != nil {
		return m.FreeTextSearch
	}
	return ""
}

func (m *ModemSelection) GetHealth() []Health {
	if m != nil {
		return m.Health
	}
	return nil
}

// Decrypted modem message. Messages are received encrypted and decrypted asynchronously, which adds the location
// data and message body. (Your message body is, of course, still encrypted if you've encrypted it yourself)
type ModemMessage struct {
	ModemNumber string     `protobuf:"bytes,1,opt,name=modem_number,json=modemNumber" json:"modem_number,omitempty"`
	Version     uint32     `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	Time        *Timestamp `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
	Location    *Location  `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	Body        []byte     `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *ModemMessage) Reset()                    { *m = ModemMessage{} }
func (m *ModemMessage) String() string            { return proto.CompactTextString(m) }
func (*ModemMessage) ProtoMessage()               {}
func (*ModemMessage) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *ModemMessage) GetModemNumber() string {
	if m != nil {
		return m.ModemNumber
	}
	return ""
}

func (m *ModemMessage) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ModemMessage) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ModemMessage) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *ModemMessage) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// Selection object for modem messages.
// Filter messages by modem id, (child)account, and time sent (note that this is not the time the message was received)
type ModemMessageSelection struct {
	Modems        *Filter_Modems        `protobuf:"bytes,1,opt,name=modems" json:"modems,omitempty"`
	ChildAccounts *Filter_ChildAccounts `protobuf:"bytes,2,opt,name=child_accounts,json=childAccounts" json:"child_accounts,omitempty"`
	TimeRange     *TimeRange            `protobuf:"bytes,3,opt,name=time_range,json=timeRange" json:"time_range,omitempty"`
}

func (m *ModemMessageSelection) Reset()                    { *m = ModemMessageSelection{} }
func (m *ModemMessageSelection) String() string            { return proto.CompactTextString(m) }
func (*ModemMessageSelection) ProtoMessage()               {}
func (*ModemMessageSelection) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *ModemMessageSelection) GetModems() *Filter_Modems {
	if m != nil {
		return m.Modems
	}
	return nil
}

func (m *ModemMessageSelection) GetChildAccounts() *Filter_ChildAccounts {
	if m != nil {
		return m.ChildAccounts
	}
	return nil
}

func (m *ModemMessageSelection) GetTimeRange() *TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

type ListModemsRequest struct {
	Account    string                 `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Selection  *ModemSelection        `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination *Pagination            `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
	SortBy     ListModemsRequest_Sort `protobuf:"varint,4,opt,name=sort_by,json=sortBy,enum=hiber.modem.ListModemsRequest_Sort" json:"sort_by,omitempty"`
}

func (m *ListModemsRequest) Reset()                    { *m = ListModemsRequest{} }
func (m *ListModemsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListModemsRequest) ProtoMessage()               {}
func (*ListModemsRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *ListModemsRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ListModemsRequest) GetSelection() *ModemSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListModemsRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListModemsRequest) GetSortBy() ListModemsRequest_Sort {
	if m != nil {
		return m.SortBy
	}
	return ListModemsRequest_LAST_MESSAGE_RECEIVED
}

type ListModemsRequest_Response struct {
	Modems     []*Modem           `protobuf:"bytes,1,rep,name=modems" json:"modems,omitempty"`
	Request    *ListModemsRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListModemsRequest_Response) Reset()                    { *m = ListModemsRequest_Response{} }
func (m *ListModemsRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*ListModemsRequest_Response) ProtoMessage()               {}
func (*ListModemsRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4, 0} }

func (m *ListModemsRequest_Response) GetModems() []*Modem {
	if m != nil {
		return m.Modems
	}
	return nil
}

func (m *ListModemsRequest_Response) GetRequest() *ListModemsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListModemsRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type GetModemRequest struct {
	Account     string        `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	ModemNumber string        `protobuf:"bytes,2,opt,name=modem_number,json=modemNumber" json:"modem_number,omitempty"`
	Tags        *TagSelection `protobuf:"bytes,3,opt,name=tags" json:"tags,omitempty"`
}

func (m *GetModemRequest) Reset()                    { *m = GetModemRequest{} }
func (m *GetModemRequest) String() string            { return proto.CompactTextString(m) }
func (*GetModemRequest) ProtoMessage()               {}
func (*GetModemRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *GetModemRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *GetModemRequest) GetModemNumber() string {
	if m != nil {
		return m.ModemNumber
	}
	return ""
}

func (m *GetModemRequest) GetTags() *TagSelection {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ListModemMessagesRequest struct {
	Account    string                 `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Selection  *ModemMessageSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination *Pagination            `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListModemMessagesRequest) Reset()                    { *m = ListModemMessagesRequest{} }
func (m *ListModemMessagesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListModemMessagesRequest) ProtoMessage()               {}
func (*ListModemMessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *ListModemMessagesRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ListModemMessagesRequest) GetSelection() *ModemMessageSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListModemMessagesRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListModemMessagesRequest_Response struct {
	Messages   []*ModemMessage           `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	Request    *ListModemMessagesRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result        `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListModemMessagesRequest_Response) Reset()         { *m = ListModemMessagesRequest_Response{} }
func (m *ListModemMessagesRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListModemMessagesRequest_Response) ProtoMessage()    {}
func (*ListModemMessagesRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{6, 0}
}

func (m *ListModemMessagesRequest_Response) GetMessages() []*ModemMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ListModemMessagesRequest_Response) GetRequest() *ListModemMessagesRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListModemMessagesRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type MessageCountRequest struct {
	Account   string                 `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Selection *ModemMessageSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
}

func (m *MessageCountRequest) Reset()                    { *m = MessageCountRequest{} }
func (m *MessageCountRequest) String() string            { return proto.CompactTextString(m) }
func (*MessageCountRequest) ProtoMessage()               {}
func (*MessageCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

func (m *MessageCountRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *MessageCountRequest) GetSelection() *ModemMessageSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

type MessageCountRequest_Response struct {
	MessageCountPerDay map[string]int32     `protobuf:"bytes,1,rep,name=message_count_per_day,json=messageCountPerDay" json:"message_count_per_day,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Request            *MessageCountRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *MessageCountRequest_Response) Reset()                    { *m = MessageCountRequest_Response{} }
func (m *MessageCountRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*MessageCountRequest_Response) ProtoMessage()               {}
func (*MessageCountRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7, 0} }

func (m *MessageCountRequest_Response) GetMessageCountPerDay() map[string]int32 {
	if m != nil {
		return m.MessageCountPerDay
	}
	return nil
}

func (m *MessageCountRequest_Response) GetRequest() *MessageCountRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type RenameModemRequest struct {
	Account     string        `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	ModemNumber string        `protobuf:"bytes,2,opt,name=modem_number,json=modemNumber" json:"modem_number,omitempty"`
	Name        string        `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Tags        *TagSelection `protobuf:"bytes,4,opt,name=tags" json:"tags,omitempty"`
}

func (m *RenameModemRequest) Reset()                    { *m = RenameModemRequest{} }
func (m *RenameModemRequest) String() string            { return proto.CompactTextString(m) }
func (*RenameModemRequest) ProtoMessage()               {}
func (*RenameModemRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *RenameModemRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *RenameModemRequest) GetModemNumber() string {
	if m != nil {
		return m.ModemNumber
	}
	return ""
}

func (m *RenameModemRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RenameModemRequest) GetTags() *TagSelection {
	if m != nil {
		return m.Tags
	}
	return nil
}

type UpdateModemPayloadTemplateRequest struct {
	Account         string        `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	ModemNumber     string        `protobuf:"bytes,2,opt,name=modem_number,json=modemNumber" json:"modem_number,omitempty"`
	PayloadTemplate string        `protobuf:"bytes,3,opt,name=payload_template,json=payloadTemplate" json:"payload_template,omitempty"`
	Tags            *TagSelection `protobuf:"bytes,4,opt,name=tags" json:"tags,omitempty"`
}

func (m *UpdateModemPayloadTemplateRequest) Reset()         { *m = UpdateModemPayloadTemplateRequest{} }
func (m *UpdateModemPayloadTemplateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateModemPayloadTemplateRequest) ProtoMessage()    {}
func (*UpdateModemPayloadTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{9}
}

func (m *UpdateModemPayloadTemplateRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *UpdateModemPayloadTemplateRequest) GetModemNumber() string {
	if m != nil {
		return m.ModemNumber
	}
	return ""
}

func (m *UpdateModemPayloadTemplateRequest) GetPayloadTemplate() string {
	if m != nil {
		return m.PayloadTemplate
	}
	return ""
}

func (m *UpdateModemPayloadTemplateRequest) GetTags() *TagSelection {
	if m != nil {
		return m.Tags
	}
	return nil
}

type UpdateModemTagsRequest struct {
	Account      string             `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	ModemNumbers []string           `protobuf:"bytes,2,rep,name=modem_numbers,json=modemNumbers" json:"modem_numbers,omitempty"`
	Update       *UpdateTagsForItem `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
	Tags         *TagSelection      `protobuf:"bytes,4,opt,name=tags" json:"tags,omitempty"`
}

func (m *UpdateModemTagsRequest) Reset()                    { *m = UpdateModemTagsRequest{} }
func (m *UpdateModemTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateModemTagsRequest) ProtoMessage()               {}
func (*UpdateModemTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{10} }

func (m *UpdateModemTagsRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *UpdateModemTagsRequest) GetModemNumbers() []string {
	if m != nil {
		return m.ModemNumbers
	}
	return nil
}

func (m *UpdateModemTagsRequest) GetUpdate() *UpdateTagsForItem {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateModemTagsRequest) GetTags() *TagSelection {
	if m != nil {
		return m.Tags
	}
	return nil
}

type UpdateModemTagsRequest_Response struct {
	Modems []*Modem `protobuf:"bytes,1,rep,name=modems" json:"modems,omitempty"`
}

func (m *UpdateModemTagsRequest_Response) Reset()         { *m = UpdateModemTagsRequest_Response{} }
func (m *UpdateModemTagsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*UpdateModemTagsRequest_Response) ProtoMessage()    {}
func (*UpdateModemTagsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{10, 0}
}

func (m *UpdateModemTagsRequest_Response) GetModems() []*Modem {
	if m != nil {
		return m.Modems
	}
	return nil
}

func init() {
	proto.RegisterType((*Modem)(nil), "hiber.modem.Modem")
	proto.RegisterType((*Modem_TechnicalData)(nil), "hiber.modem.Modem.TechnicalData")
	proto.RegisterType((*Modem_ActiveSubscription)(nil), "hiber.modem.Modem.ActiveSubscription")
	proto.RegisterType((*ModemSelection)(nil), "hiber.modem.ModemSelection")
	proto.RegisterType((*ModemMessage)(nil), "hiber.modem.ModemMessage")
	proto.RegisterType((*ModemMessageSelection)(nil), "hiber.modem.ModemMessageSelection")
	proto.RegisterType((*ListModemsRequest)(nil), "hiber.modem.ListModemsRequest")
	proto.RegisterType((*ListModemsRequest_Response)(nil), "hiber.modem.ListModemsRequest.Response")
	proto.RegisterType((*GetModemRequest)(nil), "hiber.modem.GetModemRequest")
	proto.RegisterType((*ListModemMessagesRequest)(nil), "hiber.modem.ListModemMessagesRequest")
	proto.RegisterType((*ListModemMessagesRequest_Response)(nil), "hiber.modem.ListModemMessagesRequest.Response")
	proto.RegisterType((*MessageCountRequest)(nil), "hiber.modem.MessageCountRequest")
	proto.RegisterType((*MessageCountRequest_Response)(nil), "hiber.modem.MessageCountRequest.Response")
	proto.RegisterType((*RenameModemRequest)(nil), "hiber.modem.RenameModemRequest")
	proto.RegisterType((*UpdateModemPayloadTemplateRequest)(nil), "hiber.modem.UpdateModemPayloadTemplateRequest")
	proto.RegisterType((*UpdateModemTagsRequest)(nil), "hiber.modem.UpdateModemTagsRequest")
	proto.RegisterType((*UpdateModemTagsRequest_Response)(nil), "hiber.modem.UpdateModemTagsRequest.Response")
	proto.RegisterEnum("hiber.modem.ListModemsRequest_Sort", ListModemsRequest_Sort_name, ListModemsRequest_Sort_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ModemService service

type ModemServiceClient interface {
	List(ctx context.Context, in *ListModemsRequest, opts ...grpc.CallOption) (*ListModemsRequest_Response, error)
	Get(ctx context.Context, in *GetModemRequest, opts ...grpc.CallOption) (*Modem, error)
	Messages(ctx context.Context, in *ListModemMessagesRequest, opts ...grpc.CallOption) (*ListModemMessagesRequest_Response, error)
	MessageCount(ctx context.Context, in *MessageCountRequest, opts ...grpc.CallOption) (*MessageCountRequest_Response, error)
	Rename(ctx context.Context, in *RenameModemRequest, opts ...grpc.CallOption) (*Modem, error)
	UpdatePayloadTemplate(ctx context.Context, in *UpdateModemPayloadTemplateRequest, opts ...grpc.CallOption) (*Modem, error)
	UpdateTags(ctx context.Context, in *UpdateModemTagsRequest, opts ...grpc.CallOption) (*UpdateModemTagsRequest_Response, error)
}

type modemServiceClient struct {
	cc *grpc.ClientConn
}

func NewModemServiceClient(cc *grpc.ClientConn) ModemServiceClient {
	return &modemServiceClient{cc}
}

func (c *modemServiceClient) List(ctx context.Context, in *ListModemsRequest, opts ...grpc.CallOption) (*ListModemsRequest_Response, error) {
	out := new(ListModemsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemServiceClient) Get(ctx context.Context, in *GetModemRequest, opts ...grpc.CallOption) (*Modem, error) {
	out := new(Modem)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemServiceClient) Messages(ctx context.Context, in *ListModemMessagesRequest, opts ...grpc.CallOption) (*ListModemMessagesRequest_Response, error) {
	out := new(ListModemMessagesRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemService/Messages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemServiceClient) MessageCount(ctx context.Context, in *MessageCountRequest, opts ...grpc.CallOption) (*MessageCountRequest_Response, error) {
	out := new(MessageCountRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemService/MessageCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemServiceClient) Rename(ctx context.Context, in *RenameModemRequest, opts ...grpc.CallOption) (*Modem, error) {
	out := new(Modem)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemService/Rename", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemServiceClient) UpdatePayloadTemplate(ctx context.Context, in *UpdateModemPayloadTemplateRequest, opts ...grpc.CallOption) (*Modem, error) {
	out := new(Modem)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemService/UpdatePayloadTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemServiceClient) UpdateTags(ctx context.Context, in *UpdateModemTagsRequest, opts ...grpc.CallOption) (*UpdateModemTagsRequest_Response, error) {
	out := new(UpdateModemTagsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemService/UpdateTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ModemService service

type ModemServiceServer interface {
	List(context.Context, *ListModemsRequest) (*ListModemsRequest_Response, error)
	Get(context.Context, *GetModemRequest) (*Modem, error)
	Messages(context.Context, *ListModemMessagesRequest) (*ListModemMessagesRequest_Response, error)
	MessageCount(context.Context, *MessageCountRequest) (*MessageCountRequest_Response, error)
	Rename(context.Context, *RenameModemRequest) (*Modem, error)
	UpdatePayloadTemplate(context.Context, *UpdateModemPayloadTemplateRequest) (*Modem, error)
	UpdateTags(context.Context, *UpdateModemTagsRequest) (*UpdateModemTagsRequest_Response, error)
}

func RegisterModemServiceServer(s *grpc.Server, srv ModemServiceServer) {
	s.RegisterService(&_ModemService_serviceDesc, srv)
}

func _ModemService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemServiceServer).List(ctx, req.(*ListModemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemServiceServer).Get(ctx, req.(*GetModemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemService_Messages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModemMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemServiceServer).Messages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemService/Messages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemServiceServer).Messages(ctx, req.(*ListModemMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemService_MessageCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemServiceServer).MessageCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemService/MessageCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemServiceServer).MessageCount(ctx, req.(*MessageCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemService_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameModemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemServiceServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemService/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemServiceServer).Rename(ctx, req.(*RenameModemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemService_UpdatePayloadTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModemPayloadTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemServiceServer).UpdatePayloadTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemService/UpdatePayloadTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemServiceServer).UpdatePayloadTemplate(ctx, req.(*UpdateModemPayloadTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemService_UpdateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModemTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemServiceServer).UpdateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemService/UpdateTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemServiceServer).UpdateTags(ctx, req.(*UpdateModemTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.modem.ModemService",
	HandlerType: (*ModemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ModemService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ModemService_Get_Handler,
		},
		{
			MethodName: "Messages",
			Handler:    _ModemService_Messages_Handler,
		},
		{
			MethodName: "MessageCount",
			Handler:    _ModemService_MessageCount_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _ModemService_Rename_Handler,
		},
		{
			MethodName: "UpdatePayloadTemplate",
			Handler:    _ModemService_UpdatePayloadTemplate_Handler,
		},
		{
			MethodName: "UpdateTags",
			Handler:    _ModemService_UpdateTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modem.proto",
}

func init() { proto.RegisterFile("modem.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 1496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x58, 0xcb, 0x72, 0x1b, 0x45,
	0x17, 0xce, 0x48, 0xb2, 0x2c, 0x1d, 0xf9, 0x22, 0x9f, 0xd8, 0xb1, 0xa2, 0xa4, 0x12, 0x45, 0xfe,
	0xf3, 0xc7, 0xf9, 0x93, 0x52, 0x7e, 0x94, 0x00, 0x21, 0x5c, 0x65, 0x5b, 0x09, 0x2e, 0x6c, 0xc7,
	0xd5, 0x52, 0xbc, 0x20, 0x8b, 0xa9, 0xd6, 0x4c, 0x47, 0x9a, 0x62, 0x34, 0x33, 0xcc, 0xb4, 0x1c,
	0x54, 0x2c, 0x79, 0x03, 0x1e, 0x80, 0x07, 0x60, 0xc9, 0x8a, 0xa2, 0xa8, 0xe2, 0x15, 0xd8, 0xf0,
	0x0e, 0x2c, 0x58, 0xb1, 0xa1, 0x8a, 0x15, 0xd5, 0x3d, 0x3d, 0xf2, 0x8c, 0x24, 0x63, 0x39, 0xa4,
	0xd8, 0x4d, 0x9f, 0x5b, 0x9f, 0x73, 0xbe, 0x73, 0x69, 0x09, 0x0a, 0x7d, 0xd7, 0x64, 0xfd, 0x9a,
	0xe7, 0xbb, 0xdc, 0xc5, 0x42, 0xcf, 0xea, 0x30, 0xbf, 0x26, 0x49, 0x65, 0xe8, 0xd0, 0x80, 0x85,
	0x8c, 0x72, 0x9e, 0xd3, 0xae, 0xfa, 0xc4, 0x60, 0xd0, 0x09, 0x0c, 0xdf, 0xf2, 0xb8, 0xe5, 0x3a,
	0x21, 0xad, 0xfa, 0xd3, 0x3c, 0xcc, 0xed, 0x0b, 0x25, 0xbc, 0x04, 0x59, 0x67, 0xd0, 0xef, 0x30,
	0xbf, 0xa4, 0x55, 0xb4, 0xcd, 0x3c, 0x51, 0x27, 0x2c, 0xc1, 0x3c, 0x35, 0x0c, 0x77, 0xe0, 0xf0,
	0x52, 0x4a, 0x32, 0xa2, 0x23, 0x22, 0x64, 0x1c, 0xda, 0x67, 0xa5, 0xb4, 0x24, 0xcb, 0x6f, 0xbc,
	0x03, 0x39, 0xdb, 0x35, 0xa8, 0xb8, 0xa1, 0x94, 0xa9, 0x68, 0x9b, 0x85, 0xfa, 0x72, 0x2d, 0x74,
	0x6d, 0x4f, 0x91, 0xc9, 0x48, 0x00, 0x77, 0xa1, 0x64, 0xd3, 0x80, 0xeb, 0x7d, 0x16, 0x04, 0xb4,
	0xcb, 0x74, 0x9f, 0x19, 0xcc, 0x3a, 0x66, 0xa6, 0x4e, 0x79, 0x69, 0x4e, 0x2a, 0x17, 0x95, 0x72,
	0xdb, 0xea, 0xb3, 0x80, 0xd3, 0xbe, 0x47, 0xd6, 0x84, 0xc6, 0x7e, 0xa8, 0x40, 0x94, 0x7c, 0x83,
	0xe3, 0x11, 0x5c, 0xa4, 0x06, 0xb7, 0x8e, 0x99, 0x1e, 0x0f, 0xb2, 0x94, 0x95, 0x56, 0x6e, 0xd6,
	0x62, 0xd9, 0xa9, 0xc9, 0x70, 0x6b, 0x0d, 0x29, 0xdd, 0x8a, 0x09, 0x13, 0xa4, 0x13, 0x34, 0xfc,
	0x00, 0xf2, 0x9c, 0x19, 0x3d, 0xc7, 0x32, 0xa8, 0x5d, 0x9a, 0x97, 0xd6, 0x2a, 0x53, 0xac, 0xb5,
	0x23, 0x99, 0x1d, 0xca, 0x29, 0x39, 0x51, 0xc1, 0x1b, 0xb0, 0xd0, 0x1d, 0x50, 0xdf, 0xd4, 0x3d,
	0xe6, 0x5b, 0xae, 0x59, 0xca, 0x55, 0xb4, 0xcd, 0x39, 0x52, 0x90, 0xb4, 0x43, 0x49, 0xc2, 0x9b,
	0x90, 0xed, 0x31, 0x6a, 0xf3, 0x5e, 0x29, 0x5f, 0xd1, 0x36, 0x97, 0xea, 0x8b, 0xca, 0xfe, 0xc7,
	0x92, 0x48, 0x14, 0x13, 0xab, 0x90, 0xe1, 0xb4, 0x1b, 0x94, 0xa0, 0x92, 0xde, 0x2c, 0xd4, 0x97,
	0x94, 0x90, 0x40, 0xb7, 0x4d, 0xbb, 0x44, 0xf2, 0xca, 0xdf, 0xa4, 0x60, 0x31, 0xe1, 0x0a, 0xae,
	0xc3, 0xbc, 0xd1, 0xb3, 0x3c, 0xdd, 0x32, 0x25, 0xac, 0x69, 0x92, 0x15, 0xc7, 0x5d, 0x13, 0x37,
	0x60, 0xb1, 0x47, 0x7d, 0xf3, 0x25, 0xf5, 0x99, 0x2e, 0x51, 0x0c, 0xc1, 0x5d, 0x88, 0x88, 0x07,
	0x02, 0xcd, 0x3a, 0xac, 0xbd, 0xb0, 0xfc, 0xbe, 0x14, 0x3a, 0x66, 0x7e, 0x60, 0xb9, 0x8e, 0x1e,
	0x83, 0xfc, 0x62, 0xc4, 0x3c, 0x0a, 0x79, 0x52, 0xe7, 0x01, 0x5c, 0x8a, 0xf0, 0x7c, 0xe1, 0xfa,
	0x7d, 0xca, 0x23, 0x4d, 0x59, 0x0f, 0x73, 0x64, 0x55, 0x71, 0x1f, 0x4b, 0xa6, 0xd2, 0xc4, 0xdb,
	0x50, 0xf4, 0xe8, 0xd0, 0x76, 0xa9, 0xa9, 0x73, 0xd6, 0xf7, 0x6c, 0xca, 0x99, 0x2c, 0x81, 0x3c,
	0x59, 0x56, 0xf4, 0xb6, 0x22, 0xe3, 0x23, 0xb8, 0x3c, 0xf2, 0xdc, 0xf3, 0x5d, 0x73, 0x60, 0x08,
	0xa4, 0xf4, 0x0e, 0xe5, 0x46, 0x4f, 0x02, 0x9e, 0x27, 0xeb, 0x91, 0xc0, 0xe1, 0x88, 0xbf, 0x25,
	0xd8, 0xe5, 0x9f, 0x35, 0xc0, 0x49, 0xe4, 0xf1, 0x3a, 0x14, 0x6c, 0xcb, 0x60, 0x4e, 0xc0, 0xf4,
	0xcf, 0xd8, 0x50, 0xa5, 0x02, 0x14, 0xe9, 0x13, 0x36, 0xc4, 0x77, 0x21, 0xc3, 0x87, 0x5e, 0x18,
	0xf7, 0x52, 0xfd, 0x96, 0x4a, 0xbe, 0x6a, 0x84, 0x5a, 0xa2, 0xaf, 0x5a, 0xcc, 0x3f, 0xb6, 0x0c,
	0xd6, 0x1e, 0x7a, 0x8c, 0x48, 0x25, 0xbc, 0x07, 0x10, 0x70, 0xea, 0x73, 0xdd, 0x14, 0x51, 0x65,
	0x4e, 0x29, 0xec, 0xbc, 0x94, 0xd9, 0x11, 0x11, 0xde, 0x81, 0x1c, 0x73, 0xcc, 0x50, 0xfc, 0xb4,
	0x3e, 0x98, 0x67, 0x8e, 0x29, 0x84, 0xab, 0xbf, 0xa5, 0x61, 0x49, 0x16, 0x61, 0x8b, 0xd9, 0x4c,
	0x86, 0x8a, 0x77, 0x21, 0x2b, 0x8b, 0x33, 0x90, 0x98, 0x17, 0xea, 0xab, 0x4a, 0xfb, 0xb1, 0x65,
	0x73, 0xe6, 0x87, 0x25, 0x1b, 0x10, 0x25, 0x83, 0x77, 0x54, 0x61, 0xa5, 0xa4, 0xec, 0x7a, 0xb2,
	0xb0, 0x46, 0x46, 0xc3, 0x0a, 0xc3, 0x2d, 0x58, 0x32, 0x7a, 0x96, 0x6d, 0xea, 0x2a, 0xf6, 0x40,
	0xa6, 0xa4, 0x50, 0xbf, 0x92, 0xbc, 0x62, 0x5b, 0xc8, 0x34, 0x94, 0x08, 0x59, 0x34, 0xe2, 0x47,
	0x91, 0x6d, 0xd7, 0xb1, 0x87, 0x7a, 0xd8, 0x6e, 0x32, 0x21, 0x39, 0x02, 0x82, 0x14, 0x42, 0x83,
	0xf7, 0x61, 0x41, 0xf2, 0x28, 0x67, 0xa6, 0x6e, 0x39, 0x53, 0x72, 0x40, 0xa8, 0xd3, 0x65, 0xa4,
	0x30, 0x92, 0xda, 0x75, 0xb0, 0x05, 0x2b, 0x2f, 0x2d, 0xde, 0xd3, 0x83, 0x30, 0xff, 0xba, 0xc4,
	0x2b, 0x5b, 0x49, 0x9f, 0x07, 0xaf, 0x65, 0x61, 0x21, 0x46, 0xc0, 0x06, 0xac, 0x4a, 0xa3, 0x89,
	0x31, 0x65, 0x39, 0x6a, 0x12, 0x4c, 0x7a, 0x24, 0x5d, 0xd8, 0x3b, 0x99, 0x50, 0xbb, 0x0e, 0xfe,
	0x17, 0x96, 0x5e, 0xf8, 0x8c, 0xb5, 0xd9, 0x17, 0xbc, 0xc5, 0xa8, 0x6f, 0xf4, 0xe4, 0x0c, 0xc8,
	0x93, 0x31, 0x6a, 0x62, 0x0c, 0xa4, 0x4f, 0x1d, 0x03, 0xd5, 0xef, 0x34, 0x58, 0x90, 0x00, 0xaa,
	0x1b, 0xc4, 0x84, 0x91, 0x40, 0xea, 0x89, 0xe9, 0x1d, 0x2e, 0x87, 0x83, 0xd1, 0x08, 0x8f, 0x7a,
	0x50, 0x80, 0xbc, 0x48, 0xa2, 0x23, 0xfe, 0x07, 0x32, 0xdc, 0x52, 0xfd, 0x3c, 0xad, 0xca, 0x24,
	0xf7, 0x7c, 0x43, 0x1d, 0x21, 0xd3, 0x71, 0xcd, 0xa1, 0x04, 0x6d, 0x81, 0xc8, 0xef, 0xea, 0x0f,
	0x1a, 0xac, 0xc5, 0x9d, 0x7e, 0xd5, 0x52, 0x9d, 0xac, 0xbe, 0xd4, 0xb9, 0xab, 0xef, 0x1e, 0x80,
	0x08, 0x4a, 0xf7, 0x05, 0x60, 0x53, 0x02, 0x0f, 0x81, 0xcc, 0xf3, 0xe8, 0xb3, 0xfa, 0x67, 0x1a,
	0x56, 0xf6, 0xac, 0x80, 0x2b, 0x5f, 0xd8, 0xe7, 0x03, 0x16, 0xf0, 0xf8, 0x5a, 0xd4, 0x92, 0x6b,
	0xf1, 0x1d, 0xc8, 0x07, 0x51, 0x7c, 0x63, 0xfe, 0xc5, 0x56, 0xc6, 0x49, 0x63, 0x9d, 0x48, 0xe3,
	0x1b, 0x00, 0x1e, 0xed, 0x5a, 0x4e, 0x98, 0xea, 0xd0, 0xb7, 0x15, 0xa5, 0x7b, 0x38, 0x62, 0x90,
	0x98, 0x10, 0xbe, 0x07, 0xf3, 0x81, 0xeb, 0x73, 0xbd, 0x33, 0x94, 0xd0, 0x2c, 0xd5, 0x37, 0x12,
	0x77, 0x4d, 0x38, 0x5e, 0x6b, 0xb9, 0x3e, 0x27, 0x59, 0xa1, 0xb3, 0x35, 0x2c, 0x7f, 0xab, 0x41,
	0x8e, 0xb0, 0xc0, 0x73, 0x9d, 0x80, 0xe1, 0xff, 0x62, 0x58, 0x88, 0x1d, 0x83, 0x93, 0x5e, 0x8f,
	0x90, 0x78, 0x08, 0xf3, 0x7e, 0x68, 0x50, 0x85, 0x78, 0xed, 0xef, 0xaf, 0x25, 0x91, 0x38, 0x3e,
	0x9c, 0x12, 0x63, 0x69, 0x22, 0xc6, 0x1a, 0x61, 0xc1, 0xc0, 0xe6, 0xf1, 0x50, 0xab, 0x3e, 0x64,
	0x84, 0xf3, 0x78, 0x19, 0xd6, 0xf6, 0x1a, 0xad, 0xb6, 0xbe, 0xdf, 0x6c, 0xb5, 0x1a, 0x4f, 0x9a,
	0x3a, 0x69, 0x6e, 0x37, 0x77, 0x8f, 0x9a, 0x3b, 0xc5, 0x0b, 0x58, 0x85, 0x6b, 0x53, 0x59, 0xfa,
	0xee, 0xc1, 0x51, 0x93, 0xb4, 0x9b, 0x3b, 0x45, 0x0d, 0x57, 0xa1, 0xb8, 0xff, 0x74, 0xa7, 0xb9,
	0xaf, 0x1f, 0x3c, 0xdb, 0xdf, 0x6a, 0x12, 0xbd, 0xd1, 0xda, 0x2e, 0xa6, 0x70, 0x0d, 0x56, 0x12,
	0xd4, 0x9d, 0x66, 0x6b, 0xbb, 0x98, 0xae, 0x7e, 0x09, 0xcb, 0x4f, 0x58, 0x18, 0xca, 0xd9, 0xc8,
	0x8f, 0xb7, 0x62, 0x6a, 0xb2, 0x15, 0xa3, 0x61, 0x9b, 0x9e, 0x61, 0xd8, 0x56, 0x7f, 0x4d, 0x41,
	0x69, 0x94, 0x49, 0xd5, 0x3a, 0x33, 0x14, 0xe0, 0x47, 0x93, 0x05, 0x58, 0x9d, 0x84, 0x72, 0xbc,
	0x15, 0xff, 0x59, 0x1d, 0x96, 0x7f, 0x8c, 0x57, 0xd2, 0x9b, 0x90, 0x53, 0xc3, 0x32, 0xaa, 0xa5,
	0xcb, 0xa7, 0x3a, 0x40, 0x46, 0xa2, 0xf8, 0xe1, 0x78, 0x51, 0xdd, 0x9c, 0x5e, 0x54, 0x63, 0xa9,
	0x78, 0x1d, 0xb5, 0xf5, 0x47, 0x0a, 0x2e, 0x2a, 0xb3, 0xdb, 0x22, 0x89, 0xff, 0x42, 0x96, 0xcb,
	0x5f, 0xa5, 0x62, 0x29, 0xe3, 0xb0, 0x16, 0xed, 0x17, 0x69, 0x5f, 0x3c, 0x18, 0x75, 0x93, 0x0e,
	0x55, 0xfe, 0x1a, 0x49, 0xd3, 0x93, 0x9e, 0xd6, 0x22, 0x4b, 0x09, 0xe6, 0x21, 0xf3, 0x77, 0xe8,
	0xb0, 0xe9, 0x70, 0x7f, 0x48, 0xb0, 0x3f, 0xc1, 0xc0, 0x47, 0xe3, 0x19, 0xaf, 0x9c, 0x75, 0xcf,
	0x28, 0xd9, 0xe5, 0x26, 0xac, 0x9f, 0x72, 0x15, 0x16, 0x21, 0x2d, 0xde, 0x51, 0x61, 0xc6, 0xc4,
	0x27, 0xae, 0xc2, 0xdc, 0x31, 0xb5, 0x07, 0xe1, 0x33, 0x73, 0x8e, 0x84, 0x87, 0x47, 0xa9, 0x87,
	0x5a, 0xf5, 0x6b, 0x0d, 0x90, 0x30, 0xf1, 0xaa, 0x7c, 0x7d, 0x5d, 0x36, 0xfd, 0x97, 0x49, 0xd8,
	0x79, 0x99, 0x59, 0x3a, 0xef, 0x7b, 0x0d, 0x6e, 0x3c, 0xf3, 0xc4, 0x03, 0x4c, 0x3a, 0x75, 0x98,
	0x7c, 0x82, 0xbe, 0x16, 0x1f, 0xa7, 0xbd, 0x78, 0xd3, 0xd3, 0x5f, 0xbc, 0xe7, 0x72, 0xfd, 0x77,
	0x0d, 0x2e, 0xc5, 0x5c, 0x6f, 0xd3, 0xee, 0x0c, 0x23, 0x63, 0x03, 0x16, 0xe3, 0xfe, 0x8a, 0xbd,
	0x9a, 0x16, 0xbf, 0x06, 0x62, 0x0e, 0x07, 0xf8, 0x00, 0xb2, 0x03, 0x69, 0x58, 0x75, 0xd6, 0xd5,
	0x98, 0x23, 0xe1, 0x8d, 0xe2, 0xb2, 0xc7, 0xae, 0xbf, 0xcb, 0xc5, 0xa6, 0x08, 0x65, 0xcf, 0xe5,
	0x7c, 0xf9, 0xad, 0x57, 0x5b, 0x47, 0xf5, 0x5f, 0x32, 0xea, 0x55, 0xa4, 0x1e, 0x6f, 0xf8, 0x14,
	0x32, 0x62, 0x5c, 0xe0, 0x19, 0x6b, 0xa9, 0x7c, 0xeb, 0x8c, 0x6d, 0x39, 0xf2, 0xe6, 0x6d, 0x48,
	0x3f, 0x61, 0x1c, 0xaf, 0x26, 0xe4, 0xc7, 0x56, 0x43, 0x79, 0x8a, 0x8b, 0x48, 0x21, 0x17, 0xcd,
	0x2b, 0x9c, 0x6d, 0x9e, 0x95, 0x6b, 0x33, 0x89, 0x9d, 0xf8, 0xf6, 0x1c, 0x16, 0xe2, 0x9d, 0x88,
	0x67, 0x36, 0x71, 0xf9, 0xf6, 0xcc, 0xe3, 0x04, 0xdf, 0x87, 0x6c, 0xd8, 0x9e, 0x78, 0x3d, 0xa1,
	0x34, 0xd9, 0xb3, 0x53, 0xc3, 0x7f, 0x0e, 0x6b, 0x61, 0x6d, 0x8c, 0xf5, 0x10, 0x26, 0x83, 0x3c,
	0xb3, 0xd9, 0xa6, 0x1a, 0xd7, 0x01, 0x4e, 0x0a, 0x0f, 0x37, 0x4e, 0xb3, 0x18, 0xeb, 0x81, 0xf2,
	0xdd, 0x19, 0x84, 0x46, 0xc1, 0x6f, 0xfd, 0x1f, 0xae, 0x74, 0x6d, 0xb7, 0x43, 0xed, 0xe8, 0x17,
	0x84, 0x67, 0xd5, 0xba, 0xbe, 0x67, 0x84, 0xea, 0x5b, 0x39, 0xa9, 0xd9, 0xf0, 0xac, 0xc3, 0x0b,
	0x9f, 0xce, 0x49, 0x89, 0x4e, 0x56, 0xfe, 0xaf, 0x72, 0xff, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x12, 0xb9, 0x90, 0xcd, 0x9e, 0x11, 0x00, 0x00,
}
