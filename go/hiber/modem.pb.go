// Code generated by protoc-gen-go.
// source: modem.proto
// DO NOT EDIT!

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Modem statuses for its journey from manufacturer to you.
type Modem_Status int32

const (
	// Modem is in your inventory, but not deployed or active
	Modem_DEFAULT Modem_Status = 0
	// Modem is active and sending messages. See health for more details on its health, based on the past messages
	Modem_ACTIVE   Modem_Status = 1
	Modem_DAMAGED  Modem_Status = 2
	Modem_LOST     Modem_Status = 3
	Modem_DEAD     Modem_Status = 4
	Modem_DISABLED Modem_Status = 5
)

var Modem_Status_name = map[int32]string{
	0: "DEFAULT",
	1: "ACTIVE",
	2: "DAMAGED",
	3: "LOST",
	4: "DEAD",
	5: "DISABLED",
}
var Modem_Status_value = map[string]int32{
	"DEFAULT":  0,
	"ACTIVE":   1,
	"DAMAGED":  2,
	"LOST":     3,
	"DEAD":     4,
	"DISABLED": 5,
}

func (x Modem_Status) String() string {
	return proto.EnumName(Modem_Status_name, int32(x))
}
func (Modem_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 0} }

type Modem_Transfer_Status int32

const (
	Modem_Transfer_NONE Modem_Transfer_Status = 0
	// Modem has been shipped or transferred to you and is inbound.
	// When you mark the transfer as received, the modems are added to your organization.
	// If you encounter any issues, you can mark modems for return using the ModemTransferReturnService.
	Modem_Transfer_INBOUND Modem_Transfer_Status = 1
	// Modem has been shipped or transferred by you and is outbound.
	// When the transfer is received, the modems are removed from your organization, though the recipient may
	// still return them later.
	Modem_Transfer_OUTBOUND Modem_Transfer_Status = 2
	// You shipped this modem to another organization, but they are returning it.
	// When you mark the transfer as received, the modems are added back to your organization.
	Modem_Transfer_RETURNING Modem_Transfer_Status = 3
)

var Modem_Transfer_Status_name = map[int32]string{
	0: "NONE",
	1: "INBOUND",
	2: "OUTBOUND",
	3: "RETURNING",
}
var Modem_Transfer_Status_value = map[string]int32{
	"NONE":      0,
	"INBOUND":   1,
	"OUTBOUND":  2,
	"RETURNING": 3,
}

func (x Modem_Transfer_Status) String() string {
	return proto.EnumName(Modem_Transfer_Status_name, int32(x))
}
func (Modem_Transfer_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 2, 0} }

// A Hiber antenna is required for the modem to function.
type Modem_Peripherals_HiberAntenna int32

const (
	Modem_Peripherals_DEFAULT       Modem_Peripherals_HiberAntenna = 0
	Modem_Peripherals_HIBER_PANDA   Modem_Peripherals_HiberAntenna = 1
	Modem_Peripherals_HIBER_GRIZZLY Modem_Peripherals_HiberAntenna = 2
	Modem_Peripherals_HIBER_BLACK   Modem_Peripherals_HiberAntenna = 3
	Modem_Peripherals_CUSTOM        Modem_Peripherals_HiberAntenna = 4
)

var Modem_Peripherals_HiberAntenna_name = map[int32]string{
	0: "DEFAULT",
	1: "HIBER_PANDA",
	2: "HIBER_GRIZZLY",
	3: "HIBER_BLACK",
	4: "CUSTOM",
}
var Modem_Peripherals_HiberAntenna_value = map[string]int32{
	"DEFAULT":       0,
	"HIBER_PANDA":   1,
	"HIBER_GRIZZLY": 2,
	"HIBER_BLACK":   3,
	"CUSTOM":        4,
}

func (x Modem_Peripherals_HiberAntenna) String() string {
	return proto.EnumName(Modem_Peripherals_HiberAntenna_name, int32(x))
}
func (Modem_Peripherals_HiberAntenna) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor7, []int{0, 3, 0}
}

type ListModemsRequest_Sort int32

const (
	ListModemsRequest_LAST_MESSAGE_RECEIVED          ListModemsRequest_Sort = 0
	ListModemsRequest_LAST_MESSAGE_RECEIVED_INVERTED ListModemsRequest_Sort = 1
	ListModemsRequest_MODEM_NUMBER_ASC               ListModemsRequest_Sort = 2
	ListModemsRequest_MODEM_NUMBER_DESC              ListModemsRequest_Sort = 3
	ListModemsRequest_STATUS_ASC                     ListModemsRequest_Sort = 4
	ListModemsRequest_STATUS_DESC                    ListModemsRequest_Sort = 5
)

var ListModemsRequest_Sort_name = map[int32]string{
	0: "LAST_MESSAGE_RECEIVED",
	1: "LAST_MESSAGE_RECEIVED_INVERTED",
	2: "MODEM_NUMBER_ASC",
	3: "MODEM_NUMBER_DESC",
	4: "STATUS_ASC",
	5: "STATUS_DESC",
}
var ListModemsRequest_Sort_value = map[string]int32{
	"LAST_MESSAGE_RECEIVED":          0,
	"LAST_MESSAGE_RECEIVED_INVERTED": 1,
	"MODEM_NUMBER_ASC":               2,
	"MODEM_NUMBER_DESC":              3,
	"STATUS_ASC":                     4,
	"STATUS_DESC":                    5,
}

func (x ListModemsRequest_Sort) String() string {
	return proto.EnumName(ListModemsRequest_Sort_name, int32(x))
}
func (ListModemsRequest_Sort) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{5, 0} }

// Modem data, including location and last message (if available).
// Location, last message and firmware version can be updated by messages, the rest is typically either set
// when the modem is registered into the system or when a subscription is authorized.
type Modem struct {
	// An 8-character hexadecimal string
	Number       string `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
	Organization string `protobuf:"bytes,2,opt,name=organization" json:"organization,omitempty"`
	// An optional descriptor given to the modem
	Name                  string                    `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Location              *Location                 `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	LastMessageReceivedAt *Timestamp                `protobuf:"bytes,5,opt,name=last_message_received_at,json=lastMessageReceivedAt" json:"last_message_received_at,omitempty"`
	ActiveSubscription    *Modem_ActiveSubscription `protobuf:"bytes,6,opt,name=active_subscription,json=activeSubscription" json:"active_subscription,omitempty"`
	Technical             *Modem_TechnicalData      `protobuf:"bytes,7,opt,name=technical" json:"technical,omitempty"`
	// Period in days, if modem inactivity exceeds this period, alerts will be triggered and health will go to error
	MaximumInactivityPeriod int32 `protobuf:"varint,8,opt,name=maximum_inactivity_period,json=maximumInactivityPeriod" json:"maximum_inactivity_period,omitempty"`
	// Value based on the number of error and warning events this modem has received in the past 30 days
	Health      Health             `protobuf:"varint,9,opt,name=health,enum=hiber.Health" json:"health,omitempty"`
	Tags        []*Tag             `protobuf:"bytes,10,rep,name=tags" json:"tags,omitempty"`
	Peripherals *Modem_Peripherals `protobuf:"bytes,11,opt,name=peripherals" json:"peripherals,omitempty"`
	Status      Modem_Status       `protobuf:"varint,12,opt,name=status,enum=hiber.modem.Modem_Status" json:"status,omitempty"`
	InTransfer  *Modem_Transfer    `protobuf:"bytes,13,opt,name=in_transfer,json=inTransfer" json:"in_transfer,omitempty"`
}

func (m *Modem) Reset()                    { *m = Modem{} }
func (m *Modem) String() string            { return proto.CompactTextString(m) }
func (*Modem) ProtoMessage()               {}
func (*Modem) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *Modem) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Modem) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *Modem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Modem) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Modem) GetLastMessageReceivedAt() *Timestamp {
	if m != nil {
		return m.LastMessageReceivedAt
	}
	return nil
}

func (m *Modem) GetActiveSubscription() *Modem_ActiveSubscription {
	if m != nil {
		return m.ActiveSubscription
	}
	return nil
}

func (m *Modem) GetTechnical() *Modem_TechnicalData {
	if m != nil {
		return m.Technical
	}
	return nil
}

func (m *Modem) GetMaximumInactivityPeriod() int32 {
	if m != nil {
		return m.MaximumInactivityPeriod
	}
	return 0
}

func (m *Modem) GetHealth() Health {
	if m != nil {
		return m.Health
	}
	return Health_OK
}

func (m *Modem) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Modem) GetPeripherals() *Modem_Peripherals {
	if m != nil {
		return m.Peripherals
	}
	return nil
}

func (m *Modem) GetStatus() Modem_Status {
	if m != nil {
		return m.Status
	}
	return Modem_DEFAULT
}

func (m *Modem) GetInTransfer() *Modem_Transfer {
	if m != nil {
		return m.InTransfer
	}
	return nil
}

type Modem_TechnicalData struct {
	HardwareName            string `protobuf:"bytes,2,opt,name=hardware_name,json=hardwareName" json:"hardware_name,omitempty"`
	FirmwareVersionName     string `protobuf:"bytes,3,opt,name=firmware_version_name,json=firmwareVersionName" json:"firmware_version_name,omitempty"`
	HardwareProductionBatch string `protobuf:"bytes,6,opt,name=hardware_production_batch,json=hardwareProductionBatch" json:"hardware_production_batch,omitempty"`
	Manufacturer            string `protobuf:"bytes,7,opt,name=manufacturer" json:"manufacturer,omitempty"`
}

func (m *Modem_TechnicalData) Reset()                    { *m = Modem_TechnicalData{} }
func (m *Modem_TechnicalData) String() string            { return proto.CompactTextString(m) }
func (*Modem_TechnicalData) ProtoMessage()               {}
func (*Modem_TechnicalData) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 0} }

func (m *Modem_TechnicalData) GetHardwareName() string {
	if m != nil {
		return m.HardwareName
	}
	return ""
}

func (m *Modem_TechnicalData) GetFirmwareVersionName() string {
	if m != nil {
		return m.FirmwareVersionName
	}
	return ""
}

func (m *Modem_TechnicalData) GetHardwareProductionBatch() string {
	if m != nil {
		return m.HardwareProductionBatch
	}
	return ""
}

func (m *Modem_TechnicalData) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

type Modem_ActiveSubscription struct {
	Type      ServiceType `protobuf:"varint,3,opt,name=type,enum=hiber.organization.subscription.ServiceType" json:"type,omitempty"`
	StartDate *Timestamp  `protobuf:"bytes,4,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	EndDate   *Timestamp  `protobuf:"bytes,5,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
}

func (m *Modem_ActiveSubscription) Reset()                    { *m = Modem_ActiveSubscription{} }
func (m *Modem_ActiveSubscription) String() string            { return proto.CompactTextString(m) }
func (*Modem_ActiveSubscription) ProtoMessage()               {}
func (*Modem_ActiveSubscription) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 1} }

func (m *Modem_ActiveSubscription) GetType() ServiceType {
	if m != nil {
		return m.Type
	}
	return ServiceType_ONCE_PER_DAY
}

func (m *Modem_ActiveSubscription) GetStartDate() *Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *Modem_ActiveSubscription) GetEndDate() *Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

type Modem_Transfer struct {
	Status     Modem_Transfer_Status `protobuf:"varint,1,opt,name=status,enum=hiber.modem.Modem_Transfer_Status" json:"status,omitempty"`
	Identifier string                `protobuf:"bytes,2,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *Modem_Transfer) Reset()                    { *m = Modem_Transfer{} }
func (m *Modem_Transfer) String() string            { return proto.CompactTextString(m) }
func (*Modem_Transfer) ProtoMessage()               {}
func (*Modem_Transfer) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 2} }

func (m *Modem_Transfer) GetStatus() Modem_Transfer_Status {
	if m != nil {
		return m.Status
	}
	return Modem_Transfer_NONE
}

func (m *Modem_Transfer) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

// Peripherals attached to the modem, including antenna, whether it has a gps antenna and an
// open field for peripherals like battery, sensors, etc.
type Modem_Peripherals struct {
	HiberAntenna  Modem_Peripherals_HiberAntenna `protobuf:"varint,1,opt,name=hiber_antenna,json=hiberAntenna,enum=hiber.modem.Modem_Peripherals_HiberAntenna" json:"hiber_antenna,omitempty"`
	Gps           bool                           `protobuf:"varint,2,opt,name=gps" json:"gps,omitempty"`
	Peripherals   map[string]string              `protobuf:"bytes,3,rep,name=peripherals" json:"peripherals,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CustomAntenna string                         `protobuf:"bytes,4,opt,name=custom_antenna,json=customAntenna" json:"custom_antenna,omitempty"`
}

func (m *Modem_Peripherals) Reset()                    { *m = Modem_Peripherals{} }
func (m *Modem_Peripherals) String() string            { return proto.CompactTextString(m) }
func (*Modem_Peripherals) ProtoMessage()               {}
func (*Modem_Peripherals) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 3} }

func (m *Modem_Peripherals) GetHiberAntenna() Modem_Peripherals_HiberAntenna {
	if m != nil {
		return m.HiberAntenna
	}
	return Modem_Peripherals_DEFAULT
}

func (m *Modem_Peripherals) GetGps() bool {
	if m != nil {
		return m.Gps
	}
	return false
}

func (m *Modem_Peripherals) GetPeripherals() map[string]string {
	if m != nil {
		return m.Peripherals
	}
	return nil
}

func (m *Modem_Peripherals) GetCustomAntenna() string {
	if m != nil {
		return m.CustomAntenna
	}
	return ""
}

// Selection object for modems.
// Filter modems by modem id, (child)organization, tags, activation status and time, service type and last message time.
type ModemSelection struct {
	Modems             *Filter_Modems             `protobuf:"bytes,1,opt,name=modems" json:"modems,omitempty"`
	FilterByTags       *TagSelection              `protobuf:"bytes,2,opt,name=filter_by_tags,json=filterByTags" json:"filter_by_tags,omitempty"`
	ChildOrganizations *Filter_ChildOrganizations `protobuf:"bytes,3,opt,name=child_organizations,json=childOrganizations" json:"child_organizations,omitempty"`
	OnlyActive         bool                       `protobuf:"varint,4,opt,name=only_active,json=onlyActive" json:"only_active,omitempty"`
	ActivatedIn        *TimeRange                 `protobuf:"bytes,5,opt,name=activated_in,json=activatedIn" json:"activated_in,omitempty"`
	WithServiceType    []ServiceType              `protobuf:"varint,6,rep,packed,name=with_service_type,json=withServiceType,enum=hiber.organization.subscription.ServiceType" json:"with_service_type,omitempty"`
	WithLastMessageIn  *TimeRange                 `protobuf:"bytes,7,opt,name=with_last_message_in,json=withLastMessageIn" json:"with_last_message_in,omitempty"`
	FreeTextSearch     string                     `protobuf:"bytes,8,opt,name=free_text_search,json=freeTextSearch" json:"free_text_search,omitempty"`
	Health             []Health                   `protobuf:"varint,9,rep,packed,name=health,enum=hiber.Health" json:"health,omitempty"`
	Status             []Modem_Status             `protobuf:"varint,10,rep,packed,name=status,enum=hiber.modem.Modem_Status" json:"status,omitempty"`
	Transfers          *ModemSelection_Transfers  `protobuf:"bytes,11,opt,name=transfers" json:"transfers,omitempty"`
}

func (m *ModemSelection) Reset()                    { *m = ModemSelection{} }
func (m *ModemSelection) String() string            { return proto.CompactTextString(m) }
func (*ModemSelection) ProtoMessage()               {}
func (*ModemSelection) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *ModemSelection) GetModems() *Filter_Modems {
	if m != nil {
		return m.Modems
	}
	return nil
}

func (m *ModemSelection) GetFilterByTags() *TagSelection {
	if m != nil {
		return m.FilterByTags
	}
	return nil
}

func (m *ModemSelection) GetChildOrganizations() *Filter_ChildOrganizations {
	if m != nil {
		return m.ChildOrganizations
	}
	return nil
}

func (m *ModemSelection) GetOnlyActive() bool {
	if m != nil {
		return m.OnlyActive
	}
	return false
}

func (m *ModemSelection) GetActivatedIn() *TimeRange {
	if m != nil {
		return m.ActivatedIn
	}
	return nil
}

func (m *ModemSelection) GetWithServiceType() []ServiceType {
	if m != nil {
		return m.WithServiceType
	}
	return nil
}

func (m *ModemSelection) GetWithLastMessageIn() *TimeRange {
	if m != nil {
		return m.WithLastMessageIn
	}
	return nil
}

func (m *ModemSelection) GetFreeTextSearch() string {
	if m != nil {
		return m.FreeTextSearch
	}
	return ""
}

func (m *ModemSelection) GetHealth() []Health {
	if m != nil {
		return m.Health
	}
	return nil
}

func (m *ModemSelection) GetStatus() []Modem_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ModemSelection) GetTransfers() *ModemSelection_Transfers {
	if m != nil {
		return m.Transfers
	}
	return nil
}

type ModemSelection_Transfers struct {
	TransfersIdentifiers  []string `protobuf:"bytes,1,rep,name=transfers_identifiers,json=transfersIdentifiers" json:"transfers_identifiers,omitempty"`
	IncludeInboundModems  bool     `protobuf:"varint,2,opt,name=include_inbound_modems,json=includeInboundModems" json:"include_inbound_modems,omitempty"`
	IncludeOutboundModems bool     `protobuf:"varint,3,opt,name=include_outbound_modems,json=includeOutboundModems" json:"include_outbound_modems,omitempty"`
}

func (m *ModemSelection_Transfers) Reset()                    { *m = ModemSelection_Transfers{} }
func (m *ModemSelection_Transfers) String() string            { return proto.CompactTextString(m) }
func (*ModemSelection_Transfers) ProtoMessage()               {}
func (*ModemSelection_Transfers) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1, 0} }

func (m *ModemSelection_Transfers) GetTransfersIdentifiers() []string {
	if m != nil {
		return m.TransfersIdentifiers
	}
	return nil
}

func (m *ModemSelection_Transfers) GetIncludeInboundModems() bool {
	if m != nil {
		return m.IncludeInboundModems
	}
	return false
}

func (m *ModemSelection_Transfers) GetIncludeOutboundModems() bool {
	if m != nil {
		return m.IncludeOutboundModems
	}
	return false
}

// Decrypted modem message. Messages are received encrypted and decrypted asynchronously, which adds the location
// data and message body. (Your message body is, of course, still encrypted if you've encrypted it yourself)
type ModemMessage struct {
	ModemNumber string      `protobuf:"bytes,1,opt,name=modem_number,json=modemNumber" json:"modem_number,omitempty"`
	Version     uint32      `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	SentAt      *Timestamp  `protobuf:"bytes,3,opt,name=sent_at,json=sentAt" json:"sent_at,omitempty"`
	Location    *Location   `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	Body        []byte      `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	ReceivedAt  *Timestamp  `protobuf:"bytes,6,opt,name=received_at,json=receivedAt" json:"received_at,omitempty"`
	MessageId   uint64      `protobuf:"varint,7,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	BodyBytes   *BytesOrHex `protobuf:"bytes,8,opt,name=body_bytes,json=bodyBytes" json:"body_bytes,omitempty"`
}

func (m *ModemMessage) Reset()                    { *m = ModemMessage{} }
func (m *ModemMessage) String() string            { return proto.CompactTextString(m) }
func (*ModemMessage) ProtoMessage()               {}
func (*ModemMessage) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *ModemMessage) GetModemNumber() string {
	if m != nil {
		return m.ModemNumber
	}
	return ""
}

func (m *ModemMessage) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ModemMessage) GetSentAt() *Timestamp {
	if m != nil {
		return m.SentAt
	}
	return nil
}

func (m *ModemMessage) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *ModemMessage) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ModemMessage) GetReceivedAt() *Timestamp {
	if m != nil {
		return m.ReceivedAt
	}
	return nil
}

func (m *ModemMessage) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *ModemMessage) GetBodyBytes() *BytesOrHex {
	if m != nil {
		return m.BodyBytes
	}
	return nil
}

// Selection object for modem messages.
// Filter messages by modem id, (child)organization, and time sent (note that this is not the time the message was received)
type ModemMessageSelection struct {
	Modems    *Filter_Modems `protobuf:"bytes,1,opt,name=modems" json:"modems,omitempty"`
	TimeRange *TimeRange     `protobuf:"bytes,3,opt,name=time_range,json=timeRange" json:"time_range,omitempty"`
}

func (m *ModemMessageSelection) Reset()                    { *m = ModemMessageSelection{} }
func (m *ModemMessageSelection) String() string            { return proto.CompactTextString(m) }
func (*ModemMessageSelection) ProtoMessage()               {}
func (*ModemMessageSelection) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *ModemMessageSelection) GetModems() *Filter_Modems {
	if m != nil {
		return m.Modems
	}
	return nil
}

func (m *ModemMessageSelection) GetTimeRange() *TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

type GetModemRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	ModemNumber  string `protobuf:"bytes,2,opt,name=modem_number,json=modemNumber" json:"modem_number,omitempty"`
}

func (m *GetModemRequest) Reset()                    { *m = GetModemRequest{} }
func (m *GetModemRequest) String() string            { return proto.CompactTextString(m) }
func (*GetModemRequest) ProtoMessage()               {}
func (*GetModemRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *GetModemRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *GetModemRequest) GetModemNumber() string {
	if m != nil {
		return m.ModemNumber
	}
	return ""
}

type ListModemsRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                 `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *ModemSelection        `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination            `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
	SortBy       ListModemsRequest_Sort `protobuf:"varint,4,opt,name=sort_by,json=sortBy,enum=hiber.modem.ListModemsRequest_Sort" json:"sort_by,omitempty"`
}

func (m *ListModemsRequest) Reset()                    { *m = ListModemsRequest{} }
func (m *ListModemsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListModemsRequest) ProtoMessage()               {}
func (*ListModemsRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *ListModemsRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ListModemsRequest) GetSelection() *ModemSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListModemsRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListModemsRequest) GetSortBy() ListModemsRequest_Sort {
	if m != nil {
		return m.SortBy
	}
	return ListModemsRequest_LAST_MESSAGE_RECEIVED
}

type ListModemsRequest_Response struct {
	Modems     []*Modem           `protobuf:"bytes,1,rep,name=modems" json:"modems,omitempty"`
	Request    *ListModemsRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListModemsRequest_Response) Reset()                    { *m = ListModemsRequest_Response{} }
func (m *ListModemsRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*ListModemsRequest_Response) ProtoMessage()               {}
func (*ListModemsRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5, 0} }

func (m *ListModemsRequest_Response) GetModems() []*Modem {
	if m != nil {
		return m.Modems
	}
	return nil
}

func (m *ListModemsRequest_Response) GetRequest() *ListModemsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListModemsRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListModemMessagesRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                 `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *ModemMessageSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination            `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListModemMessagesRequest) Reset()                    { *m = ListModemMessagesRequest{} }
func (m *ListModemMessagesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListModemMessagesRequest) ProtoMessage()               {}
func (*ListModemMessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

func (m *ListModemMessagesRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ListModemMessagesRequest) GetSelection() *ModemMessageSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListModemMessagesRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListModemMessagesRequest_Response struct {
	Messages   []*ModemMessage           `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	Request    *ListModemMessagesRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result        `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListModemMessagesRequest_Response) Reset()         { *m = ListModemMessagesRequest_Response{} }
func (m *ListModemMessagesRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListModemMessagesRequest_Response) ProtoMessage()    {}
func (*ListModemMessagesRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor7, []int{6, 0}
}

func (m *ListModemMessagesRequest_Response) GetMessages() []*ModemMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ListModemMessagesRequest_Response) GetRequest() *ListModemMessagesRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListModemMessagesRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type MessageCountRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization   string                 `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection      *ModemMessageSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	TimeZoneOffset int32                  `protobuf:"varint,3,opt,name=time_zone_offset,json=timeZoneOffset" json:"time_zone_offset,omitempty"`
}

func (m *MessageCountRequest) Reset()                    { *m = MessageCountRequest{} }
func (m *MessageCountRequest) String() string            { return proto.CompactTextString(m) }
func (*MessageCountRequest) ProtoMessage()               {}
func (*MessageCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{7} }

func (m *MessageCountRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *MessageCountRequest) GetSelection() *ModemMessageSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *MessageCountRequest) GetTimeZoneOffset() int32 {
	if m != nil {
		return m.TimeZoneOffset
	}
	return 0
}

type MessageCountRequest_Response struct {
	MessageCountPerDay []*MessageCountRequest_Response_MessageCount `protobuf:"bytes,1,rep,name=message_count_per_day,json=messageCountPerDay" json:"message_count_per_day,omitempty"`
	Request            *MessageCountRequest                         `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *MessageCountRequest_Response) Reset()                    { *m = MessageCountRequest_Response{} }
func (m *MessageCountRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*MessageCountRequest_Response) ProtoMessage()               {}
func (*MessageCountRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{7, 0} }

func (m *MessageCountRequest_Response) GetMessageCountPerDay() []*MessageCountRequest_Response_MessageCount {
	if m != nil {
		return m.MessageCountPerDay
	}
	return nil
}

func (m *MessageCountRequest_Response) GetRequest() *MessageCountRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type MessageCountRequest_Response_MessageCount struct {
	Date  *Date `protobuf:"bytes,1,opt,name=date" json:"date,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *MessageCountRequest_Response_MessageCount) Reset() {
	*m = MessageCountRequest_Response_MessageCount{}
}
func (m *MessageCountRequest_Response_MessageCount) String() string { return proto.CompactTextString(m) }
func (*MessageCountRequest_Response_MessageCount) ProtoMessage()    {}
func (*MessageCountRequest_Response_MessageCount) Descriptor() ([]byte, []int) {
	return fileDescriptor7, []int{7, 0, 0}
}

func (m *MessageCountRequest_Response_MessageCount) GetDate() *Date {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *MessageCountRequest_Response_MessageCount) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type RenameModemRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	ModemNumber  string `protobuf:"bytes,2,opt,name=modem_number,json=modemNumber" json:"modem_number,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *RenameModemRequest) Reset()                    { *m = RenameModemRequest{} }
func (m *RenameModemRequest) String() string            { return proto.CompactTextString(m) }
func (*RenameModemRequest) ProtoMessage()               {}
func (*RenameModemRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{8} }

func (m *RenameModemRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *RenameModemRequest) GetModemNumber() string {
	if m != nil {
		return m.ModemNumber
	}
	return ""
}

func (m *RenameModemRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateModemTagsRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string             `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Update       *UpdateTagsForItem `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
	Selection    *ModemSelection    `protobuf:"bytes,5,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination        `protobuf:"bytes,6,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *UpdateModemTagsRequest) Reset()                    { *m = UpdateModemTagsRequest{} }
func (m *UpdateModemTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateModemTagsRequest) ProtoMessage()               {}
func (*UpdateModemTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{9} }

func (m *UpdateModemTagsRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UpdateModemTagsRequest) GetUpdate() *UpdateTagsForItem {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateModemTagsRequest) GetSelection() *ModemSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *UpdateModemTagsRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type UpdateModemTagsRequest_Response struct {
	Modems     []*Modem                `protobuf:"bytes,1,rep,name=modems" json:"modems,omitempty"`
	Request    *UpdateModemTagsRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result      `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *UpdateModemTagsRequest_Response) Reset()         { *m = UpdateModemTagsRequest_Response{} }
func (m *UpdateModemTagsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*UpdateModemTagsRequest_Response) ProtoMessage()    {}
func (*UpdateModemTagsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor7, []int{9, 0}
}

func (m *UpdateModemTagsRequest_Response) GetModems() []*Modem {
	if m != nil {
		return m.Modems
	}
	return nil
}

func (m *UpdateModemTagsRequest_Response) GetRequest() *UpdateModemTagsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *UpdateModemTagsRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type UpdatePeripheralsRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization         string                         `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection            *ModemSelection                `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	HiberAntenna         Modem_Peripherals_HiberAntenna `protobuf:"varint,3,opt,name=hiber_antenna,json=hiberAntenna,enum=hiber.modem.Modem_Peripherals_HiberAntenna" json:"hiber_antenna,omitempty"`
	Gps                  *UpdateBoolean                 `protobuf:"bytes,4,opt,name=gps" json:"gps,omitempty"`
	HardcodedGpsLocation *Location                      `protobuf:"bytes,5,opt,name=hardcoded_gps_location,json=hardcodedGpsLocation" json:"hardcoded_gps_location,omitempty"`
	AddPeripherals       map[string]string              `protobuf:"bytes,6,rep,name=add_peripherals,json=addPeripherals" json:"add_peripherals,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RemovePeripherals    []string                       `protobuf:"bytes,7,rep,name=remove_peripherals,json=removePeripherals" json:"remove_peripherals,omitempty"`
	Pagination           *Pagination                    `protobuf:"bytes,9,opt,name=pagination" json:"pagination,omitempty"`
	CustomAntenna        string                         `protobuf:"bytes,10,opt,name=custom_antenna,json=customAntenna" json:"custom_antenna,omitempty"`
}

func (m *UpdatePeripheralsRequest) Reset()                    { *m = UpdatePeripheralsRequest{} }
func (m *UpdatePeripheralsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePeripheralsRequest) ProtoMessage()               {}
func (*UpdatePeripheralsRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{10} }

func (m *UpdatePeripheralsRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UpdatePeripheralsRequest) GetSelection() *ModemSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *UpdatePeripheralsRequest) GetHiberAntenna() Modem_Peripherals_HiberAntenna {
	if m != nil {
		return m.HiberAntenna
	}
	return Modem_Peripherals_DEFAULT
}

func (m *UpdatePeripheralsRequest) GetGps() *UpdateBoolean {
	if m != nil {
		return m.Gps
	}
	return nil
}

func (m *UpdatePeripheralsRequest) GetHardcodedGpsLocation() *Location {
	if m != nil {
		return m.HardcodedGpsLocation
	}
	return nil
}

func (m *UpdatePeripheralsRequest) GetAddPeripherals() map[string]string {
	if m != nil {
		return m.AddPeripherals
	}
	return nil
}

func (m *UpdatePeripheralsRequest) GetRemovePeripherals() []string {
	if m != nil {
		return m.RemovePeripherals
	}
	return nil
}

func (m *UpdatePeripheralsRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *UpdatePeripheralsRequest) GetCustomAntenna() string {
	if m != nil {
		return m.CustomAntenna
	}
	return ""
}

// The result is paginated if affecting more than 100 modems. Use the list call to paginate further.
type UpdatePeripheralsRequest_Response struct {
	Request    *UpdatePeripheralsRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Modems     []*Modem                  `protobuf:"bytes,2,rep,name=modems" json:"modems,omitempty"`
	Pagination *Pagination_Result        `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *UpdatePeripheralsRequest_Response) Reset()         { *m = UpdatePeripheralsRequest_Response{} }
func (m *UpdatePeripheralsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*UpdatePeripheralsRequest_Response) ProtoMessage()    {}
func (*UpdatePeripheralsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor7, []int{10, 0}
}

func (m *UpdatePeripheralsRequest_Response) GetRequest() *UpdatePeripheralsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *UpdatePeripheralsRequest_Response) GetModems() []*Modem {
	if m != nil {
		return m.Modems
	}
	return nil
}

func (m *UpdatePeripheralsRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type LicenseKeysRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string          `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *ModemSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination     `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *LicenseKeysRequest) Reset()                    { *m = LicenseKeysRequest{} }
func (m *LicenseKeysRequest) String() string            { return proto.CompactTextString(m) }
func (*LicenseKeysRequest) ProtoMessage()               {}
func (*LicenseKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{11} }

func (m *LicenseKeysRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *LicenseKeysRequest) GetSelection() *ModemSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *LicenseKeysRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type LicenseKeysRequest_Response struct {
	Request     *LicenseKeysRequest                            `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	LicenseKeys []*LicenseKeysRequest_Response_ModemLicenseKey `protobuf:"bytes,2,rep,name=license_keys,json=licenseKeys" json:"license_keys,omitempty"`
	Pagination  *Pagination_Result                             `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *LicenseKeysRequest_Response) Reset()                    { *m = LicenseKeysRequest_Response{} }
func (m *LicenseKeysRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*LicenseKeysRequest_Response) ProtoMessage()               {}
func (*LicenseKeysRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{11, 0} }

func (m *LicenseKeysRequest_Response) GetRequest() *LicenseKeysRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *LicenseKeysRequest_Response) GetLicenseKeys() []*LicenseKeysRequest_Response_ModemLicenseKey {
	if m != nil {
		return m.LicenseKeys
	}
	return nil
}

func (m *LicenseKeysRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type LicenseKeysRequest_Response_ModemLicenseKey struct {
	ModemNumber string `protobuf:"bytes,1,opt,name=modem_number,json=modemNumber" json:"modem_number,omitempty"`
	LicenseKey  string `protobuf:"bytes,2,opt,name=license_key,json=licenseKey" json:"license_key,omitempty"`
}

func (m *LicenseKeysRequest_Response_ModemLicenseKey) Reset() {
	*m = LicenseKeysRequest_Response_ModemLicenseKey{}
}
func (m *LicenseKeysRequest_Response_ModemLicenseKey) String() string {
	return proto.CompactTextString(m)
}
func (*LicenseKeysRequest_Response_ModemLicenseKey) ProtoMessage() {}
func (*LicenseKeysRequest_Response_ModemLicenseKey) Descriptor() ([]byte, []int) {
	return fileDescriptor7, []int{11, 0, 0}
}

func (m *LicenseKeysRequest_Response_ModemLicenseKey) GetModemNumber() string {
	if m != nil {
		return m.ModemNumber
	}
	return ""
}

func (m *LicenseKeysRequest_Response_ModemLicenseKey) GetLicenseKey() string {
	if m != nil {
		return m.LicenseKey
	}
	return ""
}

func init() {
	proto.RegisterType((*Modem)(nil), "hiber.modem.Modem")
	proto.RegisterType((*Modem_TechnicalData)(nil), "hiber.modem.Modem.TechnicalData")
	proto.RegisterType((*Modem_ActiveSubscription)(nil), "hiber.modem.Modem.ActiveSubscription")
	proto.RegisterType((*Modem_Transfer)(nil), "hiber.modem.Modem.Transfer")
	proto.RegisterType((*Modem_Peripherals)(nil), "hiber.modem.Modem.Peripherals")
	proto.RegisterType((*ModemSelection)(nil), "hiber.modem.ModemSelection")
	proto.RegisterType((*ModemSelection_Transfers)(nil), "hiber.modem.ModemSelection.Transfers")
	proto.RegisterType((*ModemMessage)(nil), "hiber.modem.ModemMessage")
	proto.RegisterType((*ModemMessageSelection)(nil), "hiber.modem.ModemMessageSelection")
	proto.RegisterType((*GetModemRequest)(nil), "hiber.modem.GetModemRequest")
	proto.RegisterType((*ListModemsRequest)(nil), "hiber.modem.ListModemsRequest")
	proto.RegisterType((*ListModemsRequest_Response)(nil), "hiber.modem.ListModemsRequest.Response")
	proto.RegisterType((*ListModemMessagesRequest)(nil), "hiber.modem.ListModemMessagesRequest")
	proto.RegisterType((*ListModemMessagesRequest_Response)(nil), "hiber.modem.ListModemMessagesRequest.Response")
	proto.RegisterType((*MessageCountRequest)(nil), "hiber.modem.MessageCountRequest")
	proto.RegisterType((*MessageCountRequest_Response)(nil), "hiber.modem.MessageCountRequest.Response")
	proto.RegisterType((*MessageCountRequest_Response_MessageCount)(nil), "hiber.modem.MessageCountRequest.Response.MessageCount")
	proto.RegisterType((*RenameModemRequest)(nil), "hiber.modem.RenameModemRequest")
	proto.RegisterType((*UpdateModemTagsRequest)(nil), "hiber.modem.UpdateModemTagsRequest")
	proto.RegisterType((*UpdateModemTagsRequest_Response)(nil), "hiber.modem.UpdateModemTagsRequest.Response")
	proto.RegisterType((*UpdatePeripheralsRequest)(nil), "hiber.modem.UpdatePeripheralsRequest")
	proto.RegisterType((*UpdatePeripheralsRequest_Response)(nil), "hiber.modem.UpdatePeripheralsRequest.Response")
	proto.RegisterType((*LicenseKeysRequest)(nil), "hiber.modem.LicenseKeysRequest")
	proto.RegisterType((*LicenseKeysRequest_Response)(nil), "hiber.modem.LicenseKeysRequest.Response")
	proto.RegisterType((*LicenseKeysRequest_Response_ModemLicenseKey)(nil), "hiber.modem.LicenseKeysRequest.Response.ModemLicenseKey")
	proto.RegisterEnum("hiber.modem.Modem_Status", Modem_Status_name, Modem_Status_value)
	proto.RegisterEnum("hiber.modem.Modem_Transfer_Status", Modem_Transfer_Status_name, Modem_Transfer_Status_value)
	proto.RegisterEnum("hiber.modem.Modem_Peripherals_HiberAntenna", Modem_Peripherals_HiberAntenna_name, Modem_Peripherals_HiberAntenna_value)
	proto.RegisterEnum("hiber.modem.ListModemsRequest_Sort", ListModemsRequest_Sort_name, ListModemsRequest_Sort_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ModemService service

type ModemServiceClient interface {
	Get(ctx context.Context, in *GetModemRequest, opts ...grpc.CallOption) (*Modem, error)
	List(ctx context.Context, in *ListModemsRequest, opts ...grpc.CallOption) (*ListModemsRequest_Response, error)
	Messages(ctx context.Context, in *ListModemMessagesRequest, opts ...grpc.CallOption) (*ListModemMessagesRequest_Response, error)
	MessageCount(ctx context.Context, in *MessageCountRequest, opts ...grpc.CallOption) (*MessageCountRequest_Response, error)
	Rename(ctx context.Context, in *RenameModemRequest, opts ...grpc.CallOption) (*Modem, error)
	UpdateTags(ctx context.Context, in *UpdateModemTagsRequest, opts ...grpc.CallOption) (*UpdateModemTagsRequest_Response, error)
	UpdatePeripherals(ctx context.Context, in *UpdatePeripheralsRequest, opts ...grpc.CallOption) (*UpdatePeripheralsRequest_Response, error)
	LicenseKeys(ctx context.Context, in *LicenseKeysRequest, opts ...grpc.CallOption) (*LicenseKeysRequest_Response, error)
}

type modemServiceClient struct {
	cc *grpc.ClientConn
}

func NewModemServiceClient(cc *grpc.ClientConn) ModemServiceClient {
	return &modemServiceClient{cc}
}

func (c *modemServiceClient) Get(ctx context.Context, in *GetModemRequest, opts ...grpc.CallOption) (*Modem, error) {
	out := new(Modem)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemServiceClient) List(ctx context.Context, in *ListModemsRequest, opts ...grpc.CallOption) (*ListModemsRequest_Response, error) {
	out := new(ListModemsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemServiceClient) Messages(ctx context.Context, in *ListModemMessagesRequest, opts ...grpc.CallOption) (*ListModemMessagesRequest_Response, error) {
	out := new(ListModemMessagesRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemService/Messages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemServiceClient) MessageCount(ctx context.Context, in *MessageCountRequest, opts ...grpc.CallOption) (*MessageCountRequest_Response, error) {
	out := new(MessageCountRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemService/MessageCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemServiceClient) Rename(ctx context.Context, in *RenameModemRequest, opts ...grpc.CallOption) (*Modem, error) {
	out := new(Modem)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemService/Rename", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemServiceClient) UpdateTags(ctx context.Context, in *UpdateModemTagsRequest, opts ...grpc.CallOption) (*UpdateModemTagsRequest_Response, error) {
	out := new(UpdateModemTagsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemService/UpdateTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemServiceClient) UpdatePeripherals(ctx context.Context, in *UpdatePeripheralsRequest, opts ...grpc.CallOption) (*UpdatePeripheralsRequest_Response, error) {
	out := new(UpdatePeripheralsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemService/UpdatePeripherals", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modemServiceClient) LicenseKeys(ctx context.Context, in *LicenseKeysRequest, opts ...grpc.CallOption) (*LicenseKeysRequest_Response, error) {
	out := new(LicenseKeysRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.modem.ModemService/LicenseKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ModemService service

type ModemServiceServer interface {
	Get(context.Context, *GetModemRequest) (*Modem, error)
	List(context.Context, *ListModemsRequest) (*ListModemsRequest_Response, error)
	Messages(context.Context, *ListModemMessagesRequest) (*ListModemMessagesRequest_Response, error)
	MessageCount(context.Context, *MessageCountRequest) (*MessageCountRequest_Response, error)
	Rename(context.Context, *RenameModemRequest) (*Modem, error)
	UpdateTags(context.Context, *UpdateModemTagsRequest) (*UpdateModemTagsRequest_Response, error)
	UpdatePeripherals(context.Context, *UpdatePeripheralsRequest) (*UpdatePeripheralsRequest_Response, error)
	LicenseKeys(context.Context, *LicenseKeysRequest) (*LicenseKeysRequest_Response, error)
}

func RegisterModemServiceServer(s *grpc.Server, srv ModemServiceServer) {
	s.RegisterService(&_ModemService_serviceDesc, srv)
}

func _ModemService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemServiceServer).Get(ctx, req.(*GetModemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemServiceServer).List(ctx, req.(*ListModemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemService_Messages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModemMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemServiceServer).Messages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemService/Messages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemServiceServer).Messages(ctx, req.(*ListModemMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemService_MessageCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemServiceServer).MessageCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemService/MessageCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemServiceServer).MessageCount(ctx, req.(*MessageCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemService_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameModemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemServiceServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemService/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemServiceServer).Rename(ctx, req.(*RenameModemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemService_UpdateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModemTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemServiceServer).UpdateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemService/UpdateTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemServiceServer).UpdateTags(ctx, req.(*UpdateModemTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemService_UpdatePeripherals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePeripheralsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemServiceServer).UpdatePeripherals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemService/UpdatePeripherals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemServiceServer).UpdatePeripherals(ctx, req.(*UpdatePeripheralsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModemService_LicenseKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModemServiceServer).LicenseKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.modem.ModemService/LicenseKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModemServiceServer).LicenseKeys(ctx, req.(*LicenseKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.modem.ModemService",
	HandlerType: (*ModemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ModemService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ModemService_List_Handler,
		},
		{
			MethodName: "Messages",
			Handler:    _ModemService_Messages_Handler,
		},
		{
			MethodName: "MessageCount",
			Handler:    _ModemService_MessageCount_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _ModemService_Rename_Handler,
		},
		{
			MethodName: "UpdateTags",
			Handler:    _ModemService_UpdateTags_Handler,
		},
		{
			MethodName: "UpdatePeripherals",
			Handler:    _ModemService_UpdatePeripherals_Handler,
		},
		{
			MethodName: "LicenseKeys",
			Handler:    _ModemService_LicenseKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modem.proto",
}

func init() { proto.RegisterFile("modem.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 2277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x19, 0x5d, 0x73, 0x1a, 0xd7,
	0xd5, 0xb0, 0x0b, 0x82, 0x03, 0x92, 0x56, 0xd7, 0x92, 0x8d, 0x49, 0x6a, 0xab, 0x64, 0xdc, 0x2a,
	0x8d, 0x8b, 0x63, 0x39, 0x4d, 0x6d, 0x8f, 0x9d, 0x1a, 0x04, 0x96, 0x71, 0x24, 0x50, 0x2e, 0xc8,
	0x93, 0x3a, 0x9d, 0xee, 0x5c, 0xd8, 0x2b, 0xd8, 0x06, 0x76, 0xe9, 0xee, 0x45, 0x31, 0x99, 0xfe,
	0x81, 0xbe, 0xb6, 0x7f, 0xa0, 0x0f, 0x79, 0xea, 0x74, 0xda, 0xe9, 0xf4, 0xb1, 0x1f, 0xd3, 0xa7,
	0xfe, 0x88, 0x4e, 0x7f, 0x45, 0x9f, 0xfa, 0xd8, 0xb9, 0x1f, 0x2c, 0xbb, 0x80, 0x2c, 0x64, 0xa7,
	0x99, 0xbe, 0xdd, 0x3d, 0x5f, 0xf7, 0x7c, 0x9f, 0x73, 0x01, 0x32, 0x03, 0xd7, 0xa2, 0x83, 0xe2,
	0xd0, 0x73, 0x99, 0x8b, 0x32, 0x3d, 0xbb, 0x4d, 0xbd, 0xa2, 0x00, 0xe5, 0xa1, 0x4d, 0x7c, 0x2a,
	0x11, 0xf9, 0x34, 0x23, 0x5d, 0x75, 0x44, 0xfe, 0xa8, 0xed, 0x77, 0x3c, 0x7b, 0xc8, 0x6c, 0xd7,
	0x91, 0xb0, 0xc2, 0x3f, 0x56, 0x21, 0x71, 0xc8, 0x99, 0xd0, 0x15, 0x48, 0x3a, 0xa3, 0x41, 0x9b,
	0x7a, 0xb9, 0xd8, 0x76, 0x6c, 0x27, 0x8d, 0xd5, 0x17, 0x2a, 0x40, 0xd6, 0xf5, 0xba, 0xc4, 0xb1,
	0xbf, 0x24, 0x9c, 0x2f, 0x17, 0x17, 0xd8, 0x08, 0x0c, 0x21, 0xd0, 0x1d, 0x32, 0xa0, 0x39, 0x4d,
	0xe0, 0xc4, 0x19, 0xbd, 0x07, 0xa9, 0xbe, 0xdb, 0x91, 0x3c, 0xfa, 0x76, 0x6c, 0x27, 0xb3, 0xbb,
	0x5e, 0x94, 0x4a, 0x1e, 0x28, 0x30, 0x0e, 0x08, 0x50, 0x0d, 0x72, 0x7d, 0xe2, 0x33, 0x73, 0x40,
	0x7d, 0x9f, 0x74, 0xa9, 0xe9, 0xd1, 0x0e, 0xb5, 0x4f, 0xa9, 0x65, 0x12, 0x96, 0x4b, 0x08, 0x66,
	0x43, 0x31, 0xb7, 0xec, 0x01, 0xf5, 0x19, 0x19, 0x0c, 0xf1, 0x16, 0xe7, 0x38, 0x94, 0x0c, 0x58,
	0xd1, 0x97, 0x18, 0x7a, 0x0e, 0x97, 0x49, 0x87, 0xd9, 0xa7, 0xd4, 0x0c, 0x9b, 0x9b, 0x4b, 0x0a,
	0x29, 0x37, 0x8b, 0x21, 0x3f, 0x15, 0x85, 0xe1, 0xc5, 0x92, 0xa0, 0x6e, 0x86, 0x88, 0x31, 0x22,
	0x73, 0x30, 0xf4, 0x11, 0xa4, 0x19, 0xed, 0xf4, 0x1c, 0xbb, 0x43, 0xfa, 0xb9, 0x15, 0x21, 0x6d,
	0x7b, 0x81, 0xb4, 0xd6, 0x84, 0xa6, 0x42, 0x18, 0xc1, 0x53, 0x16, 0xf4, 0x00, 0xae, 0x0d, 0xc8,
	0x4b, 0x7b, 0x30, 0x1a, 0x98, 0xb6, 0x23, 0xe4, 0xdb, 0x6c, 0x6c, 0x0e, 0xa9, 0x67, 0xbb, 0x56,
	0x2e, 0xb5, 0x1d, 0xdb, 0x49, 0xe0, 0xab, 0x8a, 0xa0, 0x16, 0xe0, 0x8f, 0x04, 0x1a, 0xdd, 0x84,
	0x64, 0x8f, 0x92, 0x3e, 0xeb, 0xe5, 0xd2, 0xdb, 0xb1, 0x9d, 0xb5, 0xdd, 0x55, 0x75, 0xf1, 0x53,
	0x01, 0xc4, 0x0a, 0x89, 0x0a, 0xa0, 0x33, 0xd2, 0xf5, 0x73, 0xb0, 0xad, 0xed, 0x64, 0x76, 0xd7,
	0x14, 0x11, 0x4f, 0x80, 0x16, 0xe9, 0x62, 0x81, 0x43, 0x8f, 0x21, 0xc3, 0xef, 0x1c, 0xf6, 0xa8,
	0x47, 0xfa, 0x7e, 0x2e, 0x23, 0x0c, 0xb9, 0xbe, 0xc0, 0x90, 0xa3, 0x29, 0x15, 0x0e, 0xb3, 0xa0,
	0x3b, 0x90, 0xf4, 0x19, 0x61, 0x23, 0x3f, 0x97, 0x15, 0xca, 0x5c, 0x5b, 0xc0, 0xdc, 0x14, 0x04,
	0x58, 0x11, 0xa2, 0x87, 0x90, 0xb1, 0x1d, 0x93, 0x79, 0xc4, 0xf1, 0x4f, 0xa8, 0x97, 0x5b, 0x15,
	0x97, 0xbe, 0xb5, 0xc8, 0x7b, 0x8a, 0x04, 0x83, 0xed, 0x4c, 0xce, 0xf9, 0x7f, 0xc6, 0x60, 0x35,
	0xe2, 0x56, 0xf4, 0x0e, 0xac, 0xf6, 0x88, 0x67, 0x7d, 0x41, 0x3c, 0x6a, 0x8a, 0xc4, 0x53, 0x49,
	0x39, 0x01, 0xd6, 0x79, 0x02, 0xee, 0xc2, 0xd6, 0x89, 0xed, 0x0d, 0x04, 0xd1, 0x29, 0xf5, 0x7c,
	0xdb, 0x75, 0xcc, 0x50, 0x96, 0x5e, 0x9e, 0x20, 0x9f, 0x4b, 0x9c, 0xe0, 0x79, 0x00, 0xd7, 0x02,
	0xc1, 0x43, 0xcf, 0xb5, 0x46, 0x1d, 0x1e, 0x7b, 0xb3, 0x4d, 0x58, 0xa7, 0x27, 0x52, 0x28, 0x8d,
	0xaf, 0x4e, 0x08, 0x8e, 0x02, 0x7c, 0x99, 0xa3, 0x79, 0xa1, 0x0c, 0x88, 0x33, 0x3a, 0x21, 0x1d,
	0x36, 0xf2, 0xa8, 0x27, 0x72, 0x24, 0x8d, 0x23, 0xb0, 0x67, 0x7a, 0x2a, 0x66, 0xc4, 0x9f, 0xe9,
	0x29, 0xdd, 0x48, 0x3c, 0xd3, 0x53, 0x09, 0x23, 0x99, 0xff, 0x7b, 0x0c, 0xd0, 0x7c, 0x06, 0xa2,
	0xc7, 0xa0, 0xb3, 0xf1, 0x50, 0xea, 0xba, 0xb6, 0x7b, 0x4b, 0xb9, 0x2a, 0x5c, 0x74, 0xc5, 0x48,
	0x35, 0x37, 0xa9, 0x77, 0x6a, 0x77, 0x68, 0x6b, 0x3c, 0xa4, 0x58, 0x70, 0xa2, 0xdb, 0x00, 0x3e,
	0x23, 0x1e, 0x33, 0x2d, 0xc2, 0xa8, 0xaa, 0xc0, 0xf9, 0x22, 0x4a, 0x0b, 0x9a, 0x0a, 0x61, 0xa2,
	0x60, 0xa9, 0x63, 0x49, 0xf2, 0xb3, 0x6a, 0x6e, 0x85, 0x3a, 0x16, 0x27, 0x0e, 0x0c, 0x89, 0x1b,
	0x5a, 0xfe, 0xab, 0x18, 0xa4, 0x26, 0xc1, 0x42, 0x0f, 0x82, 0xec, 0x88, 0x09, 0xd5, 0x0b, 0xaf,
	0x88, 0xf2, 0x6c, 0x9a, 0x5c, 0x07, 0xb0, 0x2d, 0xea, 0x30, 0xfb, 0xc4, 0xa6, 0x9e, 0x8a, 0x69,
	0x08, 0x52, 0x78, 0x08, 0x49, 0xc9, 0x81, 0x52, 0xa0, 0xd7, 0x1b, 0xf5, 0xaa, 0x71, 0x09, 0x65,
	0x60, 0xa5, 0x56, 0x2f, 0x37, 0x8e, 0xeb, 0x15, 0x23, 0x86, 0xb2, 0x90, 0x6a, 0x1c, 0xb7, 0xe4,
	0x57, 0x1c, 0xad, 0x42, 0x1a, 0x57, 0x5b, 0xc7, 0xb8, 0x5e, 0xab, 0xef, 0x1b, 0x5a, 0xfe, 0x97,
	0x1a, 0x64, 0x42, 0x49, 0x8d, 0x8e, 0x60, 0x55, 0xa8, 0x66, 0x12, 0x87, 0x51, 0xc7, 0x21, 0x4a,
	0xe1, 0xf7, 0x5e, 0x5d, 0x0b, 0xc5, 0xa7, 0x1c, 0x5b, 0x92, 0x2c, 0x38, 0xdb, 0x0b, 0x7d, 0x21,
	0x03, 0xb4, 0xee, 0xd0, 0x17, 0x8a, 0xa7, 0x30, 0x3f, 0xa2, 0x4f, 0xa2, 0xd5, 0xa6, 0x89, 0xc2,
	0xbc, 0x7d, 0xce, 0x0d, 0xa1, 0x73, 0xd5, 0x61, 0xde, 0x38, 0x5a, 0x7e, 0x37, 0x61, 0xad, 0x33,
	0xf2, 0x99, 0x3b, 0x08, 0xf4, 0xd6, 0x85, 0xa3, 0x56, 0x25, 0x54, 0xe9, 0x92, 0xff, 0x08, 0x8c,
	0x59, 0x39, 0x5c, 0xbf, 0xcf, 0xe9, 0x58, 0xf5, 0x77, 0x7e, 0x44, 0x9b, 0x90, 0x38, 0x25, 0xfd,
	0xd1, 0xa4, 0x80, 0xe4, 0xc7, 0x83, 0xf8, 0xbd, 0x58, 0xe1, 0x27, 0x90, 0x0d, 0x5b, 0xca, 0xfd,
	0x5c, 0xa9, 0x3e, 0x29, 0x1d, 0x1f, 0xb4, 0x8c, 0x4b, 0x68, 0x1d, 0x32, 0x4f, 0x6b, 0xe5, 0x2a,
	0x36, 0x8f, 0x4a, 0xf5, 0x4a, 0xc9, 0x88, 0xa1, 0x0d, 0x58, 0x95, 0x80, 0x7d, 0x5c, 0x7b, 0xf1,
	0xe2, 0xe0, 0xc7, 0x46, 0x7c, 0x4a, 0x53, 0x3e, 0x28, 0xed, 0x7d, 0x6c, 0x68, 0x08, 0x20, 0xb9,
	0x77, 0xdc, 0x6c, 0x35, 0x0e, 0x0d, 0xbd, 0x70, 0x14, 0x44, 0x32, 0x22, 0x17, 0x20, 0x59, 0xda,
	0x6b, 0xd5, 0x9e, 0x57, 0x8d, 0x98, 0x40, 0x94, 0x0e, 0x4b, 0xfb, 0x55, 0x1e, 0xca, 0x14, 0xe8,
	0x07, 0x8d, 0x66, 0xcb, 0xd0, 0xf8, 0xa9, 0x52, 0x2d, 0x55, 0x0c, 0x9d, 0x07, 0xbb, 0x52, 0x6b,
	0x96, 0xca, 0x07, 0xd5, 0x8a, 0x91, 0x28, 0xfc, 0x35, 0x09, 0x6b, 0xc2, 0x95, 0x4d, 0xda, 0xa7,
	0xa2, 0x2a, 0xd1, 0x2d, 0x48, 0x0a, 0x17, 0xcb, 0x54, 0xcc, 0xec, 0x6e, 0x2a, 0xbf, 0x3f, 0xb1,
	0xfb, 0x8c, 0x7a, 0xd2, 0xf1, 0x3e, 0x56, 0x34, 0xe8, 0x11, 0xac, 0x9d, 0x08, 0x84, 0xd9, 0x1e,
	0x9b, 0xa2, 0x8d, 0xc6, 0x05, 0xd7, 0xd5, 0x68, 0x1b, 0x0d, 0xc4, 0xe3, 0xac, 0x24, 0x2f, 0x8f,
	0x5b, 0xbc, 0xaf, 0x7e, 0x02, 0x97, 0x3b, 0x3d, 0xbb, 0x6f, 0x99, 0xe1, 0x1a, 0xf5, 0x45, 0xfd,
	0x4e, 0x07, 0x85, 0xba, 0x79, 0x8f, 0x13, 0x36, 0xc2, 0x74, 0x18, 0x75, 0xe6, 0x60, 0xe8, 0x06,
	0x64, 0x5c, 0xa7, 0x3f, 0x36, 0xe5, 0x30, 0x12, 0x61, 0x4e, 0x61, 0xe0, 0x20, 0xd9, 0x30, 0xd0,
	0x5d, 0xc8, 0x0a, 0x1c, 0x61, 0xd4, 0x32, 0x6d, 0x67, 0x41, 0xd5, 0x62, 0xe2, 0x74, 0x29, 0xce,
	0x04, 0x54, 0x35, 0x07, 0x7d, 0x0a, 0x1b, 0x5f, 0xd8, 0xac, 0x67, 0xfa, 0xb2, 0x63, 0x98, 0xa2,
	0xcd, 0x24, 0xb7, 0xb5, 0x0b, 0xb7, 0x99, 0x75, 0x2e, 0x26, 0x04, 0x40, 0x25, 0xd8, 0x14, 0x92,
	0x23, 0x93, 0xdc, 0x76, 0xd4, 0xb0, 0x9c, 0x57, 0x4b, 0xe8, 0x71, 0x30, 0x1d, 0xe2, 0x35, 0x07,
	0xed, 0x80, 0x71, 0xe2, 0x51, 0x6a, 0x32, 0xfa, 0x92, 0x99, 0x3e, 0x25, 0x5e, 0xa7, 0x27, 0x66,
	0x63, 0x1a, 0xaf, 0x71, 0x78, 0x8b, 0xbe, 0x64, 0x4d, 0x01, 0x8d, 0x8c, 0x44, 0xed, 0xec, 0x91,
	0x38, 0x1d, 0x56, 0x20, 0xc8, 0x96, 0x18, 0x56, 0x7b, 0x90, 0x9e, 0x4c, 0xaa, 0xc9, 0x7c, 0x5c,
	0xb0, 0x36, 0x04, 0x79, 0x10, 0x74, 0x33, 0x1f, 0x4f, 0xf9, 0xf2, 0xbf, 0x8f, 0x41, 0x3a, 0x40,
	0xa0, 0xbb, 0xb0, 0x15, 0xa0, 0xcc, 0x69, 0x43, 0xe3, 0x89, 0xa9, 0xed, 0xa4, 0xf1, 0x66, 0x80,
	0xac, 0x4d, 0x71, 0xe8, 0x03, 0xb8, 0x62, 0x3b, 0x9d, 0xfe, 0xc8, 0xe2, 0x4e, 0x6c, 0xbb, 0x23,
	0xc7, 0x32, 0x55, 0x3a, 0xcb, 0x06, 0xb3, 0xa9, 0xb0, 0x35, 0x89, 0x94, 0xe9, 0x8c, 0x3e, 0x84,
	0xab, 0x13, 0x2e, 0x77, 0xc4, 0x22, 0x6c, 0x9a, 0x60, 0xdb, 0x52, 0xe8, 0x86, 0xc2, 0x4a, 0xbe,
	0xc2, 0x9f, 0xe3, 0x90, 0x15, 0x47, 0x15, 0x0c, 0xf4, 0x6d, 0xc8, 0x0a, 0x3e, 0x33, 0xb2, 0x15,
	0xca, 0xa5, 0xb3, 0x2e, 0x57, 0xc3, 0x1c, 0xac, 0xa8, 0xc1, 0x2a, 0x54, 0x5a, 0xc5, 0x93, 0x4f,
	0xf4, 0x2e, 0xac, 0xf8, 0xd4, 0x61, 0x7c, 0x7d, 0xd3, 0xce, 0x18, 0x25, 0x49, 0x4e, 0x50, 0x62,
	0x17, 0xdb, 0x13, 0x11, 0xe8, 0x6d, 0xd7, 0x1a, 0x8b, 0x4c, 0xcf, 0x62, 0x71, 0x46, 0x77, 0x20,
	0x13, 0x5e, 0x17, 0x93, 0x67, 0xdc, 0x07, 0xde, 0x74, 0x47, 0xfc, 0x16, 0x40, 0x90, 0x9f, 0x96,
	0xc8, 0x4f, 0x1d, 0xa7, 0x15, 0xa4, 0x66, 0xa1, 0xf7, 0x01, 0xb8, 0x64, 0xb3, 0x3d, 0x66, 0xd4,
	0x17, 0xf9, 0x97, 0xd9, 0xdd, 0x50, 0x02, 0xcb, 0x1c, 0xd6, 0xf0, 0x9e, 0xd2, 0x97, 0x38, 0xcd,
	0x89, 0xc4, 0x77, 0xe1, 0x17, 0xb0, 0x15, 0x76, 0xde, 0xeb, 0xf6, 0xa0, 0xdb, 0x00, 0xcc, 0x1e,
	0x50, 0xd3, 0xe3, 0xf5, 0xb1, 0xc0, 0x73, 0xb2, 0x6e, 0xd2, 0x6c, 0x72, 0x94, 0x03, 0xb8, 0xf0,
	0x53, 0x58, 0xdf, 0xa7, 0x4c, 0xc8, 0xc2, 0xf4, 0xe7, 0x23, 0xea, 0xb3, 0xb9, 0xad, 0x3d, 0xb6,
	0x60, 0x6b, 0x9f, 0x8d, 0x70, 0x7c, 0x2e, 0xc2, 0xcf, 0xf4, 0x94, 0x66, 0xe8, 0x85, 0xdf, 0xe9,
	0xb0, 0x71, 0x60, 0xfb, 0x4c, 0x69, 0x7b, 0x81, 0x2b, 0xee, 0x43, 0xda, 0x9f, 0xf8, 0x42, 0xf5,
	0xd3, 0xb7, 0x5e, 0x51, 0x4b, 0x78, 0x4a, 0x8d, 0xee, 0x00, 0x0c, 0x49, 0xd7, 0x76, 0xa4, 0x70,
	0x2d, 0x12, 0x84, 0xa3, 0x00, 0x81, 0x43, 0x44, 0xe8, 0x21, 0xac, 0xf8, 0xae, 0xc7, 0xcc, 0xf6,
	0x58, 0x64, 0xd2, 0xda, 0xee, 0x3b, 0x91, 0xbb, 0xe6, 0x4c, 0x28, 0x36, 0x5d, 0x8f, 0xe1, 0x24,
	0xe7, 0x29, 0x8f, 0xf3, 0xbf, 0x8d, 0x41, 0x0a, 0x53, 0x7f, 0xe8, 0x3a, 0x3e, 0x45, 0xdf, 0x0b,
	0xc5, 0x8d, 0xcf, 0x6c, 0x34, 0xaf, 0x75, 0x10, 0xb5, 0x7b, 0xb0, 0xe2, 0x49, 0x81, 0xca, 0xc4,
	0xeb, 0xaf, 0xbe, 0x16, 0x4f, 0xc8, 0xd1, 0xbd, 0x05, 0x36, 0xe6, 0xe6, 0x6c, 0x2c, 0x62, 0xea,
	0x8f, 0xfa, 0x2c, 0x6c, 0x6a, 0xe1, 0xd7, 0x31, 0xd0, 0xb9, 0xf6, 0xe8, 0x1a, 0x6c, 0x1d, 0x94,
	0x9a, 0x2d, 0xf3, 0xb0, 0xda, 0x6c, 0x96, 0xf6, 0xab, 0x26, 0xae, 0xee, 0x55, 0x6b, 0xcf, 0xab,
	0x15, 0xe3, 0x12, 0x2a, 0xc0, 0xf5, 0x85, 0x28, 0xb3, 0x56, 0x7f, 0x5e, 0xc5, 0xad, 0x2a, 0xdf,
	0x98, 0x36, 0xc1, 0x38, 0x6c, 0x54, 0xaa, 0x87, 0x66, 0xfd, 0xf8, 0x90, 0x0f, 0xeb, 0x52, 0x73,
	0xcf, 0x88, 0xa3, 0x2d, 0xd8, 0x88, 0x40, 0x2b, 0xd5, 0xe6, 0x9e, 0xa1, 0xa1, 0x35, 0x80, 0x66,
	0xab, 0xd4, 0x3a, 0x6e, 0x0a, 0x32, 0x9d, 0x8f, 0x78, 0xf5, 0x2d, 0x08, 0xd4, 0x4a, 0x5b, 0xf8,
	0x77, 0x1c, 0x72, 0x81, 0xd1, 0xaa, 0x22, 0x2e, 0x94, 0x35, 0x8f, 0xe7, 0xb3, 0x66, 0xc1, 0x1a,
	0x39, 0x5b, 0x6b, 0x6f, 0x96, 0x3c, 0xf9, 0xbf, 0x84, 0xc3, 0xff, 0x03, 0x48, 0xa9, 0x76, 0x30,
	0x49, 0x80, 0x6b, 0x67, 0x2a, 0x80, 0x03, 0x52, 0xf4, 0xa3, 0xd9, 0x4c, 0xb8, 0xb9, 0x38, 0x13,
	0x66, 0x9c, 0xf2, 0x75, 0x24, 0xc4, 0x6f, 0x34, 0xb8, 0xac, 0xc4, 0xee, 0xb9, 0x23, 0x87, 0x7d,
	0xb3, 0xfe, 0xde, 0x01, 0x43, 0x34, 0xae, 0x2f, 0x5d, 0x87, 0x9a, 0xee, 0xc9, 0x89, 0x4f, 0x65,
	0xe3, 0x4f, 0xe0, 0x35, 0x0e, 0x7f, 0xe1, 0x3a, 0xb4, 0x21, 0xa0, 0xf9, 0xff, 0x84, 0xdd, 0x6c,
	0xc3, 0xd6, 0xa4, 0x0f, 0x77, 0xb8, 0xd2, 0xfc, 0x39, 0x6c, 0x5a, 0x64, 0xac, 0x7c, 0xfe, 0x61,
	0x54, 0x89, 0x79, 0xeb, 0x8a, 0x13, 0x49, 0x51, 0x24, 0x1a, 0x84, 0xbe, 0x8e, 0xa8, 0x57, 0x21,
	0x63, 0xf4, 0x60, 0x36, 0x34, 0xdb, 0xe7, 0x09, 0x0f, 0xa2, 0x92, 0xaf, 0x42, 0x36, 0x8c, 0x47,
	0x37, 0x40, 0x17, 0xaf, 0x24, 0xd9, 0xd2, 0x33, 0x4a, 0x10, 0x7f, 0x17, 0x61, 0x81, 0xe0, 0x6b,
	0xb5, 0xb0, 0x47, 0x5c, 0x95, 0xc0, 0xf2, 0xa3, 0x30, 0x02, 0x84, 0x29, 0x7f, 0x81, 0xfe, 0x0f,
	0x3a, 0xf5, 0xa2, 0x9f, 0x60, 0xe4, 0x3b, 0xb3, 0xf0, 0x2b, 0x0d, 0xae, 0x1c, 0x0f, 0xb9, 0x5e,
	0xe2, 0x5e, 0xbe, 0xad, 0x5e, 0xe4, 0xee, 0x0f, 0x20, 0x39, 0x12, 0xdc, 0x2a, 0x1d, 0xdf, 0x0e,
	0xed, 0xc3, 0x52, 0x2c, 0x97, 0xf8, 0xc4, 0xf5, 0x6a, 0x8c, 0xf7, 0x44, 0x49, 0x1b, 0x6d, 0xfc,
	0x89, 0x37, 0x68, 0xfc, 0xc9, 0x65, 0x6a, 0xf7, 0x0f, 0xaf, 0xdb, 0xba, 0x1f, 0xcd, 0x66, 0x45,
	0x74, 0x62, 0x2c, 0x76, 0xdb, 0xd7, 0x51, 0xae, 0x5f, 0x25, 0x21, 0x27, 0xa5, 0x87, 0x7f, 0x67,
	0xf9, 0x66, 0x26, 0xeb, 0xdc, 0xc3, 0x57, 0x7b, 0xd3, 0x87, 0xef, 0x77, 0xe4, 0xc3, 0x57, 0x8f,
	0xac, 0x38, 0xd2, 0xbc, 0xb2, 0xeb, 0xf6, 0x29, 0x71, 0xe4, 0x73, 0xb8, 0x0a, 0x57, 0x7a, 0xc4,
	0xb3, 0x3a, 0xae, 0x45, 0x2d, 0xb3, 0x3b, 0xf4, 0xcd, 0x60, 0xf3, 0x4b, 0x2c, 0xde, 0xfc, 0x36,
	0x03, 0xf2, 0xfd, 0xa1, 0x3f, 0x81, 0xa2, 0x36, 0xac, 0x13, 0xcb, 0x32, 0xc3, 0x2f, 0xeb, 0xa4,
	0x08, 0xf5, 0xfd, 0x05, 0xd1, 0x9b, 0xf7, 0x6f, 0xb1, 0x64, 0x59, 0x73, 0x6f, 0xec, 0x35, 0x12,
	0x01, 0xa2, 0xef, 0x03, 0xf2, 0xe8, 0xc0, 0x3d, 0xa5, 0x91, 0x6b, 0x56, 0xc4, 0xbe, 0xbe, 0x21,
	0x31, 0x47, 0x91, 0x1f, 0xc5, 0xc2, 0x99, 0x90, 0x5e, 0x66, 0x5b, 0x99, 0x7f, 0xc8, 0xc3, 0xa2,
	0x87, 0xfc, 0x1f, 0xc3, 0xb9, 0x1d, 0x1a, 0x30, 0xb1, 0x05, 0x03, 0xe6, 0x2c, 0x8b, 0xa7, 0x19,
	0x3b, 0x2d, 0x8e, 0xf8, 0x12, 0x7b, 0xcd, 0x6b, 0x66, 0x77, 0xbe, 0x04, 0x97, 0x17, 0xf8, 0xf8,
	0x22, 0xbf, 0x3f, 0x3c, 0xd3, 0x53, 0x29, 0x23, 0x5d, 0xf8, 0x97, 0x06, 0xe8, 0xc0, 0xee, 0x50,
	0xc7, 0xa7, 0x1f, 0xd3, 0xf1, 0xff, 0xef, 0xea, 0x99, 0xff, 0x53, 0x3c, 0x14, 0xa5, 0xfb, 0xb3,
	0x51, 0xba, 0x31, 0xb3, 0x06, 0xcc, 0x1a, 0x34, 0x8d, 0xcf, 0x67, 0x90, 0xed, 0x4b, 0xb4, 0xf9,
	0x39, 0x1d, 0x4f, 0xa2, 0x74, 0xef, 0x1c, 0xfe, 0xd0, 0x1c, 0xe4, 0x14, 0x53, 0x02, 0x9c, 0xe9,
	0x4f, 0x89, 0xdf, 0x20, 0xa0, 0xc7, 0xb0, 0x3e, 0x23, 0x79, 0x99, 0xf7, 0xe1, 0x0d, 0xc8, 0x84,
	0x8c, 0x99, 0xfc, 0xa0, 0x37, 0xd5, 0x68, 0xf7, 0x6f, 0x09, 0xf5, 0xe8, 0x54, 0x3f, 0x23, 0xa0,
	0x1f, 0x82, 0xb6, 0x4f, 0x19, 0x7a, 0x3b, 0x62, 0xef, 0xcc, 0xdb, 0x26, 0xbf, 0x20, 0x67, 0x51,
	0x03, 0x74, 0xbe, 0x5d, 0xa1, 0x73, 0x56, 0xef, 0xfc, 0x77, 0xcf, 0x79, 0x11, 0x04, 0x31, 0x24,
	0x90, 0x9a, 0x6c, 0x69, 0x68, 0xb9, 0x2d, 0x2e, 0x5f, 0x5c, 0x8a, 0x6c, 0x7a, 0xc5, 0x67, 0x33,
	0x6b, 0xc5, 0xb9, 0x1b, 0x49, 0xfe, 0xdd, 0xa5, 0x17, 0x22, 0xf4, 0x08, 0x92, 0x72, 0xd9, 0x40,
	0xd1, 0xe4, 0x9b, 0xdf, 0x40, 0x16, 0xfa, 0xd3, 0x04, 0x98, 0x0e, 0x77, 0xb4, 0xcc, 0x54, 0xcc,
	0xdf, 0x5a, 0x82, 0x68, 0xaa, 0xdf, 0xcf, 0x60, 0x63, 0xae, 0x5b, 0xa1, 0xe5, 0xba, 0xd9, 0x8c,
	0xa3, 0xcf, 0x6c, 0xf3, 0xc1, 0x5d, 0x9f, 0x42, 0x26, 0x54, 0x33, 0xe8, 0xbc, 0x6a, 0xcc, 0xef,
	0x2c, 0x5b, 0x6e, 0xe5, 0xf7, 0xe1, 0xad, 0x6e, 0xdf, 0x6d, 0x93, 0xbe, 0xe2, 0x20, 0x43, 0xbb,
	0xd8, 0xf5, 0x86, 0x1d, 0xc9, 0x5a, 0x4e, 0x09, 0xfb, 0x4b, 0x43, 0xfb, 0xe8, 0xd2, 0x8b, 0x84,
	0xa0, 0x68, 0x27, 0xc5, 0xff, 0x6e, 0x77, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x51, 0xc8, 0xd0,
	0x7e, 0xbe, 0x1b, 0x00, 0x00,
}
