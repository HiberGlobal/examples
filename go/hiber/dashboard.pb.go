// Code generated by protoc-gen-go.
// source: dashboard.proto
// DO NOT EDIT!

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Get the data for the dashboard. This includes map data, message count and relevant status events.
// MapSelection is used for the map data, as used in the MapService.
// ModemMessageSelection is used to filter the messages used for the count by day.
type DashboardRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	// * for ground stations and map blocks
	Selection *MapSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	// * for modem messages
	MessageCountSelection *ModemMessageSelection `protobuf:"bytes,3,opt,name=message_count_selection,json=messageCountSelection" json:"message_count_selection,omitempty"`
	// * for events, only used when any value is set
	EventSelection *EventSelection `protobuf:"bytes,4,opt,name=event_selection,json=eventSelection" json:"event_selection,omitempty"`
	// * for message count, day grouping
	TimeZoneOffset int32 `protobuf:"varint,5,opt,name=time_zone_offset,json=timeZoneOffset" json:"time_zone_offset,omitempty"`
}

func (m *DashboardRequest) Reset()                    { *m = DashboardRequest{} }
func (m *DashboardRequest) String() string            { return proto.CompactTextString(m) }
func (*DashboardRequest) ProtoMessage()               {}
func (*DashboardRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *DashboardRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *DashboardRequest) GetSelection() *MapSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *DashboardRequest) GetMessageCountSelection() *ModemMessageSelection {
	if m != nil {
		return m.MessageCountSelection
	}
	return nil
}

func (m *DashboardRequest) GetEventSelection() *EventSelection {
	if m != nil {
		return m.EventSelection
	}
	return nil
}

func (m *DashboardRequest) GetTimeZoneOffset() int32 {
	if m != nil {
		return m.TimeZoneOffset
	}
	return 0
}

type DashboardRequest_Response struct {
	// list of ground stations and their location
	GroundStations []*GroundStation `protobuf:"bytes,1,rep,name=ground_stations,json=groundStations" json:"ground_stations,omitempty"`
	// list of map blocks and their modem count, for density map
	MapBlocks          []*MapBlock                                  `protobuf:"bytes,2,rep,name=map_blocks,json=mapBlocks" json:"map_blocks,omitempty"`
	MessageCountPerDay []*MessageCountRequest_Response_MessageCount `protobuf:"bytes,3,rep,name=message_count_per_day,json=messageCountPerDay" json:"message_count_per_day,omitempty"`
	// counts of the number of modems with warning and errors
	ModemWarningCount int32 `protobuf:"varint,4,opt,name=modem_warning_count,json=modemWarningCount" json:"modem_warning_count,omitempty"`
	ModemErrorCount   int32 `protobuf:"varint,5,opt,name=modem_error_count,json=modemErrorCount" json:"modem_error_count,omitempty"`
	// returns the latest 20 matching events, or an empty list if the event selection wasn't set
	Events  []*Event          `protobuf:"bytes,6,rep,name=events" json:"events,omitempty"`
	Request *DashboardRequest `protobuf:"bytes,7,opt,name=request" json:"request,omitempty"`
}

func (m *DashboardRequest_Response) Reset()                    { *m = DashboardRequest_Response{} }
func (m *DashboardRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*DashboardRequest_Response) ProtoMessage()               {}
func (*DashboardRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

func (m *DashboardRequest_Response) GetGroundStations() []*GroundStation {
	if m != nil {
		return m.GroundStations
	}
	return nil
}

func (m *DashboardRequest_Response) GetMapBlocks() []*MapBlock {
	if m != nil {
		return m.MapBlocks
	}
	return nil
}

func (m *DashboardRequest_Response) GetMessageCountPerDay() []*MessageCountRequest_Response_MessageCount {
	if m != nil {
		return m.MessageCountPerDay
	}
	return nil
}

func (m *DashboardRequest_Response) GetModemWarningCount() int32 {
	if m != nil {
		return m.ModemWarningCount
	}
	return 0
}

func (m *DashboardRequest_Response) GetModemErrorCount() int32 {
	if m != nil {
		return m.ModemErrorCount
	}
	return 0
}

func (m *DashboardRequest_Response) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *DashboardRequest_Response) GetRequest() *DashboardRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func init() {
	proto.RegisterType((*DashboardRequest)(nil), "hiber.dashboard.DashboardRequest")
	proto.RegisterType((*DashboardRequest_Response)(nil), "hiber.dashboard.DashboardRequest.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DashboardService service

type DashboardServiceClient interface {
	Dashboard(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (*DashboardRequest_Response, error)
}

type dashboardServiceClient struct {
	cc *grpc.ClientConn
}

func NewDashboardServiceClient(cc *grpc.ClientConn) DashboardServiceClient {
	return &dashboardServiceClient{cc}
}

func (c *dashboardServiceClient) Dashboard(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (*DashboardRequest_Response, error) {
	out := new(DashboardRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.dashboard.DashboardService/Dashboard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DashboardService service

type DashboardServiceServer interface {
	Dashboard(context.Context, *DashboardRequest) (*DashboardRequest_Response, error)
}

func RegisterDashboardServiceServer(s *grpc.Server, srv DashboardServiceServer) {
	s.RegisterService(&_DashboardService_serviceDesc, srv)
}

func _DashboardService_Dashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).Dashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.dashboard.DashboardService/Dashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).Dashboard(ctx, req.(*DashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DashboardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.dashboard.DashboardService",
	HandlerType: (*DashboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dashboard",
			Handler:    _DashboardService_Dashboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dashboard.proto",
}

func init() { proto.RegisterFile("dashboard.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0x3d, 0x6f, 0xdb, 0x30,
	0x10, 0xad, 0xe3, 0xca, 0xa9, 0xe9, 0xc0, 0x4a, 0x19, 0x04, 0x11, 0xdc, 0xa1, 0xae, 0x27, 0x21,
	0x83, 0x06, 0x17, 0x2d, 0x0a, 0x74, 0x8a, 0xeb, 0xa0, 0x93, 0xd1, 0x80, 0x1e, 0x0a, 0x78, 0x11,
	0x28, 0xe9, 0xa2, 0x08, 0xb5, 0x48, 0x96, 0x94, 0x53, 0x24, 0xff, 0xaa, 0x3f, 0xac, 0xff, 0xa1,
	0xd0, 0x51, 0x9f, 0xc9, 0x90, 0x45, 0xf0, 0xbd, 0x7b, 0xef, 0xf1, 0xf8, 0x8e, 0x26, 0x6e, 0xc2,
	0xcd, 0x5d, 0x24, 0xb9, 0x4e, 0x02, 0xa5, 0x65, 0x21, 0xa9, 0x7b, 0x97, 0x45, 0xa0, 0x83, 0x06,
	0x9e, 0x8d, 0x73, 0xae, 0x6c, 0x6f, 0x36, 0xc9, 0x65, 0x02, 0x79, 0x5d, 0xc0, 0x3d, 0x88, 0xc2,
	0x16, 0x8b, 0x7f, 0x0e, 0x39, 0x5d, 0xd7, 0x12, 0x06, 0xbf, 0x0f, 0x60, 0x0a, 0xba, 0x20, 0x27,
	0x52, 0xa7, 0x5c, 0x64, 0x8f, 0xbc, 0xc8, 0xa4, 0xf0, 0x06, 0xf3, 0x81, 0x3f, 0x66, 0x3d, 0x8c,
	0x7e, 0x22, 0x63, 0x03, 0x7b, 0x88, 0x91, 0x70, 0x34, 0x1f, 0xf8, 0x93, 0xe5, 0x45, 0x60, 0x47,
	0x28, 0xcf, 0xdd, 0x70, 0xb5, 0xad, 0xdb, 0xac, 0x65, 0xd2, 0x1d, 0xb9, 0xc8, 0xc1, 0x18, 0x9e,
	0x42, 0x18, 0xcb, 0x83, 0x28, 0xc2, 0xd6, 0x64, 0x88, 0x26, 0x8b, 0xda, 0x04, 0x27, 0xde, 0x94,
	0xdf, 0x8d, 0x15, 0xb4, 0x7e, 0xe7, 0x95, 0xc5, 0xb7, 0xd2, 0xa1, 0x81, 0xe9, 0x9a, 0xb8, 0x78,
	0xb5, 0x8e, 0xe7, 0x6b, 0xf4, 0x7c, 0x57, 0x79, 0xda, 0x8b, 0x5f, 0x97, 0xdf, 0xd6, 0x6c, 0x0a,
	0xbd, 0x9a, 0xfa, 0xe4, 0xb4, 0xc8, 0x72, 0x08, 0x1f, 0xa5, 0x80, 0x50, 0xde, 0xde, 0x1a, 0x28,
	0x3c, 0x67, 0x3e, 0xf0, 0x1d, 0x36, 0x2d, 0xf1, 0x9d, 0x14, 0xf0, 0x03, 0xd1, 0xd9, 0xdf, 0x21,
	0x79, 0xc3, 0xc0, 0x28, 0x29, 0x0c, 0xd0, 0x2b, 0xe2, 0xa6, 0x5a, 0x1e, 0x44, 0x12, 0x9a, 0x02,
	0x13, 0x32, 0xde, 0x60, 0x3e, 0xf4, 0x27, 0x4b, 0xaf, 0x93, 0xca, 0x77, 0x64, 0x6c, 0x2d, 0x81,
	0x4d, 0xd3, 0x6e, 0x69, 0xe8, 0x92, 0x90, 0x9c, 0xab, 0x30, 0xda, 0xcb, 0xf8, 0x97, 0xf1, 0x8e,
	0x50, 0x7d, 0xd6, 0xcf, 0x74, 0x55, 0xf6, 0x58, 0xb9, 0x59, 0xfc, 0x65, 0x68, 0x46, 0xce, 0xfb,
	0x79, 0x2a, 0xd0, 0x61, 0xc2, 0x1f, 0xbc, 0x21, 0xca, 0x3f, 0xf7, 0xd3, 0xec, 0xc4, 0x56, 0xed,
	0x3a, 0xa8, 0x2f, 0xd0, 0x6f, 0xd2, 0x6e, 0xc2, 0x37, 0xa0, 0xd7, 0xfc, 0x81, 0x06, 0xe4, 0x0c,
	0x6d, 0xc2, 0x3f, 0x5c, 0x8b, 0x4c, 0xa4, 0xf6, 0x40, 0x8c, 0xd8, 0x61, 0x6f, 0xb1, 0xf5, 0xd3,
	0x76, 0x50, 0x45, 0x2f, 0x89, 0x05, 0x43, 0xd0, 0x5a, 0xea, 0x8a, 0x6d, 0x93, 0x74, 0xb1, 0x71,
	0x5d, 0xe2, 0x35, 0x77, 0x84, 0x6b, 0x30, 0xde, 0x08, 0xe7, 0xa6, 0xcf, 0x37, 0xc6, 0x2a, 0x06,
	0xfd, 0x4a, 0x8e, 0xb5, 0x1d, 0xde, 0x3b, 0xc6, 0xf5, 0x7e, 0x08, 0x9e, 0x3c, 0xfd, 0xe0, 0xe9,
	0x8b, 0x66, 0xb5, 0x62, 0x29, 0x3a, 0xcf, 0x7d, 0x0b, 0xfa, 0x3e, 0x8b, 0x81, 0xee, 0xc8, 0xb8,
	0xc1, 0xe8, 0xcb, 0x66, 0xb3, 0xcb, 0x17, 0x29, 0x4d, 0xaa, 0xab, 0x2f, 0xe4, 0x7d, 0xba, 0x97,
	0x11, 0xdf, 0x57, 0x1a, 0xae, 0xb2, 0x20, 0xd5, 0x2a, 0x6e, 0xc5, 0xab, 0x93, 0x46, 0x7d, 0xa5,
	0xb2, 0x9b, 0x57, 0x3b, 0x07, 0x99, 0xd1, 0x08, 0xff, 0xa0, 0x1f, 0xff, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x3e, 0x30, 0x48, 0x38, 0xe9, 0x03, 0x00, 0x00,
}
