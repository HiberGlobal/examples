// Code generated by protoc-gen-go. DO NOT EDIT.
// source: satellite.proto

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SatelliteInformation struct {
	Id         int32      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name       string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	LaunchedAt *Timestamp `protobuf:"bytes,3,opt,name=launched_at,json=launchedAt" json:"launched_at,omitempty"`
	Tle        []string   `protobuf:"bytes,4,rep,name=tle" json:"tle,omitempty"`
}

func (m *SatelliteInformation) Reset()                    { *m = SatelliteInformation{} }
func (m *SatelliteInformation) String() string            { return proto.CompactTextString(m) }
func (*SatelliteInformation) ProtoMessage()               {}
func (*SatelliteInformation) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *SatelliteInformation) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SatelliteInformation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SatelliteInformation) GetLaunchedAt() *Timestamp {
	if m != nil {
		return m.LaunchedAt
	}
	return nil
}

func (m *SatelliteInformation) GetTle() []string {
	if m != nil {
		return m.Tle
	}
	return nil
}

type SatellitePath struct {
	SatelliteId int32                     `protobuf:"varint,1,opt,name=satellite_id,json=satelliteId" json:"satellite_id,omitempty"`
	Name        string                    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Positions   []*SatellitePath_Position `protobuf:"bytes,3,rep,name=positions" json:"positions,omitempty"`
}

func (m *SatellitePath) Reset()                    { *m = SatellitePath{} }
func (m *SatellitePath) String() string            { return proto.CompactTextString(m) }
func (*SatellitePath) ProtoMessage()               {}
func (*SatellitePath) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *SatellitePath) GetSatelliteId() int32 {
	if m != nil {
		return m.SatelliteId
	}
	return 0
}

func (m *SatellitePath) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SatellitePath) GetPositions() []*SatellitePath_Position {
	if m != nil {
		return m.Positions
	}
	return nil
}

type SatellitePath_Position struct {
	Time     *Timestamp `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Location *Location  `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
}

func (m *SatellitePath_Position) Reset()                    { *m = SatellitePath_Position{} }
func (m *SatellitePath_Position) String() string            { return proto.CompactTextString(m) }
func (*SatellitePath_Position) ProtoMessage()               {}
func (*SatellitePath_Position) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1, 0} }

func (m *SatellitePath_Position) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *SatellitePath_Position) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type SatelliteSelection struct {
	Ids    []int32 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"`
	Search string  `protobuf:"bytes,2,opt,name=search" json:"search,omitempty"`
}

func (m *SatelliteSelection) Reset()                    { *m = SatelliteSelection{} }
func (m *SatelliteSelection) String() string            { return proto.CompactTextString(m) }
func (*SatelliteSelection) ProtoMessage()               {}
func (*SatelliteSelection) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

func (m *SatelliteSelection) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *SatelliteSelection) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

type ListSatellitesRequest struct {
	Selection *SatelliteSelection `protobuf:"bytes,1,opt,name=selection" json:"selection,omitempty"`
}

func (m *ListSatellitesRequest) Reset()                    { *m = ListSatellitesRequest{} }
func (m *ListSatellitesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSatellitesRequest) ProtoMessage()               {}
func (*ListSatellitesRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

func (m *ListSatellitesRequest) GetSelection() *SatelliteSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

type ListSatellitesRequest_Response struct {
	Satellites []*SatelliteInformation `protobuf:"bytes,1,rep,name=satellites" json:"satellites,omitempty"`
	Request    *ListSatellitesRequest  `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *ListSatellitesRequest_Response) Reset()         { *m = ListSatellitesRequest_Response{} }
func (m *ListSatellitesRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListSatellitesRequest_Response) ProtoMessage()    {}
func (*ListSatellitesRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{3, 0}
}

func (m *ListSatellitesRequest_Response) GetSatellites() []*SatelliteInformation {
	if m != nil {
		return m.Satellites
	}
	return nil
}

func (m *ListSatellitesRequest_Response) GetRequest() *ListSatellitesRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type ListSatellitesPathRequest struct {
	Selection *SatelliteSelection `protobuf:"bytes,1,opt,name=selection" json:"selection,omitempty"`
}

func (m *ListSatellitesPathRequest) Reset()                    { *m = ListSatellitesPathRequest{} }
func (m *ListSatellitesPathRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSatellitesPathRequest) ProtoMessage()               {}
func (*ListSatellitesPathRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{4} }

func (m *ListSatellitesPathRequest) GetSelection() *SatelliteSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

type ListSatellitesPathRequest_Response struct {
	SatellitePath []*SatellitePath           `protobuf:"bytes,1,rep,name=satellite_path,json=satellitePath" json:"satellite_path,omitempty"`
	Request       *ListSatellitesPathRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *ListSatellitesPathRequest_Response) Reset()         { *m = ListSatellitesPathRequest_Response{} }
func (m *ListSatellitesPathRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListSatellitesPathRequest_Response) ProtoMessage()    {}
func (*ListSatellitesPathRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{4, 0}
}

func (m *ListSatellitesPathRequest_Response) GetSatellitePath() []*SatellitePath {
	if m != nil {
		return m.SatellitePath
	}
	return nil
}

func (m *ListSatellitesPathRequest_Response) GetRequest() *ListSatellitesPathRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func init() {
	proto.RegisterType((*SatelliteInformation)(nil), "hiber.satellite.SatelliteInformation")
	proto.RegisterType((*SatellitePath)(nil), "hiber.satellite.SatellitePath")
	proto.RegisterType((*SatellitePath_Position)(nil), "hiber.satellite.SatellitePath.Position")
	proto.RegisterType((*SatelliteSelection)(nil), "hiber.satellite.SatelliteSelection")
	proto.RegisterType((*ListSatellitesRequest)(nil), "hiber.satellite.ListSatellitesRequest")
	proto.RegisterType((*ListSatellitesRequest_Response)(nil), "hiber.satellite.ListSatellitesRequest.Response")
	proto.RegisterType((*ListSatellitesPathRequest)(nil), "hiber.satellite.ListSatellitesPathRequest")
	proto.RegisterType((*ListSatellitesPathRequest_Response)(nil), "hiber.satellite.ListSatellitesPathRequest.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SatelliteService service

type SatelliteServiceClient interface {
	List(ctx context.Context, in *ListSatellitesRequest, opts ...grpc.CallOption) (*ListSatellitesRequest_Response, error)
	Path(ctx context.Context, in *ListSatellitesPathRequest, opts ...grpc.CallOption) (*ListSatellitesPathRequest_Response, error)
}

type satelliteServiceClient struct {
	cc *grpc.ClientConn
}

func NewSatelliteServiceClient(cc *grpc.ClientConn) SatelliteServiceClient {
	return &satelliteServiceClient{cc}
}

func (c *satelliteServiceClient) List(ctx context.Context, in *ListSatellitesRequest, opts ...grpc.CallOption) (*ListSatellitesRequest_Response, error) {
	out := new(ListSatellitesRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.satellite.SatelliteService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *satelliteServiceClient) Path(ctx context.Context, in *ListSatellitesPathRequest, opts ...grpc.CallOption) (*ListSatellitesPathRequest_Response, error) {
	out := new(ListSatellitesPathRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.satellite.SatelliteService/Path", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SatelliteService service

type SatelliteServiceServer interface {
	List(context.Context, *ListSatellitesRequest) (*ListSatellitesRequest_Response, error)
	Path(context.Context, *ListSatellitesPathRequest) (*ListSatellitesPathRequest_Response, error)
}

func RegisterSatelliteServiceServer(s *grpc.Server, srv SatelliteServiceServer) {
	s.RegisterService(&_SatelliteService_serviceDesc, srv)
}

func _SatelliteService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSatellitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SatelliteServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.satellite.SatelliteService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SatelliteServiceServer).List(ctx, req.(*ListSatellitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SatelliteService_Path_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSatellitesPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SatelliteServiceServer).Path(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.satellite.SatelliteService/Path",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SatelliteServiceServer).Path(ctx, req.(*ListSatellitesPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SatelliteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.satellite.SatelliteService",
	HandlerType: (*SatelliteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SatelliteService_List_Handler,
		},
		{
			MethodName: "Path",
			Handler:    _SatelliteService_Path_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "satellite.proto",
}

func init() { proto.RegisterFile("satellite.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcd, 0x8e, 0xd3, 0x30,
	0x14, 0x85, 0x71, 0x93, 0x0e, 0xed, 0xcd, 0xcc, 0xb4, 0xb2, 0x00, 0x85, 0x2c, 0x20, 0x84, 0xbf,
	0x08, 0xa4, 0x20, 0x32, 0x1b, 0x56, 0x88, 0x8e, 0x60, 0x31, 0xd2, 0x2c, 0x2a, 0x0f, 0x2b, 0x24,
	0x54, 0xb9, 0xa9, 0x69, 0x2c, 0xe5, 0x8f, 0xd8, 0xc3, 0x96, 0x87, 0x60, 0xc1, 0xcb, 0xf1, 0x08,
	0x2c, 0x58, 0xb2, 0x44, 0x71, 0x1d, 0xb7, 0x19, 0x5a, 0x28, 0x12, 0x3b, 0xd7, 0x3e, 0xe7, 0xde,
	0xf3, 0xdd, 0x5e, 0x05, 0x46, 0x82, 0x4a, 0x96, 0x65, 0x5c, 0xb2, 0xa8, 0xaa, 0x4b, 0x59, 0xe2,
	0x51, 0xca, 0xe7, 0xac, 0x8e, 0xcc, 0xb5, 0x07, 0x73, 0x2a, 0xf4, 0x63, 0xf0, 0x19, 0x6e, 0x5c,
	0xb4, 0x0f, 0x67, 0xc5, 0x87, 0xb2, 0xce, 0xa9, 0xe4, 0x65, 0x81, 0x8f, 0xa1, 0xc7, 0x17, 0x2e,
	0xf2, 0x51, 0xd8, 0x27, 0x3d, 0xbe, 0xc0, 0x18, 0xec, 0x82, 0xe6, 0xcc, 0xed, 0xf9, 0x28, 0x1c,
	0x12, 0x75, 0xc6, 0xcf, 0xc1, 0xc9, 0xe8, 0x65, 0x91, 0xa4, 0x6c, 0x31, 0xa3, 0xd2, 0xb5, 0x7c,
	0x14, 0x3a, 0xf1, 0x38, 0x5a, 0xb5, 0x7b, 0xcb, 0x73, 0x26, 0x24, 0xcd, 0x2b, 0x02, 0xad, 0x68,
	0x22, 0xf1, 0x18, 0x2c, 0x99, 0x31, 0xd7, 0xf6, 0xad, 0x70, 0x48, 0x9a, 0x63, 0xf0, 0x1d, 0xc1,
	0x91, 0x49, 0x30, 0xa5, 0x32, 0xc5, 0xf7, 0xe0, 0xd0, 0x64, 0x9d, 0x99, 0x10, 0x8e, 0xb9, 0x3b,
	0xdb, 0x9e, 0xe6, 0x0d, 0x0c, 0xab, 0x52, 0xf0, 0x26, 0xbd, 0x70, 0x2d, 0xdf, 0x0a, 0x9d, 0xf8,
	0x71, 0x74, 0x05, 0x3d, 0xea, 0x74, 0x8a, 0xa6, 0x5a, 0x4f, 0xd6, 0x4e, 0xef, 0x3d, 0x0c, 0xda,
	0x6b, 0xfc, 0x00, 0x6c, 0xc9, 0x73, 0xa6, 0x12, 0x6c, 0x23, 0x53, 0xaf, 0xf8, 0x29, 0x0c, 0xb2,
	0x32, 0x51, 0x63, 0x53, 0x81, 0x9c, 0x78, 0xa4, 0x95, 0xe7, 0xfa, 0x9a, 0x18, 0x41, 0xf0, 0x12,
	0xb0, 0xc9, 0x70, 0xc1, 0x32, 0x96, 0xa8, 0x46, 0x63, 0xb0, 0xf8, 0x42, 0xb8, 0xc8, 0xb7, 0xc2,
	0x3e, 0x69, 0x8e, 0xf8, 0x16, 0x1c, 0x08, 0x46, 0xeb, 0x24, 0xd5, 0x8c, 0xfa, 0x57, 0xf0, 0x03,
	0xc1, 0xcd, 0x73, 0x2e, 0xa4, 0x29, 0x22, 0x08, 0xfb, 0x78, 0xc9, 0x84, 0xc4, 0x13, 0x18, 0x8a,
	0xb6, 0xa0, 0x4e, 0x7c, 0x7f, 0x37, 0xbf, 0xe9, 0x4d, 0xd6, 0x2e, 0xef, 0x0b, 0x82, 0x01, 0x61,
	0xa2, 0x2a, 0x0b, 0xd1, 0xcc, 0x13, 0x8c, 0x6f, 0x15, 0xcd, 0x89, 0x1f, 0xee, 0x2e, 0xb8, 0xb1,
	0x3c, 0x64, 0xc3, 0x88, 0x5f, 0xc1, 0xf5, 0x7a, 0x95, 0x50, 0x0f, 0xe7, 0xd1, 0x6f, 0x35, 0xb6,
	0xf2, 0x90, 0xd6, 0x16, 0xfc, 0x44, 0x70, 0xbb, 0x2b, 0x69, 0xfe, 0xbc, 0xff, 0x88, 0xfd, 0xb5,
	0x8b, 0x7d, 0xbc, 0xde, 0xbe, 0x8a, 0xca, 0x54, 0xa3, 0xdf, 0xf9, 0xf3, 0x2e, 0x91, 0x23, 0xd1,
	0x59, 0xe2, 0xd7, 0x57, 0xb1, 0x9f, 0xfc, 0x05, 0x7b, 0x83, 0xc9, 0xa0, 0xc7, 0xdf, 0x10, 0x8c,
	0x37, 0xb2, 0xd7, 0x9f, 0x78, 0xc2, 0xf0, 0x0c, 0xec, 0xc6, 0x8a, 0xf7, 0x1c, 0xa4, 0xf7, 0x6c,
	0x3f, 0x5d, 0x64, 0x46, 0xb0, 0x04, 0x5b, 0x31, 0xfc, 0x43, 0x64, 0xef, 0x64, 0x7f, 0xad, 0x69,
	0x74, 0xfa, 0x02, 0xee, 0x2e, 0xb3, 0x72, 0x4e, 0x33, 0x6d, 0xa6, 0x15, 0x8f, 0x96, 0x75, 0x95,
	0xac, 0xab, 0x9c, 0x1e, 0x9a, 0x12, 0x93, 0x8a, 0x4f, 0xaf, 0xbd, 0xeb, 0x2b, 0xe5, 0xfc, 0x40,
	0x7d, 0xbd, 0x4e, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x79, 0xd3, 0x3d, 0x6c, 0xed, 0x04, 0x00,
	0x00,
}
