// Code generated by protoc-gen-go.
// source: testing.proto
// DO NOT EDIT!

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Push any number of modem messages. These are marked as test messages, which means they will be treated
// differently in a few places (i.e. message sequence, to avoid errors on the next real messages).
// The message is handled like a real message, it's encrypted as if sent from a modem, then goes through
// the decryption process and all relevant events are triggered (including webhooks calls caused by the events).
type PushModemMessagesRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                                    `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Messages     []*PushModemMessagesRequest_MessageToPush `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
}

func (m *PushModemMessagesRequest) Reset()                    { *m = PushModemMessagesRequest{} }
func (m *PushModemMessagesRequest) String() string            { return proto.CompactTextString(m) }
func (*PushModemMessagesRequest) ProtoMessage()               {}
func (*PushModemMessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

func (m *PushModemMessagesRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *PushModemMessagesRequest) GetMessages() []*PushModemMessagesRequest_MessageToPush {
	if m != nil {
		return m.Messages
	}
	return nil
}

type PushModemMessagesRequest_Response struct {
	Request *PushModemMessagesRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *PushModemMessagesRequest_Response) Reset()         { *m = PushModemMessagesRequest_Response{} }
func (m *PushModemMessagesRequest_Response) String() string { return proto.CompactTextString(m) }
func (*PushModemMessagesRequest_Response) ProtoMessage()    {}
func (*PushModemMessagesRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{0, 0}
}

func (m *PushModemMessagesRequest_Response) GetRequest() *PushModemMessagesRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type PushModemMessagesRequest_MessageToPush struct {
	ModemNumber string     `protobuf:"bytes,1,opt,name=modem_number,json=modemNumber" json:"modem_number,omitempty"`
	Time        *Timestamp `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	Location    *Location  `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	Content     []byte     `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *PushModemMessagesRequest_MessageToPush) Reset() {
	*m = PushModemMessagesRequest_MessageToPush{}
}
func (m *PushModemMessagesRequest_MessageToPush) String() string { return proto.CompactTextString(m) }
func (*PushModemMessagesRequest_MessageToPush) ProtoMessage()    {}
func (*PushModemMessagesRequest_MessageToPush) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{0, 1}
}

func (m *PushModemMessagesRequest_MessageToPush) GetModemNumber() string {
	if m != nil {
		return m.ModemNumber
	}
	return ""
}

func (m *PushModemMessagesRequest_MessageToPush) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *PushModemMessagesRequest_MessageToPush) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *PushModemMessagesRequest_MessageToPush) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*PushModemMessagesRequest)(nil), "hiber.testing.PushModemMessagesRequest")
	proto.RegisterType((*PushModemMessagesRequest_Response)(nil), "hiber.testing.PushModemMessagesRequest.Response")
	proto.RegisterType((*PushModemMessagesRequest_MessageToPush)(nil), "hiber.testing.PushModemMessagesRequest.MessageToPush")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestingService service

type TestingServiceClient interface {
	PushModemMessages(ctx context.Context, in *PushModemMessagesRequest, opts ...grpc.CallOption) (*PushModemMessagesRequest_Response, error)
}

type testingServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestingServiceClient(cc *grpc.ClientConn) TestingServiceClient {
	return &testingServiceClient{cc}
}

func (c *testingServiceClient) PushModemMessages(ctx context.Context, in *PushModemMessagesRequest, opts ...grpc.CallOption) (*PushModemMessagesRequest_Response, error) {
	out := new(PushModemMessagesRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.testing.TestingService/PushModemMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestingService service

type TestingServiceServer interface {
	PushModemMessages(context.Context, *PushModemMessagesRequest) (*PushModemMessagesRequest_Response, error)
}

func RegisterTestingServiceServer(s *grpc.Server, srv TestingServiceServer) {
	s.RegisterService(&_TestingService_serviceDesc, srv)
}

func _TestingService_PushModemMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushModemMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).PushModemMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.testing.TestingService/PushModemMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).PushModemMessages(ctx, req.(*PushModemMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.testing.TestingService",
	HandlerType: (*TestingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushModemMessages",
			Handler:    _TestingService_PushModemMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testing.proto",
}

func init() { proto.RegisterFile("testing.proto", fileDescriptor11) }

var fileDescriptor11 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0xcb, 0x4a, 0xf3, 0x40,
	0x14, 0xfe, 0xd3, 0xf6, 0xb7, 0xf5, 0xb4, 0xf5, 0x32, 0xab, 0x10, 0x10, 0x62, 0x11, 0x0c, 0x08,
	0x41, 0xaa, 0x3e, 0x40, 0xbb, 0xb6, 0x52, 0xc7, 0xae, 0xdc, 0xc8, 0x24, 0x1e, 0xd2, 0x81, 0xce,
	0xc5, 0x99, 0xa9, 0x0b, 0x57, 0xe2, 0x8b, 0xf8, 0xaa, 0xd2, 0xc9, 0xa4, 0x50, 0x44, 0xe8, 0xf2,
	0x7c, 0xe7, 0xbb, 0xe4, 0x3b, 0x19, 0x18, 0x3a, 0xb4, 0x8e, 0xcb, 0x2a, 0xd7, 0x46, 0x39, 0x45,
	0x86, 0x4b, 0x5e, 0xa0, 0xc9, 0x03, 0x98, 0x40, 0xc1, 0x2c, 0xd6, 0xab, 0xd1, 0x57, 0x1b, 0xe2,
	0xf9, 0xda, 0x2e, 0x67, 0xea, 0x15, 0xc5, 0x0c, 0xad, 0x65, 0x15, 0x5a, 0x8a, 0x6f, 0x6b, 0xb4,
	0x8e, 0x8c, 0x60, 0xa0, 0x4c, 0xc5, 0x24, 0xff, 0x60, 0x8e, 0x2b, 0x19, 0x47, 0x69, 0x94, 0x1d,
	0xd2, 0x1d, 0x8c, 0x3c, 0x42, 0x4f, 0x04, 0x59, 0xdc, 0x4a, 0xdb, 0x59, 0x7f, 0x7c, 0x97, 0xef,
	0xc4, 0xe5, 0x7f, 0xd9, 0xe7, 0x61, 0x5e, 0xa8, 0x0d, 0x83, 0x6e, 0x6d, 0x92, 0x19, 0xf4, 0x28,
	0x5a, 0xad, 0xa4, 0x45, 0x32, 0x81, 0xae, 0xa9, 0xe9, 0x71, 0x2b, 0x8d, 0xb2, 0xfe, 0xf8, 0x72,
	0x4f, 0x77, 0xda, 0xe8, 0x92, 0xef, 0x08, 0x86, 0x3b, 0x51, 0xe4, 0x1c, 0x06, 0x62, 0x23, 0x79,
	0x91, 0x6b, 0x51, 0xa0, 0x09, 0xbd, 0xfa, 0x1e, 0x7b, 0xf0, 0x10, 0xb9, 0x80, 0x8e, 0xe3, 0x02,
	0x43, 0xe8, 0x49, 0x08, 0x5d, 0x70, 0x81, 0xd6, 0x31, 0xa1, 0xa9, 0xdf, 0x92, 0x2b, 0xe8, 0xad,
	0x54, 0x59, 0x1f, 0xa7, 0xed, 0x99, 0xc7, 0x81, 0x79, 0x1f, 0x60, 0xba, 0x25, 0x90, 0x18, 0xba,
	0xa5, 0x92, 0x0e, 0xa5, 0x8b, 0x3b, 0x69, 0x94, 0x0d, 0x68, 0x33, 0x8e, 0x3f, 0x23, 0x38, 0x5a,
	0xd4, 0x7d, 0x9e, 0xd0, 0xbc, 0xf3, 0x12, 0x89, 0x84, 0xd3, 0x5f, 0xcd, 0xc8, 0xbe, 0xdd, 0x93,
	0xeb, 0x7d, 0x7f, 0x41, 0x73, 0xe7, 0xe9, 0x2d, 0x9c, 0x55, 0x2b, 0x55, 0xb0, 0x55, 0x50, 0x32,
	0xcd, 0xf3, 0xca, 0xe8, 0xb2, 0xb1, 0x98, 0x42, 0xf8, 0xc0, 0x89, 0xe6, 0xf3, 0x7f, 0xcf, 0xff,
	0x3d, 0xab, 0x38, 0xf0, 0x8f, 0xe8, 0xe6, 0x27, 0x00, 0x00, 0xff, 0xff, 0x00, 0x85, 0x3f, 0x1c,
	0x70, 0x02, 0x00, 0x00,
}
