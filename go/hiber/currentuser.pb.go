// Code generated by protoc-gen-go.
// source: currentuser.proto
// DO NOT EDIT!

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Your personal data
type CurrentUser struct {
	Id       string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Email    string   `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Name     string   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Accounts []string `protobuf:"bytes,4,rep,name=accounts" json:"accounts,omitempty"`
}

func (m *CurrentUser) Reset()                    { *m = CurrentUser{} }
func (m *CurrentUser) String() string            { return proto.CompactTextString(m) }
func (*CurrentUser) ProtoMessage()               {}
func (*CurrentUser) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *CurrentUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CurrentUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CurrentUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CurrentUser) GetAccounts() []string {
	if m != nil {
		return m.Accounts
	}
	return nil
}

// Get your personal data
type CurrentUserRequest struct {
}

func (m *CurrentUserRequest) Reset()                    { *m = CurrentUserRequest{} }
func (m *CurrentUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CurrentUserRequest) ProtoMessage()               {}
func (*CurrentUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

// Request access to an account by name, if it exists.
// You request will be saved and the account owner notified.
// Account admins can approve or reject your request.
type RequestAccessRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *RequestAccessRequest) Reset()                    { *m = RequestAccessRequest{} }
func (m *RequestAccessRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestAccessRequest) ProtoMessage()               {}
func (*RequestAccessRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *RequestAccessRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type RequestAccessRequest_Response struct {
}

func (m *RequestAccessRequest_Response) Reset()         { *m = RequestAccessRequest_Response{} }
func (m *RequestAccessRequest_Response) String() string { return proto.CompactTextString(m) }
func (*RequestAccessRequest_Response) ProtoMessage()    {}
func (*RequestAccessRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{2, 0}
}

// Delete yourself.
// Removes all login information and personal data, except for you email address for auditing purposes.
type DeleteCurrentUserRequest struct {
}

func (m *DeleteCurrentUserRequest) Reset()                    { *m = DeleteCurrentUserRequest{} }
func (m *DeleteCurrentUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCurrentUserRequest) ProtoMessage()               {}
func (*DeleteCurrentUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type DeleteCurrentUserRequest_Response struct {
}

func (m *DeleteCurrentUserRequest_Response) Reset()         { *m = DeleteCurrentUserRequest_Response{} }
func (m *DeleteCurrentUserRequest_Response) String() string { return proto.CompactTextString(m) }
func (*DeleteCurrentUserRequest_Response) ProtoMessage()    {}
func (*DeleteCurrentUserRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{3, 0}
}

func init() {
	proto.RegisterType((*CurrentUser)(nil), "hiber.user.CurrentUser")
	proto.RegisterType((*CurrentUserRequest)(nil), "hiber.user.CurrentUserRequest")
	proto.RegisterType((*RequestAccessRequest)(nil), "hiber.user.RequestAccessRequest")
	proto.RegisterType((*RequestAccessRequest_Response)(nil), "hiber.user.RequestAccessRequest.Response")
	proto.RegisterType((*DeleteCurrentUserRequest)(nil), "hiber.user.DeleteCurrentUserRequest")
	proto.RegisterType((*DeleteCurrentUserRequest_Response)(nil), "hiber.user.DeleteCurrentUserRequest.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CurrentUserService service

type CurrentUserServiceClient interface {
	CurrentUser(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*CurrentUser, error)
	RequestAccess(ctx context.Context, in *RequestAccessRequest, opts ...grpc.CallOption) (*RequestAccessRequest_Response, error)
	DeleteCurrentUser(ctx context.Context, in *DeleteCurrentUserRequest, opts ...grpc.CallOption) (*DeleteCurrentUserRequest_Response, error)
}

type currentUserServiceClient struct {
	cc *grpc.ClientConn
}

func NewCurrentUserServiceClient(cc *grpc.ClientConn) CurrentUserServiceClient {
	return &currentUserServiceClient{cc}
}

func (c *currentUserServiceClient) CurrentUser(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*CurrentUser, error) {
	out := new(CurrentUser)
	err := grpc.Invoke(ctx, "/hiber.user.CurrentUserService/CurrentUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentUserServiceClient) RequestAccess(ctx context.Context, in *RequestAccessRequest, opts ...grpc.CallOption) (*RequestAccessRequest_Response, error) {
	out := new(RequestAccessRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.user.CurrentUserService/RequestAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentUserServiceClient) DeleteCurrentUser(ctx context.Context, in *DeleteCurrentUserRequest, opts ...grpc.CallOption) (*DeleteCurrentUserRequest_Response, error) {
	out := new(DeleteCurrentUserRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.user.CurrentUserService/DeleteCurrentUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CurrentUserService service

type CurrentUserServiceServer interface {
	CurrentUser(context.Context, *CurrentUserRequest) (*CurrentUser, error)
	RequestAccess(context.Context, *RequestAccessRequest) (*RequestAccessRequest_Response, error)
	DeleteCurrentUser(context.Context, *DeleteCurrentUserRequest) (*DeleteCurrentUserRequest_Response, error)
}

func RegisterCurrentUserServiceServer(s *grpc.Server, srv CurrentUserServiceServer) {
	s.RegisterService(&_CurrentUserService_serviceDesc, srv)
}

func _CurrentUserService_CurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentUserServiceServer).CurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.user.CurrentUserService/CurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentUserServiceServer).CurrentUser(ctx, req.(*CurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrentUserService_RequestAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentUserServiceServer).RequestAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.user.CurrentUserService/RequestAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentUserServiceServer).RequestAccess(ctx, req.(*RequestAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrentUserService_DeleteCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentUserServiceServer).DeleteCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.user.CurrentUserService/DeleteCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentUserServiceServer).DeleteCurrentUser(ctx, req.(*DeleteCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CurrentUserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.user.CurrentUserService",
	HandlerType: (*CurrentUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CurrentUser",
			Handler:    _CurrentUserService_CurrentUser_Handler,
		},
		{
			MethodName: "RequestAccess",
			Handler:    _CurrentUserService_RequestAccess_Handler,
		},
		{
			MethodName: "DeleteCurrentUser",
			Handler:    _CurrentUserService_DeleteCurrentUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "currentuser.proto",
}

func init() { proto.RegisterFile("currentuser.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0xfd, 0x9a, 0xb6, 0x9f, 0xed, 0x88, 0x85, 0x0e, 0x01, 0x97, 0x1c, 0x24, 0x04, 0x91, 0x7a,
	0x70, 0x0f, 0x8a, 0x37, 0x2f, 0xad, 0xe2, 0x59, 0x22, 0x5e, 0xc4, 0x4b, 0xb2, 0x1d, 0xda, 0x85,
	0x34, 0x89, 0xbb, 0x1b, 0x7f, 0x91, 0x3f, 0x54, 0xdc, 0x6e, 0xeb, 0x86, 0xb6, 0xe8, 0x6d, 0xde,
	0xec, 0x7b, 0xf3, 0xe6, 0x0d, 0x0b, 0x63, 0xd1, 0x28, 0x45, 0xa5, 0x69, 0x34, 0x29, 0x5e, 0xab,
	0xca, 0x54, 0x08, 0x4b, 0x99, 0x93, 0xe2, 0xdf, 0x9d, 0x44, 0xc0, 0xf1, 0xfd, 0x9a, 0xf0, 0xa2,
	0x49, 0xe1, 0x08, 0x02, 0x39, 0x67, 0x9d, 0xb8, 0x33, 0x19, 0xa6, 0x81, 0x9c, 0x63, 0x08, 0x7d,
	0x5a, 0x65, 0xb2, 0x60, 0x81, 0x6d, 0xad, 0x01, 0x22, 0xf4, 0xca, 0x6c, 0x45, 0xac, 0x6b, 0x9b,
	0xb6, 0xc6, 0x08, 0x06, 0x99, 0x10, 0x55, 0x53, 0x1a, 0xcd, 0x7a, 0x71, 0x77, 0x32, 0x4c, 0xb7,
	0x38, 0x09, 0x01, 0x3d, 0x93, 0x94, 0xde, 0x1b, 0xd2, 0x26, 0xb9, 0x83, 0xd0, 0x95, 0x53, 0x21,
	0x48, 0x6b, 0x07, 0x90, 0xc1, 0x91, 0x53, 0xba, 0x45, 0x36, 0x30, 0x02, 0x18, 0xa4, 0xa4, 0xeb,
	0xaa, 0xd4, 0x94, 0x5c, 0x00, 0x7b, 0xa0, 0x82, 0x0c, 0xed, 0x4e, 0xf6, 0x79, 0xd7, 0x9f, 0x41,
	0xcb, 0xfc, 0x99, 0xd4, 0x87, 0x14, 0x84, 0x8f, 0xed, 0xdc, 0x67, 0xfc, 0xe7, 0x26, 0x7c, 0xcf,
	0xc4, 0xd3, 0x03, 0xef, 0xf8, 0x06, 0x27, 0xad, 0x10, 0x18, 0xfb, 0xcc, 0x7d, 0xf9, 0xa2, 0xcb,
	0xdf, 0x18, 0x7c, 0xb3, 0x3c, 0x2e, 0x61, 0xbc, 0x13, 0x12, 0xcf, 0x7d, 0xfd, 0xc1, 0x1b, 0x5c,
	0xfd, 0x85, 0xb5, 0x75, 0x9a, 0xdd, 0x42, 0xb4, 0x28, 0xaa, 0x3c, 0x2b, 0x9c, 0x2c, 0xab, 0x25,
	0x5f, 0xa8, 0x5a, 0x58, 0xfd, 0x6c, 0xe4, 0x49, 0xa7, 0xb5, 0x7c, 0xfa, 0xf7, 0xda, 0xb7, 0xb4,
	0xfc, 0xbf, 0xfd, 0x51, 0x37, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x43, 0xbf, 0x96, 0x66,
	0x02, 0x00, 0x00,
}
