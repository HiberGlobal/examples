// Code generated by protoc-gen-go. DO NOT EDIT.
// source: currentuser.proto

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Your personal data
type CurrentUser struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// The organizations that this user has access to.
	Organizations []string `protobuf:"bytes,4,rep,name=organizations" json:"organizations,omitempty"`
	// The default organization for this user.
	DefaultOrganization string `protobuf:"bytes,5,opt,name=default_organization,json=defaultOrganization" json:"default_organization,omitempty"`
	// Open access requests.
	RequestedOrganizations []string `protobuf:"bytes,6,rep,name=requested_organizations,json=requestedOrganizations" json:"requested_organizations,omitempty"`
	// The current organization for this user.
	// If this is a user, this equals the default_organization.
	// If this is a token, it's the token's organization.
	CurrentOrganization string `protobuf:"bytes,8,opt,name=current_organization,json=currentOrganization" json:"current_organization,omitempty"`
	// Permissions for the current organization.
	CurrentOrganizationPermissions *Filter_OrganizationPermissions `protobuf:"bytes,9,opt,name=current_organization_permissions,json=currentOrganizationPermissions" json:"current_organization_permissions,omitempty"`
	// Permissions for the user. If this is a token, the user permissions may be limited.
	UserPermissions        *Filter_UserPermissions `protobuf:"bytes,10,opt,name=user_permissions,json=userPermissions" json:"user_permissions,omitempty"`
	MissionControlSettings string                  `protobuf:"bytes,11,opt,name=mission_control_settings,json=missionControlSettings" json:"mission_control_settings,omitempty"`
}

func (m *CurrentUser) Reset()                    { *m = CurrentUser{} }
func (m *CurrentUser) String() string            { return proto.CompactTextString(m) }
func (*CurrentUser) ProtoMessage()               {}
func (*CurrentUser) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *CurrentUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CurrentUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CurrentUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CurrentUser) GetOrganizations() []string {
	if m != nil {
		return m.Organizations
	}
	return nil
}

func (m *CurrentUser) GetDefaultOrganization() string {
	if m != nil {
		return m.DefaultOrganization
	}
	return ""
}

func (m *CurrentUser) GetRequestedOrganizations() []string {
	if m != nil {
		return m.RequestedOrganizations
	}
	return nil
}

func (m *CurrentUser) GetCurrentOrganization() string {
	if m != nil {
		return m.CurrentOrganization
	}
	return ""
}

func (m *CurrentUser) GetCurrentOrganizationPermissions() *Filter_OrganizationPermissions {
	if m != nil {
		return m.CurrentOrganizationPermissions
	}
	return nil
}

func (m *CurrentUser) GetUserPermissions() *Filter_UserPermissions {
	if m != nil {
		return m.UserPermissions
	}
	return nil
}

func (m *CurrentUser) GetMissionControlSettings() string {
	if m != nil {
		return m.MissionControlSettings
	}
	return ""
}

// Get your personal data
type CurrentUserRequest struct {
}

func (m *CurrentUserRequest) Reset()                    { *m = CurrentUserRequest{} }
func (m *CurrentUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CurrentUserRequest) ProtoMessage()               {}
func (*CurrentUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

// Request access to an organization by name, if it exists.
// You request will be saved and the organization owner notified.
// Organization admins can approve or reject your request.
type RequestAccessRequest struct {
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
}

func (m *RequestAccessRequest) Reset()                    { *m = RequestAccessRequest{} }
func (m *RequestAccessRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestAccessRequest) ProtoMessage()               {}
func (*RequestAccessRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *RequestAccessRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

type RequestAccessRequest_Response struct {
}

func (m *RequestAccessRequest_Response) Reset()         { *m = RequestAccessRequest_Response{} }
func (m *RequestAccessRequest_Response) String() string { return proto.CompactTextString(m) }
func (*RequestAccessRequest_Response) ProtoMessage()    {}
func (*RequestAccessRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{2, 0}
}

// Cancel a previously made access request.
type CancelAccessRequestRequest struct {
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
}

func (m *CancelAccessRequestRequest) Reset()                    { *m = CancelAccessRequestRequest{} }
func (m *CancelAccessRequestRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelAccessRequestRequest) ProtoMessage()               {}
func (*CancelAccessRequestRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *CancelAccessRequestRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

type CancelAccessRequestRequest_Response struct {
}

func (m *CancelAccessRequestRequest_Response) Reset()         { *m = CancelAccessRequestRequest_Response{} }
func (m *CancelAccessRequestRequest_Response) String() string { return proto.CompactTextString(m) }
func (*CancelAccessRequestRequest_Response) ProtoMessage()    {}
func (*CancelAccessRequestRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{3, 0}
}

// Delete yourself.
// Removes all login information and personal data, except for you email address for auditing purposes.
type DeleteCurrentUserRequest struct {
}

func (m *DeleteCurrentUserRequest) Reset()                    { *m = DeleteCurrentUserRequest{} }
func (m *DeleteCurrentUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCurrentUserRequest) ProtoMessage()               {}
func (*DeleteCurrentUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

type DeleteCurrentUserRequest_Response struct {
}

func (m *DeleteCurrentUserRequest_Response) Reset()         { *m = DeleteCurrentUserRequest_Response{} }
func (m *DeleteCurrentUserRequest_Response) String() string { return proto.CompactTextString(m) }
func (*DeleteCurrentUserRequest_Response) ProtoMessage()    {}
func (*DeleteCurrentUserRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{4, 0}
}

// Set the default organization to use when it is not specified in the call.
// Note: this can be a child organization of one of the owned organizations.
type UpdateDefaultOrganizationRequest struct {
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
}

func (m *UpdateDefaultOrganizationRequest) Reset()         { *m = UpdateDefaultOrganizationRequest{} }
func (m *UpdateDefaultOrganizationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateDefaultOrganizationRequest) ProtoMessage()    {}
func (*UpdateDefaultOrganizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{5}
}

func (m *UpdateDefaultOrganizationRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

type UpdateDefaultOrganizationRequest_Response struct {
	DefaultOrganization string `protobuf:"bytes,1,opt,name=default_organization,json=defaultOrganization" json:"default_organization,omitempty"`
}

func (m *UpdateDefaultOrganizationRequest_Response) Reset() {
	*m = UpdateDefaultOrganizationRequest_Response{}
}
func (m *UpdateDefaultOrganizationRequest_Response) String() string { return proto.CompactTextString(m) }
func (*UpdateDefaultOrganizationRequest_Response) ProtoMessage()    {}
func (*UpdateDefaultOrganizationRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{5, 0}
}

func (m *UpdateDefaultOrganizationRequest_Response) GetDefaultOrganization() string {
	if m != nil {
		return m.DefaultOrganization
	}
	return ""
}

// Update mission control settings, which are in a json format.
type UpdateMissionControlSettingsRequest struct {
	Update string `protobuf:"bytes,1,opt,name=update" json:"update,omitempty"`
}

func (m *UpdateMissionControlSettingsRequest) Reset()         { *m = UpdateMissionControlSettingsRequest{} }
func (m *UpdateMissionControlSettingsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMissionControlSettingsRequest) ProtoMessage()    {}
func (*UpdateMissionControlSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{6}
}

func (m *UpdateMissionControlSettingsRequest) GetUpdate() string {
	if m != nil {
		return m.Update
	}
	return ""
}

type UpdateMissionControlSettingsRequest_Response struct {
	MissionControlSettings string `protobuf:"bytes,1,opt,name=mission_control_settings,json=missionControlSettings" json:"mission_control_settings,omitempty"`
}

func (m *UpdateMissionControlSettingsRequest_Response) Reset() {
	*m = UpdateMissionControlSettingsRequest_Response{}
}
func (m *UpdateMissionControlSettingsRequest_Response) String() string {
	return proto.CompactTextString(m)
}
func (*UpdateMissionControlSettingsRequest_Response) ProtoMessage() {}
func (*UpdateMissionControlSettingsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{6, 0}
}

func (m *UpdateMissionControlSettingsRequest_Response) GetMissionControlSettings() string {
	if m != nil {
		return m.MissionControlSettings
	}
	return ""
}

// List all organizations that can be impersonated.
type AccessibleOrganizationsRequest struct {
}

func (m *AccessibleOrganizationsRequest) Reset()                    { *m = AccessibleOrganizationsRequest{} }
func (m *AccessibleOrganizationsRequest) String() string            { return proto.CompactTextString(m) }
func (*AccessibleOrganizationsRequest) ProtoMessage()               {}
func (*AccessibleOrganizationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

type AccessibleOrganizationsRequest_Response struct {
	Organizations []string `protobuf:"bytes,1,rep,name=organizations" json:"organizations,omitempty"`
}

func (m *AccessibleOrganizationsRequest_Response) Reset() {
	*m = AccessibleOrganizationsRequest_Response{}
}
func (m *AccessibleOrganizationsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*AccessibleOrganizationsRequest_Response) ProtoMessage()    {}
func (*AccessibleOrganizationsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{7, 0}
}

func (m *AccessibleOrganizationsRequest_Response) GetOrganizations() []string {
	if m != nil {
		return m.Organizations
	}
	return nil
}

func init() {
	proto.RegisterType((*CurrentUser)(nil), "hiber.user.CurrentUser")
	proto.RegisterType((*CurrentUserRequest)(nil), "hiber.user.CurrentUserRequest")
	proto.RegisterType((*RequestAccessRequest)(nil), "hiber.user.RequestAccessRequest")
	proto.RegisterType((*RequestAccessRequest_Response)(nil), "hiber.user.RequestAccessRequest.Response")
	proto.RegisterType((*CancelAccessRequestRequest)(nil), "hiber.user.CancelAccessRequestRequest")
	proto.RegisterType((*CancelAccessRequestRequest_Response)(nil), "hiber.user.CancelAccessRequestRequest.Response")
	proto.RegisterType((*DeleteCurrentUserRequest)(nil), "hiber.user.DeleteCurrentUserRequest")
	proto.RegisterType((*DeleteCurrentUserRequest_Response)(nil), "hiber.user.DeleteCurrentUserRequest.Response")
	proto.RegisterType((*UpdateDefaultOrganizationRequest)(nil), "hiber.user.UpdateDefaultOrganizationRequest")
	proto.RegisterType((*UpdateDefaultOrganizationRequest_Response)(nil), "hiber.user.UpdateDefaultOrganizationRequest.Response")
	proto.RegisterType((*UpdateMissionControlSettingsRequest)(nil), "hiber.user.UpdateMissionControlSettingsRequest")
	proto.RegisterType((*UpdateMissionControlSettingsRequest_Response)(nil), "hiber.user.UpdateMissionControlSettingsRequest.Response")
	proto.RegisterType((*AccessibleOrganizationsRequest)(nil), "hiber.user.AccessibleOrganizationsRequest")
	proto.RegisterType((*AccessibleOrganizationsRequest_Response)(nil), "hiber.user.AccessibleOrganizationsRequest.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CurrentUserService service

type CurrentUserServiceClient interface {
	CurrentUser(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*CurrentUser, error)
	RequestAccess(ctx context.Context, in *RequestAccessRequest, opts ...grpc.CallOption) (*RequestAccessRequest_Response, error)
	CancelAccessRequest(ctx context.Context, in *CancelAccessRequestRequest, opts ...grpc.CallOption) (*CancelAccessRequestRequest_Response, error)
	DeleteCurrentUser(ctx context.Context, in *DeleteCurrentUserRequest, opts ...grpc.CallOption) (*DeleteCurrentUserRequest_Response, error)
	UpdateDefaultOrganization(ctx context.Context, in *UpdateDefaultOrganizationRequest, opts ...grpc.CallOption) (*UpdateDefaultOrganizationRequest_Response, error)
	UpdateMissionControlSettings(ctx context.Context, in *UpdateMissionControlSettingsRequest, opts ...grpc.CallOption) (*UpdateMissionControlSettingsRequest_Response, error)
	AccessibleOrganizations(ctx context.Context, in *AccessibleOrganizationsRequest, opts ...grpc.CallOption) (*AccessibleOrganizationsRequest_Response, error)
}

type currentUserServiceClient struct {
	cc *grpc.ClientConn
}

func NewCurrentUserServiceClient(cc *grpc.ClientConn) CurrentUserServiceClient {
	return &currentUserServiceClient{cc}
}

func (c *currentUserServiceClient) CurrentUser(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*CurrentUser, error) {
	out := new(CurrentUser)
	err := grpc.Invoke(ctx, "/hiber.user.CurrentUserService/CurrentUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentUserServiceClient) RequestAccess(ctx context.Context, in *RequestAccessRequest, opts ...grpc.CallOption) (*RequestAccessRequest_Response, error) {
	out := new(RequestAccessRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.user.CurrentUserService/RequestAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentUserServiceClient) CancelAccessRequest(ctx context.Context, in *CancelAccessRequestRequest, opts ...grpc.CallOption) (*CancelAccessRequestRequest_Response, error) {
	out := new(CancelAccessRequestRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.user.CurrentUserService/CancelAccessRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentUserServiceClient) DeleteCurrentUser(ctx context.Context, in *DeleteCurrentUserRequest, opts ...grpc.CallOption) (*DeleteCurrentUserRequest_Response, error) {
	out := new(DeleteCurrentUserRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.user.CurrentUserService/DeleteCurrentUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentUserServiceClient) UpdateDefaultOrganization(ctx context.Context, in *UpdateDefaultOrganizationRequest, opts ...grpc.CallOption) (*UpdateDefaultOrganizationRequest_Response, error) {
	out := new(UpdateDefaultOrganizationRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.user.CurrentUserService/UpdateDefaultOrganization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentUserServiceClient) UpdateMissionControlSettings(ctx context.Context, in *UpdateMissionControlSettingsRequest, opts ...grpc.CallOption) (*UpdateMissionControlSettingsRequest_Response, error) {
	out := new(UpdateMissionControlSettingsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.user.CurrentUserService/UpdateMissionControlSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentUserServiceClient) AccessibleOrganizations(ctx context.Context, in *AccessibleOrganizationsRequest, opts ...grpc.CallOption) (*AccessibleOrganizationsRequest_Response, error) {
	out := new(AccessibleOrganizationsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.user.CurrentUserService/AccessibleOrganizations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CurrentUserService service

type CurrentUserServiceServer interface {
	CurrentUser(context.Context, *CurrentUserRequest) (*CurrentUser, error)
	RequestAccess(context.Context, *RequestAccessRequest) (*RequestAccessRequest_Response, error)
	CancelAccessRequest(context.Context, *CancelAccessRequestRequest) (*CancelAccessRequestRequest_Response, error)
	DeleteCurrentUser(context.Context, *DeleteCurrentUserRequest) (*DeleteCurrentUserRequest_Response, error)
	UpdateDefaultOrganization(context.Context, *UpdateDefaultOrganizationRequest) (*UpdateDefaultOrganizationRequest_Response, error)
	UpdateMissionControlSettings(context.Context, *UpdateMissionControlSettingsRequest) (*UpdateMissionControlSettingsRequest_Response, error)
	AccessibleOrganizations(context.Context, *AccessibleOrganizationsRequest) (*AccessibleOrganizationsRequest_Response, error)
}

func RegisterCurrentUserServiceServer(s *grpc.Server, srv CurrentUserServiceServer) {
	s.RegisterService(&_CurrentUserService_serviceDesc, srv)
}

func _CurrentUserService_CurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentUserServiceServer).CurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.user.CurrentUserService/CurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentUserServiceServer).CurrentUser(ctx, req.(*CurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrentUserService_RequestAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentUserServiceServer).RequestAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.user.CurrentUserService/RequestAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentUserServiceServer).RequestAccess(ctx, req.(*RequestAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrentUserService_CancelAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentUserServiceServer).CancelAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.user.CurrentUserService/CancelAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentUserServiceServer).CancelAccessRequest(ctx, req.(*CancelAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrentUserService_DeleteCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentUserServiceServer).DeleteCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.user.CurrentUserService/DeleteCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentUserServiceServer).DeleteCurrentUser(ctx, req.(*DeleteCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrentUserService_UpdateDefaultOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDefaultOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentUserServiceServer).UpdateDefaultOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.user.CurrentUserService/UpdateDefaultOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentUserServiceServer).UpdateDefaultOrganization(ctx, req.(*UpdateDefaultOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrentUserService_UpdateMissionControlSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMissionControlSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentUserServiceServer).UpdateMissionControlSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.user.CurrentUserService/UpdateMissionControlSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentUserServiceServer).UpdateMissionControlSettings(ctx, req.(*UpdateMissionControlSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrentUserService_AccessibleOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessibleOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentUserServiceServer).AccessibleOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.user.CurrentUserService/AccessibleOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentUserServiceServer).AccessibleOrganizations(ctx, req.(*AccessibleOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CurrentUserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.user.CurrentUserService",
	HandlerType: (*CurrentUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CurrentUser",
			Handler:    _CurrentUserService_CurrentUser_Handler,
		},
		{
			MethodName: "RequestAccess",
			Handler:    _CurrentUserService_RequestAccess_Handler,
		},
		{
			MethodName: "CancelAccessRequest",
			Handler:    _CurrentUserService_CancelAccessRequest_Handler,
		},
		{
			MethodName: "DeleteCurrentUser",
			Handler:    _CurrentUserService_DeleteCurrentUser_Handler,
		},
		{
			MethodName: "UpdateDefaultOrganization",
			Handler:    _CurrentUserService_UpdateDefaultOrganization_Handler,
		},
		{
			MethodName: "UpdateMissionControlSettings",
			Handler:    _CurrentUserService_UpdateMissionControlSettings_Handler,
		},
		{
			MethodName: "AccessibleOrganizations",
			Handler:    _CurrentUserService_AccessibleOrganizations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "currentuser.proto",
}

func init() { proto.RegisterFile("currentuser.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 618 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0xfd, 0xb9, 0x4d, 0xf3, 0x4b, 0xa7, 0xb4, 0xb4, 0xdb, 0xa8, 0x31, 0x16, 0x44, 0x96, 0x29,
	0x55, 0x40, 0xe0, 0x42, 0xab, 0x8a, 0x5e, 0x38, 0xb4, 0x89, 0x22, 0x84, 0x40, 0xad, 0x5c, 0xf5,
	0x82, 0x90, 0x22, 0xc7, 0x19, 0xd2, 0x95, 0x1c, 0xdb, 0xec, 0xda, 0x1c, 0x7a, 0x42, 0x42, 0x08,
	0xf1, 0x29, 0xf8, 0xaa, 0x28, 0x6b, 0x37, 0xde, 0x25, 0x76, 0xfe, 0x70, 0xdb, 0x9d, 0x79, 0xfb,
	0xde, 0x64, 0xe6, 0x8d, 0x03, 0x3b, 0x5e, 0xc2, 0x18, 0x06, 0x71, 0xc2, 0x91, 0xd9, 0x11, 0x0b,
	0xe3, 0x90, 0xc0, 0x0d, 0xed, 0x23, 0xb3, 0xc7, 0x11, 0x03, 0xfa, 0x2e, 0xc7, 0x34, 0x6e, 0xfd,
	0xac, 0xc0, 0x46, 0x3b, 0x45, 0x5f, 0x73, 0x64, 0x64, 0x0b, 0x56, 0xe8, 0x40, 0xd7, 0x4c, 0xad,
	0xb5, 0xee, 0xac, 0xd0, 0x01, 0xa9, 0xc3, 0x1a, 0x8e, 0x5c, 0xea, 0xeb, 0x2b, 0x22, 0x94, 0x5e,
	0x08, 0x81, 0x4a, 0xe0, 0x8e, 0x50, 0x5f, 0x15, 0x41, 0x71, 0x26, 0xfb, 0xb0, 0x19, 0xb2, 0xa1,
	0x1b, 0xd0, 0x5b, 0x37, 0xa6, 0x61, 0xc0, 0xf5, 0x8a, 0xb9, 0xda, 0x5a, 0x77, 0xd4, 0x20, 0x79,
	0x05, 0xf5, 0x01, 0x7e, 0x76, 0x13, 0x3f, 0xee, 0xc9, 0x09, 0x7d, 0x4d, 0x30, 0xed, 0x66, 0xb9,
	0x0b, 0x29, 0x45, 0x5e, 0x43, 0x83, 0xe1, 0x97, 0x04, 0x79, 0x8c, 0x83, 0x9e, 0x2a, 0x51, 0x15,
	0x12, 0x7b, 0x93, 0xf4, 0xc5, 0xdf, 0x5a, 0x59, 0x23, 0x54, 0xad, 0x5a, 0xaa, 0x95, 0xe5, 0x14,
	0xad, 0x10, 0xcc, 0xa2, 0x27, 0xbd, 0x08, 0xd9, 0x88, 0x72, 0x2e, 0x44, 0xd7, 0x4d, 0xad, 0xb5,
	0x71, 0xf4, 0xc4, 0x4e, 0x3b, 0xda, 0xa5, 0x7e, 0x8c, 0xcc, 0x96, 0x59, 0x2e, 0x73, 0xb0, 0xd3,
	0x2c, 0x50, 0x91, 0xf2, 0xe4, 0x2d, 0x6c, 0x8f, 0x67, 0xa2, 0x08, 0x80, 0x10, 0x78, 0xa4, 0x0a,
	0x8c, 0xa7, 0x23, 0x13, 0xdf, 0x4f, 0xd4, 0x00, 0x39, 0x05, 0x3d, 0x3b, 0xf7, 0xbc, 0x30, 0x88,
	0x59, 0xe8, 0xf7, 0x38, 0xc6, 0x31, 0x0d, 0x86, 0x5c, 0xdf, 0x10, 0xbf, 0x78, 0x2f, 0xcb, 0xb7,
	0xd3, 0xf4, 0x55, 0x96, 0x7d, 0x57, 0xa9, 0xfd, 0xbf, 0x5d, 0xb3, 0xea, 0x40, 0x24, 0x23, 0x38,
	0x69, 0x4b, 0xad, 0x2e, 0xd4, 0xb3, 0xe3, 0x99, 0xe7, 0x21, 0xe7, 0xd9, 0x85, 0x58, 0x70, 0x4f,
	0xe9, 0x69, 0xea, 0x18, 0x25, 0x66, 0x00, 0xd4, 0x1c, 0xe4, 0x51, 0x18, 0x70, 0xb4, 0xde, 0x83,
	0xd1, 0x76, 0x03, 0x0f, 0x7d, 0x85, 0xe6, 0x5f, 0xd9, 0x0e, 0x40, 0xef, 0xa0, 0x8f, 0x31, 0x4e,
	0x57, 0xac, 0xe0, 0x7e, 0x68, 0x60, 0x5e, 0x47, 0x03, 0x37, 0xc6, 0xce, 0xb4, 0xb1, 0x96, 0x11,
	0x7f, 0x93, 0x93, 0x96, 0x5a, 0x58, 0x2b, 0xb5, 0xb0, 0xf5, 0x5d, 0x83, 0xc7, 0x69, 0x1d, 0x1f,
	0x0a, 0x47, 0x70, 0x57, 0xca, 0x1e, 0x54, 0x13, 0x01, 0xcb, 0xc8, 0xb2, 0x9b, 0xd1, 0x91, 0xe4,
	0x67, 0xcd, 0x59, 0x9b, 0x35, 0x67, 0xcb, 0x81, 0x66, 0xda, 0x7d, 0xda, 0xf7, 0x51, 0x59, 0x95,
	0xbb, 0xde, 0xbd, 0x94, 0x74, 0xa6, 0xf6, 0x59, 0x2b, 0xd8, 0xe7, 0xa3, 0xdf, 0x55, 0xc5, 0x36,
	0x57, 0xc8, 0xbe, 0x52, 0x0f, 0x49, 0x57, 0xfd, 0xaa, 0x34, 0xed, 0xfc, 0xf3, 0x63, 0x17, 0xcc,
	0xac, 0x51, 0x92, 0x27, 0x9f, 0x60, 0x53, 0xb1, 0x1f, 0x31, 0x65, 0x64, 0x91, 0x33, 0x8d, 0xa7,
	0xf3, 0x10, 0xf6, 0xe4, 0x27, 0x06, 0xb0, 0x5b, 0x60, 0x4a, 0x72, 0xa0, 0x54, 0x53, 0xea, 0x5a,
	0xe3, 0x70, 0x31, 0x5c, 0xae, 0x77, 0x03, 0x3b, 0x53, 0xb6, 0x25, 0xfb, 0x32, 0x4b, 0xa9, 0xab,
	0x5f, 0x2c, 0x82, 0xca, 0x95, 0xbe, 0x69, 0xf0, 0xa0, 0xd4, 0xf8, 0xe4, 0xb9, 0x4c, 0x36, 0x6f,
	0x3f, 0x8c, 0x93, 0x65, 0xd0, 0x79, 0x09, 0xbf, 0x34, 0x78, 0x38, 0xcb, 0xf3, 0xe4, 0x70, 0x9a,
	0x77, 0xe6, 0x76, 0x18, 0xa7, 0x4b, 0x3e, 0xc8, 0x6b, 0xb9, 0x85, 0x46, 0x89, 0xf3, 0xc9, 0x33,
	0x99, 0x74, 0xce, 0x7a, 0x1c, 0x2f, 0x8e, 0x9d, 0x68, 0x9f, 0x9f, 0x80, 0x31, 0xf4, 0xc3, 0xbe,
	0xeb, 0x67, 0x8f, 0xdd, 0x88, 0xda, 0x43, 0x16, 0x79, 0x82, 0xe5, 0x7c, 0x4b, 0x9a, 0xe2, 0x59,
	0x44, 0x2f, 0xff, 0xfb, 0xb8, 0x26, 0x60, 0xfd, 0xaa, 0xf8, 0x7f, 0x3e, 0xfe, 0x13, 0x00, 0x00,
	0xff, 0xff, 0xd4, 0x35, 0xa9, 0x51, 0xcc, 0x07, 0x00, 0x00,
}
