// Code generated by protoc-gen-go. DO NOT EDIT.
// source: webhook.proto

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Webhook_ContentType int32

const (
	Webhook_DEFAULT Webhook_ContentType = 0
	Webhook_JSON    Webhook_ContentType = 1
	Webhook_PROTO   Webhook_ContentType = 2
)

var Webhook_ContentType_name = map[int32]string{
	0: "DEFAULT",
	1: "JSON",
	2: "PROTO",
}
var Webhook_ContentType_value = map[string]int32{
	"DEFAULT": 0,
	"JSON":    1,
	"PROTO":   2,
}

func (x Webhook_ContentType) String() string {
	return proto.EnumName(Webhook_ContentType_name, int32(x))
}
func (Webhook_ContentType) EnumDescriptor() ([]byte, []int) { return fileDescriptor21, []int{0, 0} }

type Webhook struct {
	Id           int64                   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Organization string                  `protobuf:"bytes,2,opt,name=organization" json:"organization,omitempty"`
	Description  string                  `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Data         *Webhook_WebhookData    `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	Filters      *Webhook_WebhookFilters `protobuf:"bytes,5,opt,name=filters" json:"filters,omitempty"`
	Tags         []*Tag                  `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
	Health       Health                  `protobuf:"varint,7,opt,name=health,enum=hiber.Health" json:"health,omitempty"`
	// When the webhook call fails, it enters cooldown, so as not to overload a failing server
	// or spend unnecessary time on an incorrectly configured webhook.
	// When the first call after the cooldown time has passed fails again, the cooldown is increased as follows:
	// 1m, 2m, 5m, 10m, 15m, 30m, 1h, 3h, 6h, 12h, 24h
	//
	// To disable the cooldown, use EnableWebhookRequest to re-enable it.
	InCooldownUntil *Timestamp `protobuf:"bytes,8,opt,name=in_cooldown_until,json=inCooldownUntil" json:"in_cooldown_until,omitempty"`
}

func (m *Webhook) Reset()                    { *m = Webhook{} }
func (m *Webhook) String() string            { return proto.CompactTextString(m) }
func (*Webhook) ProtoMessage()               {}
func (*Webhook) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{0} }

func (m *Webhook) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Webhook) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *Webhook) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Webhook) GetData() *Webhook_WebhookData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Webhook) GetFilters() *Webhook_WebhookFilters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Webhook) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Webhook) GetHealth() Health {
	if m != nil {
		return m.Health
	}
	return Health_OK
}

func (m *Webhook) GetInCooldownUntil() *Timestamp {
	if m != nil {
		return m.InCooldownUntil
	}
	return nil
}

type Webhook_WebhookData struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// Used to generate the HMAC-SHA256 header on every webhook call, which you can use to verify the message.
	// The HMAC-SHA256 header is calculated with the message body and this secret.
	// There are many examples of how to do this in different languages, for example:
	// https://github.com/danharper/hmac-examples
	Secret        string              `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	ContentType   Webhook_ContentType `protobuf:"varint,3,opt,name=content_type,json=contentType,enum=hiber.webhook.Webhook_ContentType" json:"content_type,omitempty"`
	Disabled      bool                `protobuf:"varint,4,opt,name=disabled" json:"disabled,omitempty"`
	CertificateId int64               `protobuf:"varint,5,opt,name=certificate_id,json=certificateId" json:"certificate_id,omitempty"`
}

func (m *Webhook_WebhookData) Reset()                    { *m = Webhook_WebhookData{} }
func (m *Webhook_WebhookData) String() string            { return proto.CompactTextString(m) }
func (*Webhook_WebhookData) ProtoMessage()               {}
func (*Webhook_WebhookData) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{0, 0} }

func (m *Webhook_WebhookData) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Webhook_WebhookData) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *Webhook_WebhookData) GetContentType() Webhook_ContentType {
	if m != nil {
		return m.ContentType
	}
	return Webhook_DEFAULT
}

func (m *Webhook_WebhookData) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *Webhook_WebhookData) GetCertificateId() int64 {
	if m != nil {
		return m.CertificateId
	}
	return 0
}

type Webhook_WebhookFilters struct {
	EventTypes   *Filter_Events `protobuf:"bytes,1,opt,name=event_types,json=eventTypes" json:"event_types,omitempty"`
	ModemNumbers *Filter_Modems `protobuf:"bytes,2,opt,name=modem_numbers,json=modemNumbers" json:"modem_numbers,omitempty"`
	Tags         *Filter_Tags   `protobuf:"bytes,3,opt,name=tags" json:"tags,omitempty"`
}

func (m *Webhook_WebhookFilters) Reset()                    { *m = Webhook_WebhookFilters{} }
func (m *Webhook_WebhookFilters) String() string            { return proto.CompactTextString(m) }
func (*Webhook_WebhookFilters) ProtoMessage()               {}
func (*Webhook_WebhookFilters) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{0, 1} }

func (m *Webhook_WebhookFilters) GetEventTypes() *Filter_Events {
	if m != nil {
		return m.EventTypes
	}
	return nil
}

func (m *Webhook_WebhookFilters) GetModemNumbers() *Filter_Modems {
	if m != nil {
		return m.ModemNumbers
	}
	return nil
}

func (m *Webhook_WebhookFilters) GetTags() *Filter_Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

type WebhookSelection struct {
	Description    string           `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Url            string           `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Webhooks       *Filter_Webhooks `protobuf:"bytes,3,opt,name=webhooks" json:"webhooks,omitempty"`
	Tags           *TagSelection    `protobuf:"bytes,4,opt,name=tags" json:"tags,omitempty"`
	Health         []Health         `protobuf:"varint,5,rep,packed,name=health,enum=hiber.Health" json:"health,omitempty"`
	CertificateIds []int64          `protobuf:"varint,6,rep,packed,name=certificate_ids,json=certificateIds" json:"certificate_ids,omitempty"`
}

func (m *WebhookSelection) Reset()                    { *m = WebhookSelection{} }
func (m *WebhookSelection) String() string            { return proto.CompactTextString(m) }
func (*WebhookSelection) ProtoMessage()               {}
func (*WebhookSelection) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{1} }

func (m *WebhookSelection) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *WebhookSelection) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *WebhookSelection) GetWebhooks() *Filter_Webhooks {
	if m != nil {
		return m.Webhooks
	}
	return nil
}

func (m *WebhookSelection) GetTags() *TagSelection {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *WebhookSelection) GetHealth() []Health {
	if m != nil {
		return m.Health
	}
	return nil
}

func (m *WebhookSelection) GetCertificateIds() []int64 {
	if m != nil {
		return m.CertificateIds
	}
	return nil
}

type WebhookCall struct {
	Time       *Timestamp        `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Url        string            `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Headers    map[string]string `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body       []byte            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Successful bool              `protobuf:"varint,5,opt,name=successful" json:"successful,omitempty"`
	Error      string            `protobuf:"bytes,6,opt,name=error" json:"error,omitempty"`
}

func (m *WebhookCall) Reset()                    { *m = WebhookCall{} }
func (m *WebhookCall) String() string            { return proto.CompactTextString(m) }
func (*WebhookCall) ProtoMessage()               {}
func (*WebhookCall) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{2} }

func (m *WebhookCall) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *WebhookCall) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *WebhookCall) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *WebhookCall) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *WebhookCall) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *WebhookCall) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type WebhookHistorySelection struct {
	OnlyFailures bool       `protobuf:"varint,2,opt,name=only_failures,json=onlyFailures" json:"only_failures,omitempty"`
	TimeRange    *TimeRange `protobuf:"bytes,3,opt,name=time_range,json=timeRange" json:"time_range,omitempty"`
}

func (m *WebhookHistorySelection) Reset()                    { *m = WebhookHistorySelection{} }
func (m *WebhookHistorySelection) String() string            { return proto.CompactTextString(m) }
func (*WebhookHistorySelection) ProtoMessage()               {}
func (*WebhookHistorySelection) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{3} }

func (m *WebhookHistorySelection) GetOnlyFailures() bool {
	if m != nil {
		return m.OnlyFailures
	}
	return false
}

func (m *WebhookHistorySelection) GetTimeRange() *TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

type ListWebhooksRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string            `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *WebhookSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination       `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListWebhooksRequest) Reset()                    { *m = ListWebhooksRequest{} }
func (m *ListWebhooksRequest) String() string            { return proto.CompactTextString(m) }
func (*ListWebhooksRequest) ProtoMessage()               {}
func (*ListWebhooksRequest) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{4} }

func (m *ListWebhooksRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ListWebhooksRequest) GetSelection() *WebhookSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListWebhooksRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListWebhooksRequest_Response struct {
	Webhooks   []*Webhook           `protobuf:"bytes,1,rep,name=webhooks" json:"webhooks,omitempty"`
	Request    *ListWebhooksRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result   `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListWebhooksRequest_Response) Reset()         { *m = ListWebhooksRequest_Response{} }
func (m *ListWebhooksRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListWebhooksRequest_Response) ProtoMessage()    {}
func (*ListWebhooksRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{4, 0}
}

func (m *ListWebhooksRequest_Response) GetWebhooks() []*Webhook {
	if m != nil {
		return m.Webhooks
	}
	return nil
}

func (m *ListWebhooksRequest_Response) GetRequest() *ListWebhooksRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListWebhooksRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type WebhookHistoryRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                   `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	WebhookId    int64                    `protobuf:"varint,2,opt,name=webhook_id,json=webhookId" json:"webhook_id,omitempty"`
	Selection    *WebhookHistorySelection `protobuf:"bytes,3,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination              `protobuf:"bytes,4,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *WebhookHistoryRequest) Reset()                    { *m = WebhookHistoryRequest{} }
func (m *WebhookHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*WebhookHistoryRequest) ProtoMessage()               {}
func (*WebhookHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{5} }

func (m *WebhookHistoryRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *WebhookHistoryRequest) GetWebhookId() int64 {
	if m != nil {
		return m.WebhookId
	}
	return 0
}

func (m *WebhookHistoryRequest) GetSelection() *WebhookHistorySelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *WebhookHistoryRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type WebhookHistoryRequest_Response struct {
	Calls      []*WebhookCall         `protobuf:"bytes,1,rep,name=calls" json:"calls,omitempty"`
	Request    *WebhookHistoryRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result     `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *WebhookHistoryRequest_Response) Reset()         { *m = WebhookHistoryRequest_Response{} }
func (m *WebhookHistoryRequest_Response) String() string { return proto.CompactTextString(m) }
func (*WebhookHistoryRequest_Response) ProtoMessage()    {}
func (*WebhookHistoryRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{5, 0}
}

func (m *WebhookHistoryRequest_Response) GetCalls() []*WebhookCall {
	if m != nil {
		return m.Calls
	}
	return nil
}

func (m *WebhookHistoryRequest_Response) GetRequest() *WebhookHistoryRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *WebhookHistoryRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type CreateWebhookRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                  `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Description  string                  `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Data         *Webhook_WebhookData    `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Filters      *Webhook_WebhookFilters `protobuf:"bytes,4,opt,name=filters" json:"filters,omitempty"`
	Tags         []int64                 `protobuf:"varint,5,rep,packed,name=tags" json:"tags,omitempty"`
	// Optionally, a client certificate can be used for the webhook call.
	// See the CertificateService for certificate management options.
	CertificateId int64 `protobuf:"varint,6,opt,name=certificate_id,json=certificateId" json:"certificate_id,omitempty"`
}

func (m *CreateWebhookRequest) Reset()                    { *m = CreateWebhookRequest{} }
func (m *CreateWebhookRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateWebhookRequest) ProtoMessage()               {}
func (*CreateWebhookRequest) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{6} }

func (m *CreateWebhookRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *CreateWebhookRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateWebhookRequest) GetData() *Webhook_WebhookData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateWebhookRequest) GetFilters() *Webhook_WebhookFilters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *CreateWebhookRequest) GetTags() []int64 {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CreateWebhookRequest) GetCertificateId() int64 {
	if m != nil {
		return m.CertificateId
	}
	return 0
}

type GetWebhookRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,2,opt,name=organization" json:"organization,omitempty"`
}

func (m *GetWebhookRequest) Reset()                    { *m = GetWebhookRequest{} }
func (m *GetWebhookRequest) String() string            { return proto.CompactTextString(m) }
func (*GetWebhookRequest) ProtoMessage()               {}
func (*GetWebhookRequest) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{7} }

func (m *GetWebhookRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetWebhookRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

type EnableWebhookRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,2,opt,name=organization" json:"organization,omitempty"`
}

func (m *EnableWebhookRequest) Reset()                    { *m = EnableWebhookRequest{} }
func (m *EnableWebhookRequest) String() string            { return proto.CompactTextString(m) }
func (*EnableWebhookRequest) ProtoMessage()               {}
func (*EnableWebhookRequest) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{8} }

func (m *EnableWebhookRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EnableWebhookRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

type DisableWebhookRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,2,opt,name=organization" json:"organization,omitempty"`
}

func (m *DisableWebhookRequest) Reset()                    { *m = DisableWebhookRequest{} }
func (m *DisableWebhookRequest) String() string            { return proto.CompactTextString(m) }
func (*DisableWebhookRequest) ProtoMessage()               {}
func (*DisableWebhookRequest) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{9} }

func (m *DisableWebhookRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DisableWebhookRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

type UpdateWebhookFilterRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                                   `protobuf:"bytes,2,opt,name=organization" json:"organization,omitempty"`
	EventFilter  *UpdateWebhookFilterRequest_UpdateEvents `protobuf:"bytes,3,opt,name=event_filter,json=eventFilter" json:"event_filter,omitempty"`
	ModemFilter  *UpdateWebhookFilterRequest_UpdateModems `protobuf:"bytes,4,opt,name=modem_filter,json=modemFilter" json:"modem_filter,omitempty"`
	TagFilter    *UpdateWebhookFilterRequest_UpdateTags   `protobuf:"bytes,5,opt,name=tag_filter,json=tagFilter" json:"tag_filter,omitempty"`
}

func (m *UpdateWebhookFilterRequest) Reset()                    { *m = UpdateWebhookFilterRequest{} }
func (m *UpdateWebhookFilterRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateWebhookFilterRequest) ProtoMessage()               {}
func (*UpdateWebhookFilterRequest) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{10} }

func (m *UpdateWebhookFilterRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateWebhookFilterRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UpdateWebhookFilterRequest) GetEventFilter() *UpdateWebhookFilterRequest_UpdateEvents {
	if m != nil {
		return m.EventFilter
	}
	return nil
}

func (m *UpdateWebhookFilterRequest) GetModemFilter() *UpdateWebhookFilterRequest_UpdateModems {
	if m != nil {
		return m.ModemFilter
	}
	return nil
}

func (m *UpdateWebhookFilterRequest) GetTagFilter() *UpdateWebhookFilterRequest_UpdateTags {
	if m != nil {
		return m.TagFilter
	}
	return nil
}

type UpdateWebhookFilterRequest_UpdateEvents struct {
	Updated bool           `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Value   *Filter_Events `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdateWebhookFilterRequest_UpdateEvents) Reset() {
	*m = UpdateWebhookFilterRequest_UpdateEvents{}
}
func (m *UpdateWebhookFilterRequest_UpdateEvents) String() string { return proto.CompactTextString(m) }
func (*UpdateWebhookFilterRequest_UpdateEvents) ProtoMessage()    {}
func (*UpdateWebhookFilterRequest_UpdateEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{10, 0}
}

func (m *UpdateWebhookFilterRequest_UpdateEvents) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdateWebhookFilterRequest_UpdateEvents) GetValue() *Filter_Events {
	if m != nil {
		return m.Value
	}
	return nil
}

type UpdateWebhookFilterRequest_UpdateModems struct {
	Updated bool           `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Value   *Filter_Modems `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdateWebhookFilterRequest_UpdateModems) Reset() {
	*m = UpdateWebhookFilterRequest_UpdateModems{}
}
func (m *UpdateWebhookFilterRequest_UpdateModems) String() string { return proto.CompactTextString(m) }
func (*UpdateWebhookFilterRequest_UpdateModems) ProtoMessage()    {}
func (*UpdateWebhookFilterRequest_UpdateModems) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{10, 1}
}

func (m *UpdateWebhookFilterRequest_UpdateModems) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdateWebhookFilterRequest_UpdateModems) GetValue() *Filter_Modems {
	if m != nil {
		return m.Value
	}
	return nil
}

type UpdateWebhookFilterRequest_UpdateTags struct {
	Updated bool         `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Value   *Filter_Tags `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdateWebhookFilterRequest_UpdateTags) Reset()         { *m = UpdateWebhookFilterRequest_UpdateTags{} }
func (m *UpdateWebhookFilterRequest_UpdateTags) String() string { return proto.CompactTextString(m) }
func (*UpdateWebhookFilterRequest_UpdateTags) ProtoMessage()    {}
func (*UpdateWebhookFilterRequest_UpdateTags) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{10, 2}
}

func (m *UpdateWebhookFilterRequest_UpdateTags) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdateWebhookFilterRequest_UpdateTags) GetValue() *Filter_Tags {
	if m != nil {
		return m.Value
	}
	return nil
}

type UpdateWebhookRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string                              `protobuf:"bytes,2,opt,name=organization" json:"organization,omitempty"`
	Update       *UpdateWebhookRequest_UpdateWebhook `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
}

func (m *UpdateWebhookRequest) Reset()                    { *m = UpdateWebhookRequest{} }
func (m *UpdateWebhookRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateWebhookRequest) ProtoMessage()               {}
func (*UpdateWebhookRequest) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{11} }

func (m *UpdateWebhookRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateWebhookRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UpdateWebhookRequest) GetUpdate() *UpdateWebhookRequest_UpdateWebhook {
	if m != nil {
		return m.Update
	}
	return nil
}

type UpdateWebhookRequest_UpdateWebhook struct {
	Url         string                                           `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Secret      *UpdateClearableString                           `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	ContentType Webhook_ContentType                              `protobuf:"varint,3,opt,name=content_type,json=contentType,enum=hiber.webhook.Webhook_ContentType" json:"content_type,omitempty"`
	Description *UpdateClearableString                           `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	EventFilter *UpdateWebhookRequest_UpdateWebhook_UpdateEvents `protobuf:"bytes,5,opt,name=event_filter,json=eventFilter" json:"event_filter,omitempty"`
	ModemFilter *UpdateWebhookRequest_UpdateWebhook_UpdateModems `protobuf:"bytes,6,opt,name=modem_filter,json=modemFilter" json:"modem_filter,omitempty"`
	TagFilter   *UpdateWebhookRequest_UpdateWebhook_UpdateTags   `protobuf:"bytes,7,opt,name=tag_filter,json=tagFilter" json:"tag_filter,omitempty"`
	Active      *UpdateBoolean                                   `protobuf:"bytes,8,opt,name=active" json:"active,omitempty"`
	// A value of 0 removes the certificate
	CertificateId *UpdateOptionalId `protobuf:"bytes,9,opt,name=certificate_id,json=certificateId" json:"certificate_id,omitempty"`
}

func (m *UpdateWebhookRequest_UpdateWebhook) Reset()         { *m = UpdateWebhookRequest_UpdateWebhook{} }
func (m *UpdateWebhookRequest_UpdateWebhook) String() string { return proto.CompactTextString(m) }
func (*UpdateWebhookRequest_UpdateWebhook) ProtoMessage()    {}
func (*UpdateWebhookRequest_UpdateWebhook) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{11, 0}
}

func (m *UpdateWebhookRequest_UpdateWebhook) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *UpdateWebhookRequest_UpdateWebhook) GetSecret() *UpdateClearableString {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *UpdateWebhookRequest_UpdateWebhook) GetContentType() Webhook_ContentType {
	if m != nil {
		return m.ContentType
	}
	return Webhook_DEFAULT
}

func (m *UpdateWebhookRequest_UpdateWebhook) GetDescription() *UpdateClearableString {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *UpdateWebhookRequest_UpdateWebhook) GetEventFilter() *UpdateWebhookRequest_UpdateWebhook_UpdateEvents {
	if m != nil {
		return m.EventFilter
	}
	return nil
}

func (m *UpdateWebhookRequest_UpdateWebhook) GetModemFilter() *UpdateWebhookRequest_UpdateWebhook_UpdateModems {
	if m != nil {
		return m.ModemFilter
	}
	return nil
}

func (m *UpdateWebhookRequest_UpdateWebhook) GetTagFilter() *UpdateWebhookRequest_UpdateWebhook_UpdateTags {
	if m != nil {
		return m.TagFilter
	}
	return nil
}

func (m *UpdateWebhookRequest_UpdateWebhook) GetActive() *UpdateBoolean {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *UpdateWebhookRequest_UpdateWebhook) GetCertificateId() *UpdateOptionalId {
	if m != nil {
		return m.CertificateId
	}
	return nil
}

type UpdateWebhookRequest_UpdateWebhook_UpdateEvents struct {
	Updated bool           `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Value   *Filter_Events `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdateWebhookRequest_UpdateWebhook_UpdateEvents) Reset() {
	*m = UpdateWebhookRequest_UpdateWebhook_UpdateEvents{}
}
func (m *UpdateWebhookRequest_UpdateWebhook_UpdateEvents) String() string {
	return proto.CompactTextString(m)
}
func (*UpdateWebhookRequest_UpdateWebhook_UpdateEvents) ProtoMessage() {}
func (*UpdateWebhookRequest_UpdateWebhook_UpdateEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{11, 0, 0}
}

func (m *UpdateWebhookRequest_UpdateWebhook_UpdateEvents) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdateWebhookRequest_UpdateWebhook_UpdateEvents) GetValue() *Filter_Events {
	if m != nil {
		return m.Value
	}
	return nil
}

type UpdateWebhookRequest_UpdateWebhook_UpdateModems struct {
	Updated bool           `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Value   *Filter_Modems `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdateWebhookRequest_UpdateWebhook_UpdateModems) Reset() {
	*m = UpdateWebhookRequest_UpdateWebhook_UpdateModems{}
}
func (m *UpdateWebhookRequest_UpdateWebhook_UpdateModems) String() string {
	return proto.CompactTextString(m)
}
func (*UpdateWebhookRequest_UpdateWebhook_UpdateModems) ProtoMessage() {}
func (*UpdateWebhookRequest_UpdateWebhook_UpdateModems) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{11, 0, 1}
}

func (m *UpdateWebhookRequest_UpdateWebhook_UpdateModems) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdateWebhookRequest_UpdateWebhook_UpdateModems) GetValue() *Filter_Modems {
	if m != nil {
		return m.Value
	}
	return nil
}

type UpdateWebhookRequest_UpdateWebhook_UpdateTags struct {
	Updated bool         `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Value   *Filter_Tags `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdateWebhookRequest_UpdateWebhook_UpdateTags) Reset() {
	*m = UpdateWebhookRequest_UpdateWebhook_UpdateTags{}
}
func (m *UpdateWebhookRequest_UpdateWebhook_UpdateTags) String() string {
	return proto.CompactTextString(m)
}
func (*UpdateWebhookRequest_UpdateWebhook_UpdateTags) ProtoMessage() {}
func (*UpdateWebhookRequest_UpdateWebhook_UpdateTags) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{11, 0, 2}
}

func (m *UpdateWebhookRequest_UpdateWebhook_UpdateTags) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdateWebhookRequest_UpdateWebhook_UpdateTags) GetValue() *Filter_Tags {
	if m != nil {
		return m.Value
	}
	return nil
}

type UpdateWebhookTagsRequest struct {
	Organization string             `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	WebhookIds   []int64            `protobuf:"varint,2,rep,packed,name=webhook_ids,json=webhookIds" json:"webhook_ids,omitempty"`
	Update       *UpdateTagsForItem `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
}

func (m *UpdateWebhookTagsRequest) Reset()                    { *m = UpdateWebhookTagsRequest{} }
func (m *UpdateWebhookTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateWebhookTagsRequest) ProtoMessage()               {}
func (*UpdateWebhookTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{12} }

func (m *UpdateWebhookTagsRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UpdateWebhookTagsRequest) GetWebhookIds() []int64 {
	if m != nil {
		return m.WebhookIds
	}
	return nil
}

func (m *UpdateWebhookTagsRequest) GetUpdate() *UpdateTagsForItem {
	if m != nil {
		return m.Update
	}
	return nil
}

type UpdateWebhookTagsRequest_Response struct {
	Webhooks []*Webhook `protobuf:"bytes,1,rep,name=webhooks" json:"webhooks,omitempty"`
}

func (m *UpdateWebhookTagsRequest_Response) Reset()         { *m = UpdateWebhookTagsRequest_Response{} }
func (m *UpdateWebhookTagsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*UpdateWebhookTagsRequest_Response) ProtoMessage()    {}
func (*UpdateWebhookTagsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{12, 0}
}

func (m *UpdateWebhookTagsRequest_Response) GetWebhooks() []*Webhook {
	if m != nil {
		return m.Webhooks
	}
	return nil
}

type DeleteWebhookRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,2,opt,name=organization" json:"organization,omitempty"`
}

func (m *DeleteWebhookRequest) Reset()                    { *m = DeleteWebhookRequest{} }
func (m *DeleteWebhookRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteWebhookRequest) ProtoMessage()               {}
func (*DeleteWebhookRequest) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{13} }

func (m *DeleteWebhookRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteWebhookRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

type DeleteWebhookRequest_Response struct {
}

func (m *DeleteWebhookRequest_Response) Reset()         { *m = DeleteWebhookRequest_Response{} }
func (m *DeleteWebhookRequest_Response) String() string { return proto.CompactTextString(m) }
func (*DeleteWebhookRequest_Response) ProtoMessage()    {}
func (*DeleteWebhookRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor21, []int{13, 0}
}

func init() {
	proto.RegisterType((*Webhook)(nil), "hiber.webhook.Webhook")
	proto.RegisterType((*Webhook_WebhookData)(nil), "hiber.webhook.Webhook.WebhookData")
	proto.RegisterType((*Webhook_WebhookFilters)(nil), "hiber.webhook.Webhook.WebhookFilters")
	proto.RegisterType((*WebhookSelection)(nil), "hiber.webhook.WebhookSelection")
	proto.RegisterType((*WebhookCall)(nil), "hiber.webhook.WebhookCall")
	proto.RegisterType((*WebhookHistorySelection)(nil), "hiber.webhook.WebhookHistorySelection")
	proto.RegisterType((*ListWebhooksRequest)(nil), "hiber.webhook.ListWebhooksRequest")
	proto.RegisterType((*ListWebhooksRequest_Response)(nil), "hiber.webhook.ListWebhooksRequest.Response")
	proto.RegisterType((*WebhookHistoryRequest)(nil), "hiber.webhook.WebhookHistoryRequest")
	proto.RegisterType((*WebhookHistoryRequest_Response)(nil), "hiber.webhook.WebhookHistoryRequest.Response")
	proto.RegisterType((*CreateWebhookRequest)(nil), "hiber.webhook.CreateWebhookRequest")
	proto.RegisterType((*GetWebhookRequest)(nil), "hiber.webhook.GetWebhookRequest")
	proto.RegisterType((*EnableWebhookRequest)(nil), "hiber.webhook.EnableWebhookRequest")
	proto.RegisterType((*DisableWebhookRequest)(nil), "hiber.webhook.DisableWebhookRequest")
	proto.RegisterType((*UpdateWebhookFilterRequest)(nil), "hiber.webhook.UpdateWebhookFilterRequest")
	proto.RegisterType((*UpdateWebhookFilterRequest_UpdateEvents)(nil), "hiber.webhook.UpdateWebhookFilterRequest.UpdateEvents")
	proto.RegisterType((*UpdateWebhookFilterRequest_UpdateModems)(nil), "hiber.webhook.UpdateWebhookFilterRequest.UpdateModems")
	proto.RegisterType((*UpdateWebhookFilterRequest_UpdateTags)(nil), "hiber.webhook.UpdateWebhookFilterRequest.UpdateTags")
	proto.RegisterType((*UpdateWebhookRequest)(nil), "hiber.webhook.UpdateWebhookRequest")
	proto.RegisterType((*UpdateWebhookRequest_UpdateWebhook)(nil), "hiber.webhook.UpdateWebhookRequest.UpdateWebhook")
	proto.RegisterType((*UpdateWebhookRequest_UpdateWebhook_UpdateEvents)(nil), "hiber.webhook.UpdateWebhookRequest.UpdateWebhook.UpdateEvents")
	proto.RegisterType((*UpdateWebhookRequest_UpdateWebhook_UpdateModems)(nil), "hiber.webhook.UpdateWebhookRequest.UpdateWebhook.UpdateModems")
	proto.RegisterType((*UpdateWebhookRequest_UpdateWebhook_UpdateTags)(nil), "hiber.webhook.UpdateWebhookRequest.UpdateWebhook.UpdateTags")
	proto.RegisterType((*UpdateWebhookTagsRequest)(nil), "hiber.webhook.UpdateWebhookTagsRequest")
	proto.RegisterType((*UpdateWebhookTagsRequest_Response)(nil), "hiber.webhook.UpdateWebhookTagsRequest.Response")
	proto.RegisterType((*DeleteWebhookRequest)(nil), "hiber.webhook.DeleteWebhookRequest")
	proto.RegisterType((*DeleteWebhookRequest_Response)(nil), "hiber.webhook.DeleteWebhookRequest.Response")
	proto.RegisterEnum("hiber.webhook.Webhook_ContentType", Webhook_ContentType_name, Webhook_ContentType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WebhookService service

type WebhookServiceClient interface {
	List(ctx context.Context, in *ListWebhooksRequest, opts ...grpc.CallOption) (*ListWebhooksRequest_Response, error)
	History(ctx context.Context, in *WebhookHistoryRequest, opts ...grpc.CallOption) (*WebhookHistoryRequest_Response, error)
	Create(ctx context.Context, in *CreateWebhookRequest, opts ...grpc.CallOption) (*Webhook, error)
	Enable(ctx context.Context, in *EnableWebhookRequest, opts ...grpc.CallOption) (*Webhook, error)
	Disable(ctx context.Context, in *DisableWebhookRequest, opts ...grpc.CallOption) (*Webhook, error)
	UpdateFilter(ctx context.Context, in *UpdateWebhookFilterRequest, opts ...grpc.CallOption) (*Webhook, error)
	Update(ctx context.Context, in *UpdateWebhookRequest, opts ...grpc.CallOption) (*Webhook, error)
	UpdateTags(ctx context.Context, in *UpdateWebhookTagsRequest, opts ...grpc.CallOption) (*UpdateWebhookTagsRequest_Response, error)
	Get(ctx context.Context, in *GetWebhookRequest, opts ...grpc.CallOption) (*Webhook, error)
	Delete(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*DeleteWebhookRequest_Response, error)
}

type webhookServiceClient struct {
	cc *grpc.ClientConn
}

func NewWebhookServiceClient(cc *grpc.ClientConn) WebhookServiceClient {
	return &webhookServiceClient{cc}
}

func (c *webhookServiceClient) List(ctx context.Context, in *ListWebhooksRequest, opts ...grpc.CallOption) (*ListWebhooksRequest_Response, error) {
	out := new(ListWebhooksRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) History(ctx context.Context, in *WebhookHistoryRequest, opts ...grpc.CallOption) (*WebhookHistoryRequest_Response, error) {
	out := new(WebhookHistoryRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/History", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) Create(ctx context.Context, in *CreateWebhookRequest, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) Enable(ctx context.Context, in *EnableWebhookRequest, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/Enable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) Disable(ctx context.Context, in *DisableWebhookRequest, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/Disable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) UpdateFilter(ctx context.Context, in *UpdateWebhookFilterRequest, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/UpdateFilter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) Update(ctx context.Context, in *UpdateWebhookRequest, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) UpdateTags(ctx context.Context, in *UpdateWebhookTagsRequest, opts ...grpc.CallOption) (*UpdateWebhookTagsRequest_Response, error) {
	out := new(UpdateWebhookTagsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/UpdateTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) Get(ctx context.Context, in *GetWebhookRequest, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) Delete(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*DeleteWebhookRequest_Response, error) {
	out := new(DeleteWebhookRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WebhookService service

type WebhookServiceServer interface {
	List(context.Context, *ListWebhooksRequest) (*ListWebhooksRequest_Response, error)
	History(context.Context, *WebhookHistoryRequest) (*WebhookHistoryRequest_Response, error)
	Create(context.Context, *CreateWebhookRequest) (*Webhook, error)
	Enable(context.Context, *EnableWebhookRequest) (*Webhook, error)
	Disable(context.Context, *DisableWebhookRequest) (*Webhook, error)
	UpdateFilter(context.Context, *UpdateWebhookFilterRequest) (*Webhook, error)
	Update(context.Context, *UpdateWebhookRequest) (*Webhook, error)
	UpdateTags(context.Context, *UpdateWebhookTagsRequest) (*UpdateWebhookTagsRequest_Response, error)
	Get(context.Context, *GetWebhookRequest) (*Webhook, error)
	Delete(context.Context, *DeleteWebhookRequest) (*DeleteWebhookRequest_Response, error)
}

func RegisterWebhookServiceServer(s *grpc.Server, srv WebhookServiceServer) {
	s.RegisterService(&_WebhookService_serviceDesc, srv)
}

func _WebhookService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebhooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).List(ctx, req.(*ListWebhooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).History(ctx, req.(*WebhookHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).Create(ctx, req.(*CreateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).Enable(ctx, req.(*EnableWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).Disable(ctx, req.(*DisableWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_UpdateFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).UpdateFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/UpdateFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).UpdateFilter(ctx, req.(*UpdateWebhookFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).Update(ctx, req.(*UpdateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_UpdateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).UpdateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/UpdateTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).UpdateTags(ctx, req.(*UpdateWebhookTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).Get(ctx, req.(*GetWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).Delete(ctx, req.(*DeleteWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebhookService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.webhook.WebhookService",
	HandlerType: (*WebhookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _WebhookService_List_Handler,
		},
		{
			MethodName: "History",
			Handler:    _WebhookService_History_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _WebhookService_Create_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _WebhookService_Enable_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _WebhookService_Disable_Handler,
		},
		{
			MethodName: "UpdateFilter",
			Handler:    _WebhookService_UpdateFilter_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WebhookService_Update_Handler,
		},
		{
			MethodName: "UpdateTags",
			Handler:    _WebhookService_UpdateTags_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _WebhookService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WebhookService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webhook.proto",
}

func init() { proto.RegisterFile("webhook.proto", fileDescriptor21) }

var fileDescriptor21 = []byte{
	// 1528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0x4d, 0x73, 0xd3, 0x46,
	0x18, 0x46, 0xb6, 0x2c, 0xdb, 0xaf, 0x9d, 0x60, 0xb6, 0x01, 0x3c, 0x1a, 0x28, 0x1e, 0xf1, 0x95,
	0x16, 0xea, 0x80, 0x4b, 0x19, 0xca, 0xd0, 0x30, 0x90, 0x0f, 0x08, 0x03, 0x24, 0x6c, 0x42, 0x99,
	0x96, 0x99, 0x7a, 0xd6, 0xd2, 0x46, 0xd1, 0xa0, 0x48, 0xae, 0xb4, 0x0e, 0xe3, 0x5e, 0x7b, 0x6c,
	0xa7, 0xd3, 0xdf, 0xd1, 0x1f, 0xd0, 0x3b, 0xbf, 0xa3, 0x87, 0x5e, 0x7a, 0xed, 0xb9, 0xd7, 0x8e,
	0x76, 0x57, 0xb6, 0x64, 0xcb, 0xae, 0xf3, 0x71, 0xeb, 0x29, 0xde, 0xdd, 0xe7, 0x7d, 0xf7, 0xfd,
	0xd6, 0xb3, 0x81, 0xb9, 0xf7, 0xb4, 0xb3, 0xe7, 0xfb, 0xef, 0x9a, 0xdd, 0xc0, 0x67, 0x3e, 0x9a,
	0xdb, 0x73, 0x3a, 0x34, 0x68, 0xca, 0x4d, 0x1d, 0x3a, 0x24, 0xa4, 0xe2, 0x48, 0x2f, 0x33, 0x62,
	0xcb, 0x9f, 0x97, 0x6c, 0xdf, 0xb7, 0x5d, 0xba, 0xc4, 0x57, 0x9d, 0xde, 0xee, 0x12, 0x73, 0xf6,
	0x69, 0xc8, 0xc8, 0x7e, 0x57, 0x00, 0x8c, 0x1f, 0x35, 0x28, 0xbe, 0x11, 0x3a, 0xd0, 0x3c, 0xe4,
	0x1c, 0xab, 0xae, 0x34, 0x94, 0xc5, 0x3c, 0xce, 0x39, 0x16, 0x32, 0xa0, 0xea, 0x07, 0x36, 0xf1,
	0x9c, 0x1f, 0x08, 0x73, 0x7c, 0xaf, 0x9e, 0x6b, 0x28, 0x8b, 0x65, 0x9c, 0xda, 0x43, 0x0d, 0xa8,
	0x58, 0x34, 0x34, 0x03, 0xa7, 0xcb, 0x21, 0x79, 0x0e, 0x49, 0x6e, 0xa1, 0xbb, 0xa0, 0x5a, 0x84,
	0x91, 0xba, 0xda, 0x50, 0x16, 0x2b, 0x2d, 0xa3, 0x99, 0xb2, 0xbb, 0xf9, 0x26, 0xfd, 0x77, 0x95,
	0x30, 0x82, 0x39, 0x1e, 0x3d, 0x84, 0xe2, 0xae, 0xe3, 0x32, 0x1a, 0x84, 0xf5, 0x02, 0x17, 0xbd,
	0x3a, 0x5d, 0x74, 0x5d, 0x80, 0x71, 0x2c, 0x85, 0x0c, 0x50, 0x19, 0xb1, 0xc3, 0xba, 0xd6, 0xc8,
	0x2f, 0x56, 0x5a, 0xf3, 0x52, 0x3a, 0x8a, 0xcd, 0x0e, 0xb1, 0x31, 0x3f, 0x43, 0x57, 0x41, 0xdb,
	0xa3, 0xc4, 0x65, 0x7b, 0xf5, 0x62, 0x43, 0x59, 0x9c, 0x6f, 0xcd, 0x49, 0xd4, 0x53, 0xbe, 0x89,
	0xe5, 0x21, 0x7a, 0x00, 0x67, 0x1c, 0xaf, 0x6d, 0xfa, 0xbe, 0x6b, 0xf9, 0xef, 0xbd, 0x76, 0xcf,
	0x63, 0x8e, 0x5b, 0x2f, 0x71, 0xab, 0x6a, 0x52, 0x62, 0x27, 0x0e, 0x2c, 0x3e, 0xed, 0x78, 0x2b,
	0x12, 0xf9, 0x3a, 0x02, 0xea, 0x1f, 0x14, 0xa8, 0x24, 0xfc, 0x43, 0x35, 0xc8, 0xf7, 0x02, 0x97,
	0x07, 0xba, 0x8c, 0xa3, 0x9f, 0xe8, 0x1c, 0x68, 0x21, 0x35, 0x03, 0xca, 0x64, 0x8c, 0xe5, 0x0a,
	0xad, 0x41, 0xd5, 0xf4, 0x3d, 0x46, 0x3d, 0xd6, 0x66, 0xfd, 0x2e, 0xe5, 0xe1, 0x9d, 0x9f, 0x18,
	0xc3, 0x15, 0x01, 0xdd, 0xe9, 0x77, 0x29, 0xae, 0x98, 0xc3, 0x05, 0xd2, 0xa1, 0x64, 0x39, 0x21,
	0xe9, 0xb8, 0xd4, 0xe2, 0x69, 0x28, 0xe1, 0xc1, 0x1a, 0x5d, 0x85, 0x79, 0x93, 0x06, 0xcc, 0xd9,
	0x75, 0x4c, 0xc2, 0x68, 0xdb, 0xb1, 0x78, 0xb4, 0xf3, 0x78, 0x2e, 0xb1, 0xbb, 0x61, 0xe9, 0xbf,
	0x29, 0x30, 0x9f, 0x0e, 0x34, 0xfa, 0x02, 0x2a, 0xf4, 0x20, 0x36, 0x2d, 0xe4, 0xee, 0x54, 0x5a,
	0x0b, 0xd2, 0x36, 0x01, 0x6a, 0xae, 0x45, 0x80, 0x10, 0x03, 0x07, 0x46, 0xb6, 0x84, 0xe8, 0x4b,
	0x98, 0xdb, 0xf7, 0x2d, 0xba, 0xdf, 0xf6, 0x7a, 0xfb, 0x9d, 0x28, 0xbb, 0xb9, 0x2c, 0xc1, 0x17,
	0x11, 0x24, 0xc4, 0x55, 0x0e, 0x7d, 0x29, 0x90, 0xe8, 0x9a, 0xcc, 0x68, 0x9e, 0x4b, 0xa0, 0xb4,
	0xc4, 0x0e, 0xb1, 0x43, 0x91, 0x55, 0x63, 0x09, 0x2a, 0x89, 0x58, 0xa0, 0x0a, 0x14, 0x57, 0xd7,
	0xd6, 0x1f, 0xbd, 0x7e, 0xbe, 0x53, 0x3b, 0x85, 0x4a, 0xa0, 0x3e, 0xdb, 0xde, 0x7c, 0x59, 0x53,
	0x50, 0x19, 0x0a, 0x5b, 0x78, 0x73, 0x67, 0xb3, 0x96, 0x33, 0xfe, 0x51, 0xa0, 0x26, 0xbd, 0xdb,
	0xa6, 0x2e, 0x35, 0xb3, 0x4a, 0x5b, 0x19, 0x2f, 0x6d, 0x99, 0xc8, 0xdc, 0x30, 0x91, 0x2d, 0x28,
	0xc9, 0xac, 0xc4, 0x56, 0x9e, 0x4b, 0x5b, 0x29, 0x6f, 0x09, 0xf1, 0x00, 0x87, 0x6e, 0x48, 0xaf,
	0x44, 0x83, 0x9c, 0x4f, 0xd7, 0xe9, 0xc0, 0x9c, 0xb1, 0x82, 0x2d, 0x34, 0xf2, 0x93, 0x0b, 0xf6,
	0x3a, 0x9c, 0x4e, 0x67, 0x55, 0xb4, 0x41, 0x1e, 0xcf, 0xa7, 0xd2, 0x1a, 0x1a, 0xbf, 0xe4, 0x06,
	0xb5, 0xb9, 0x42, 0x5c, 0x17, 0x5d, 0x01, 0x35, 0x1a, 0x11, 0x32, 0x9b, 0xe3, 0xc5, 0xcd, 0x4f,
	0x33, 0x1c, 0x7f, 0x04, 0xc5, 0x3d, 0x4a, 0xac, 0x28, 0x9f, 0x79, 0xde, 0x6f, 0xd7, 0xb3, 0x8b,
	0x34, 0xba, 0x24, 0x32, 0x36, 0x42, 0xae, 0x79, 0x2c, 0xe8, 0xe3, 0x58, 0x0e, 0x21, 0x50, 0x3b,
	0xbe, 0xd5, 0xe7, 0x71, 0xa8, 0x62, 0xfe, 0x1b, 0x7d, 0x0c, 0x10, 0xf6, 0x4c, 0x93, 0x86, 0xe1,
	0x6e, 0xcf, 0xe5, 0x95, 0x59, 0xc2, 0x89, 0x1d, 0xb4, 0x00, 0x05, 0x1a, 0x04, 0x7e, 0x50, 0xd7,
	0xb8, 0x29, 0x62, 0xa1, 0xdf, 0x87, 0x6a, 0xf2, 0x8a, 0xc8, 0xdc, 0x77, 0xb4, 0x1f, 0x37, 0xdc,
	0x3b, 0xda, 0x8f, 0xe4, 0x0e, 0x88, 0xdb, 0xa3, 0xd2, 0x05, 0xb1, 0xb8, 0x9f, 0xbb, 0xa7, 0x18,
	0x3e, 0x9c, 0x97, 0xa6, 0x3e, 0x75, 0x42, 0xe6, 0x07, 0xfd, 0x61, 0x41, 0x5c, 0x86, 0x39, 0xdf,
	0x73, 0xfb, 0xed, 0x5d, 0xe2, 0xb8, 0xbd, 0x80, 0x8a, 0xca, 0x2d, 0xe1, 0x6a, 0xb4, 0xb9, 0x2e,
	0xf7, 0xd0, 0x12, 0x40, 0x14, 0xa2, 0x76, 0x40, 0x3c, 0x9b, 0xca, 0x1a, 0x48, 0x86, 0x11, 0x47,
	0xfb, 0xb8, 0xcc, 0xe2, 0x9f, 0xc6, 0x5f, 0x39, 0xf8, 0xe8, 0xb9, 0x13, 0xb2, 0x41, 0x65, 0xd0,
	0xef, 0x7b, 0x34, 0x64, 0x63, 0xd3, 0x57, 0xc9, 0x98, 0xbe, 0x5f, 0x41, 0x39, 0x8c, 0xcd, 0x93,
	0x7d, 0x74, 0x29, 0x3b, 0xee, 0xc3, 0x3a, 0x1a, 0x4a, 0xa0, 0xdb, 0x00, 0x5d, 0x62, 0x3b, 0x1e,
	0x19, 0xcc, 0xee, 0x4a, 0xeb, 0x8c, 0x94, 0xdf, 0x1a, 0x1c, 0xe0, 0x04, 0x48, 0xff, 0x5d, 0x81,
	0x12, 0xa6, 0x61, 0xd7, 0xf7, 0x42, 0x9a, 0xaa, 0x76, 0x85, 0x67, 0xfd, 0x5c, 0xf6, 0xed, 0x89,
	0x6a, 0x7f, 0x00, 0xc5, 0x40, 0x78, 0x28, 0x0d, 0x1e, 0x9d, 0x66, 0x19, 0xb1, 0xc0, 0xb1, 0x08,
	0xba, 0x97, 0x61, 0x71, 0x7d, 0xcc, 0xe2, 0x26, 0xa6, 0x61, 0xcf, 0x65, 0x49, 0xc3, 0x8d, 0x9f,
	0xf3, 0x70, 0x36, 0x9d, 0xd8, 0xc3, 0x04, 0xfa, 0x22, 0x80, 0xb4, 0x2f, 0x9a, 0x90, 0x39, 0x3e,
	0x21, 0xcb, 0x72, 0x67, 0xc3, 0x42, 0xab, 0xc9, 0x3c, 0x08, 0xab, 0xae, 0x65, 0x47, 0x62, 0xb4,
	0xa8, 0x26, 0xa7, 0x43, 0x3d, 0x74, 0x3a, 0x6e, 0x41, 0xc1, 0x24, 0xae, 0x1b, 0xe7, 0x42, 0x9f,
	0xdc, 0x81, 0x58, 0x00, 0xd1, 0xf2, 0x68, 0x32, 0xae, 0x4c, 0xb5, 0xfa, 0x04, 0xd3, 0xf1, 0x6b,
	0x0e, 0x16, 0x56, 0x02, 0x4a, 0x18, 0x8d, 0x4b, 0xe4, 0x10, 0xd9, 0x18, 0x99, 0xcc, 0xb9, 0xc9,
	0xa4, 0x23, 0x7f, 0x74, 0xd2, 0xa1, 0x1e, 0x89, 0x74, 0x20, 0x39, 0xcc, 0x0b, 0x7c, 0xda, 0xc6,
	0x33, 0x7b, 0xf4, 0x13, 0xab, 0x65, 0x7c, 0x62, 0x8d, 0x17, 0x70, 0xe6, 0x09, 0x65, 0x23, 0xe1,
	0x38, 0x02, 0x27, 0x7b, 0xa6, 0x96, 0xf2, 0x35, 0xd5, 0xd8, 0x82, 0x85, 0x35, 0x2f, 0xfa, 0xc6,
	0x9f, 0x98, 0xc6, 0x57, 0x70, 0x76, 0x55, 0xd0, 0x86, 0x13, 0x53, 0xf9, 0xa7, 0x0a, 0xfa, 0xeb,
	0xae, 0x35, 0x2c, 0x03, 0x11, 0xd0, 0x63, 0x28, 0x46, 0xdf, 0x40, 0x55, 0xd0, 0x12, 0x91, 0x12,
	0x59, 0x02, 0x77, 0x47, 0xf2, 0x38, 0xf9, 0x52, 0x79, 0x24, 0x99, 0x8b, 0xa0, 0x38, 0x02, 0x10,
	0xa9, 0x16, 0xd4, 0x45, 0xaa, 0x56, 0x8f, 0xa6, 0x5a, 0x72, 0x9b, 0x0a, 0xd7, 0x25, 0x55, 0x6f,
	0x03, 0x30, 0x62, 0xc7, 0x8a, 0x05, 0xe1, 0xbd, 0x73, 0x58, 0xc5, 0x9c, 0x02, 0x45, 0xec, 0x5f,
	0x1c, 0xea, 0x3b, 0x50, 0x4d, 0x3a, 0x83, 0xea, 0x50, 0xec, 0xf1, 0xb5, 0x88, 0x69, 0x09, 0xc7,
	0x4b, 0xf4, 0x69, 0xf2, 0x7b, 0x38, 0x89, 0xc5, 0x09, 0xc8, 0x50, 0xab, 0xf0, 0xe3, 0xc8, 0x5a,
	0x65, 0x18, 0xa4, 0xd6, 0x2d, 0x80, 0xa1, 0x13, 0x53, 0x74, 0x2e, 0xa6, 0x75, 0x66, 0x91, 0x40,
	0x01, 0x78, 0xa6, 0x96, 0xb4, 0x5a, 0xd1, 0xf8, 0xa9, 0x04, 0x0b, 0xa9, 0xc0, 0x1d, 0xa7, 0xb6,
	0x36, 0x40, 0x13, 0x76, 0xc8, 0xaa, 0xba, 0x3d, 0x2d, 0x43, 0xe9, 0xdc, 0xc4, 0x9b, 0x52, 0x81,
	0xfe, 0xb7, 0x06, 0x73, 0xa9, 0x93, 0x8c, 0x67, 0xc1, 0x9d, 0xd4, 0xb3, 0xa0, 0xd2, 0xba, 0x20,
	0xaf, 0x13, 0x72, 0x2b, 0x2e, 0x25, 0x41, 0xd4, 0x8d, 0xdb, 0x2c, 0x70, 0x3c, 0xfb, 0xa4, 0x1f,
	0x0d, 0xcb, 0xe9, 0x21, 0xab, 0xce, 0x60, 0x41, 0x6a, 0x04, 0x93, 0x91, 0x3e, 0x14, 0x35, 0xbd,
	0x7c, 0xe8, 0x88, 0x4d, 0xe9, 0x47, 0x32, 0xd2, 0x8f, 0xda, 0xf1, 0xae, 0xc8, 0xea, 0xcb, 0xb7,
	0xa9, 0xbe, 0x2c, 0xf2, 0x0b, 0x1e, 0x1c, 0xf5, 0x82, 0x91, 0xfe, 0x44, 0x37, 0x41, 0x23, 0x26,
	0x73, 0x0e, 0xa8, 0x7c, 0x4b, 0x2e, 0xa4, 0xa2, 0xfb, 0xd8, 0xf7, 0x5d, 0x4a, 0x3c, 0x2c, 0x31,
	0x68, 0x79, 0xec, 0x33, 0x52, 0x4e, 0xbd, 0x18, 0x84, 0xd4, 0x26, 0x8f, 0x3e, 0x71, 0x37, 0xac,
	0xd1, 0x27, 0xdc, 0xff, 0x7d, 0x1a, 0xa8, 0xb5, 0x82, 0xf1, 0x87, 0x02, 0xf5, 0x54, 0x66, 0x38,
	0xe4, 0x10, 0xd4, 0xe3, 0x12, 0x54, 0x86, 0x44, 0x30, 0x7a, 0x01, 0x44, 0x9f, 0x79, 0x18, 0x30,
	0xc1, 0x30, 0xea, 0xd9, 0xd4, 0x88, 0xb8, 0x90, 0x78, 0xcf, 0x0d, 0x5d, 0x5a, 0xf7, 0x83, 0x0d,
	0x46, 0xf7, 0x07, 0xd3, 0x60, 0xf9, 0x78, 0xac, 0x5a, 0x7a, 0xf7, 0x35, 0x2c, 0xac, 0x52, 0x97,
	0x9e, 0xc4, 0xa8, 0xd3, 0x61, 0x68, 0x51, 0xeb, 0x83, 0x36, 0x78, 0xfc, 0x6f, 0xd3, 0xe0, 0xc0,
	0x31, 0x29, 0x7a, 0x03, 0x6a, 0x44, 0xd4, 0xd1, 0x0c, 0xec, 0x5d, 0xbf, 0xf1, 0xdf, 0x98, 0xe6,
	0xc0, 0xfb, 0xef, 0xa0, 0x28, 0xd9, 0x26, 0x9a, 0x89, 0x8c, 0xea, 0x9f, 0xcd, 0x82, 0x1a, 0xea,
	0x5f, 0x03, 0x4d, 0xf0, 0x4e, 0x74, 0x79, 0x44, 0x30, 0x8b, 0x8e, 0xea, 0x13, 0x42, 0x1f, 0xa9,
	0x11, 0xec, 0x6a, 0x4c, 0x4d, 0x16, 0xe9, 0x9a, 0xa8, 0xe6, 0x09, 0x14, 0x25, 0xa5, 0x1a, 0xf3,
	0x36, 0x93, 0x6a, 0x4d, 0x54, 0xf4, 0x2a, 0x6e, 0x43, 0x39, 0x5a, 0x3e, 0x99, 0x99, 0x3b, 0x4c,
	0x73, 0x51, 0x48, 0x8d, 0xb9, 0x98, 0x35, 0xf0, 0x26, 0xaa, 0xb1, 0x53, 0xad, 0x7c, 0x7d, 0x9a,
	0xaa, 0x44, 0x33, 0xea, 0xb7, 0x66, 0x04, 0x0e, 0x33, 0xfb, 0x10, 0xf2, 0x4f, 0x28, 0x43, 0x8d,
	0x11, 0xc1, 0x31, 0x4e, 0x3d, 0xd1, 0xd2, 0xb7, 0xa0, 0x89, 0xf6, 0x19, 0x73, 0x38, 0xab, 0xab,
	0xf4, 0x9b, 0x33, 0x80, 0x06, 0xd6, 0x3d, 0xbe, 0x03, 0x17, 0x6d, 0xd7, 0xef, 0x10, 0x57, 0x4a,
	0x91, 0xae, 0xd3, 0xb4, 0x83, 0xae, 0x19, 0x8b, 0x3f, 0x06, 0x29, 0xf9, 0xa8, 0xeb, 0x6c, 0x9d,
	0xfa, 0xb6, 0xc0, 0x51, 0x1d, 0x8d, 0xff, 0x97, 0xf6, 0xf3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x1c, 0x8e, 0xe7, 0x2d, 0xfd, 0x15, 0x00, 0x00,
}
