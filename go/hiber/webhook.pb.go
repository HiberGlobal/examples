// Code generated by protoc-gen-go.
// source: webhook.proto
// DO NOT EDIT!

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Webhook_ContentType int32

const (
	Webhook_DEFAULT Webhook_ContentType = 0
	Webhook_JSON    Webhook_ContentType = 1
	Webhook_PROTO   Webhook_ContentType = 2
)

var Webhook_ContentType_name = map[int32]string{
	0: "DEFAULT",
	1: "JSON",
	2: "PROTO",
}
var Webhook_ContentType_value = map[string]int32{
	"DEFAULT": 0,
	"JSON":    1,
	"PROTO":   2,
}

func (x Webhook_ContentType) String() string {
	return proto.EnumName(Webhook_ContentType_name, int32(x))
}
func (Webhook_ContentType) EnumDescriptor() ([]byte, []int) { return fileDescriptor12, []int{0, 0} }

type Webhook struct {
	Id          int64                   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Account     string                  `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Description string                  `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Data        *Webhook_WebhookData    `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	Filters     *Webhook_WebhookFilters `protobuf:"bytes,5,opt,name=filters" json:"filters,omitempty"`
	Tags        []*Tag                  `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
}

func (m *Webhook) Reset()                    { *m = Webhook{} }
func (m *Webhook) String() string            { return proto.CompactTextString(m) }
func (*Webhook) ProtoMessage()               {}
func (*Webhook) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *Webhook) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Webhook) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Webhook) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Webhook) GetData() *Webhook_WebhookData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Webhook) GetFilters() *Webhook_WebhookFilters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Webhook) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Webhook_WebhookData struct {
	Url         string              `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Secret      string              `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	ContentType Webhook_ContentType `protobuf:"varint,3,opt,name=content_type,json=contentType,enum=hiber.webhook.Webhook_ContentType" json:"content_type,omitempty"`
	Active      bool                `protobuf:"varint,4,opt,name=active" json:"active,omitempty"`
}

func (m *Webhook_WebhookData) Reset()                    { *m = Webhook_WebhookData{} }
func (m *Webhook_WebhookData) String() string            { return proto.CompactTextString(m) }
func (*Webhook_WebhookData) ProtoMessage()               {}
func (*Webhook_WebhookData) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0, 0} }

func (m *Webhook_WebhookData) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Webhook_WebhookData) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *Webhook_WebhookData) GetContentType() Webhook_ContentType {
	if m != nil {
		return m.ContentType
	}
	return Webhook_DEFAULT
}

func (m *Webhook_WebhookData) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type Webhook_WebhookFilters struct {
	Events *Filter_Events `protobuf:"bytes,1,opt,name=events" json:"events,omitempty"`
	Modems *Filter_Modems `protobuf:"bytes,2,opt,name=modems" json:"modems,omitempty"`
	Tags   *Filter_Tags   `protobuf:"bytes,3,opt,name=tags" json:"tags,omitempty"`
}

func (m *Webhook_WebhookFilters) Reset()                    { *m = Webhook_WebhookFilters{} }
func (m *Webhook_WebhookFilters) String() string            { return proto.CompactTextString(m) }
func (*Webhook_WebhookFilters) ProtoMessage()               {}
func (*Webhook_WebhookFilters) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0, 1} }

func (m *Webhook_WebhookFilters) GetEvents() *Filter_Events {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Webhook_WebhookFilters) GetModems() *Filter_Modems {
	if m != nil {
		return m.Modems
	}
	return nil
}

func (m *Webhook_WebhookFilters) GetTags() *Filter_Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

type WebhookSelection struct {
	Description string           `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Url         string           `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Webhooks    *Filter_Webhooks `protobuf:"bytes,3,opt,name=webhooks" json:"webhooks,omitempty"`
	Tags        *TagSelection    `protobuf:"bytes,4,opt,name=tags" json:"tags,omitempty"`
}

func (m *WebhookSelection) Reset()                    { *m = WebhookSelection{} }
func (m *WebhookSelection) String() string            { return proto.CompactTextString(m) }
func (*WebhookSelection) ProtoMessage()               {}
func (*WebhookSelection) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *WebhookSelection) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *WebhookSelection) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *WebhookSelection) GetWebhooks() *Filter_Webhooks {
	if m != nil {
		return m.Webhooks
	}
	return nil
}

func (m *WebhookSelection) GetTags() *TagSelection {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ListWebhooksRequest struct {
	Account    string            `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Selection  *WebhookSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination *Pagination       `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListWebhooksRequest) Reset()                    { *m = ListWebhooksRequest{} }
func (m *ListWebhooksRequest) String() string            { return proto.CompactTextString(m) }
func (*ListWebhooksRequest) ProtoMessage()               {}
func (*ListWebhooksRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

func (m *ListWebhooksRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ListWebhooksRequest) GetSelection() *WebhookSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListWebhooksRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListWebhooksRequest_Response struct {
	Webhooks   []*Webhook           `protobuf:"bytes,1,rep,name=webhooks" json:"webhooks,omitempty"`
	Request    *ListWebhooksRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result   `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListWebhooksRequest_Response) Reset()         { *m = ListWebhooksRequest_Response{} }
func (m *ListWebhooksRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListWebhooksRequest_Response) ProtoMessage()    {}
func (*ListWebhooksRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{2, 0}
}

func (m *ListWebhooksRequest_Response) GetWebhooks() []*Webhook {
	if m != nil {
		return m.Webhooks
	}
	return nil
}

func (m *ListWebhooksRequest_Response) GetRequest() *ListWebhooksRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListWebhooksRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type CreateWebhookRequest struct {
	Account     string                  `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Description string                  `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Data        *Webhook_WebhookData    `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Filters     *Webhook_WebhookFilters `protobuf:"bytes,4,opt,name=filters" json:"filters,omitempty"`
	Tags        []int64                 `protobuf:"varint,5,rep,packed,name=tags" json:"tags,omitempty"`
}

func (m *CreateWebhookRequest) Reset()                    { *m = CreateWebhookRequest{} }
func (m *CreateWebhookRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateWebhookRequest) ProtoMessage()               {}
func (*CreateWebhookRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

func (m *CreateWebhookRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *CreateWebhookRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateWebhookRequest) GetData() *Webhook_WebhookData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateWebhookRequest) GetFilters() *Webhook_WebhookFilters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *CreateWebhookRequest) GetTags() []int64 {
	if m != nil {
		return m.Tags
	}
	return nil
}

type GetWebhookRequest struct {
	Id      int64         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Account string        `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Tags    *TagSelection `protobuf:"bytes,3,opt,name=tags" json:"tags,omitempty"`
}

func (m *GetWebhookRequest) Reset()                    { *m = GetWebhookRequest{} }
func (m *GetWebhookRequest) String() string            { return proto.CompactTextString(m) }
func (*GetWebhookRequest) ProtoMessage()               {}
func (*GetWebhookRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{4} }

func (m *GetWebhookRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetWebhookRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *GetWebhookRequest) GetTags() *TagSelection {
	if m != nil {
		return m.Tags
	}
	return nil
}

type EnableWebhookRequest struct {
	Id      int64         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Account string        `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Tags    *TagSelection `protobuf:"bytes,3,opt,name=tags" json:"tags,omitempty"`
}

func (m *EnableWebhookRequest) Reset()                    { *m = EnableWebhookRequest{} }
func (m *EnableWebhookRequest) String() string            { return proto.CompactTextString(m) }
func (*EnableWebhookRequest) ProtoMessage()               {}
func (*EnableWebhookRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{5} }

func (m *EnableWebhookRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EnableWebhookRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *EnableWebhookRequest) GetTags() *TagSelection {
	if m != nil {
		return m.Tags
	}
	return nil
}

type DisableWebhookRequest struct {
	Id      int64         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Account string        `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Tags    *TagSelection `protobuf:"bytes,3,opt,name=tags" json:"tags,omitempty"`
}

func (m *DisableWebhookRequest) Reset()                    { *m = DisableWebhookRequest{} }
func (m *DisableWebhookRequest) String() string            { return proto.CompactTextString(m) }
func (*DisableWebhookRequest) ProtoMessage()               {}
func (*DisableWebhookRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{6} }

func (m *DisableWebhookRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DisableWebhookRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *DisableWebhookRequest) GetTags() *TagSelection {
	if m != nil {
		return m.Tags
	}
	return nil
}

type UpdateWebhookFilterRequest struct {
	Id          int64                                    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Account     string                                   `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	EventFilter *UpdateWebhookFilterRequest_UpdateEvents `protobuf:"bytes,3,opt,name=event_filter,json=eventFilter" json:"event_filter,omitempty"`
	ModemFilter *UpdateWebhookFilterRequest_UpdateModems `protobuf:"bytes,4,opt,name=modem_filter,json=modemFilter" json:"modem_filter,omitempty"`
	TagFilter   *UpdateWebhookFilterRequest_UpdateTags   `protobuf:"bytes,5,opt,name=tag_filter,json=tagFilter" json:"tag_filter,omitempty"`
	Tags        *TagSelection                            `protobuf:"bytes,6,opt,name=tags" json:"tags,omitempty"`
}

func (m *UpdateWebhookFilterRequest) Reset()                    { *m = UpdateWebhookFilterRequest{} }
func (m *UpdateWebhookFilterRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateWebhookFilterRequest) ProtoMessage()               {}
func (*UpdateWebhookFilterRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{7} }

func (m *UpdateWebhookFilterRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateWebhookFilterRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *UpdateWebhookFilterRequest) GetEventFilter() *UpdateWebhookFilterRequest_UpdateEvents {
	if m != nil {
		return m.EventFilter
	}
	return nil
}

func (m *UpdateWebhookFilterRequest) GetModemFilter() *UpdateWebhookFilterRequest_UpdateModems {
	if m != nil {
		return m.ModemFilter
	}
	return nil
}

func (m *UpdateWebhookFilterRequest) GetTagFilter() *UpdateWebhookFilterRequest_UpdateTags {
	if m != nil {
		return m.TagFilter
	}
	return nil
}

func (m *UpdateWebhookFilterRequest) GetTags() *TagSelection {
	if m != nil {
		return m.Tags
	}
	return nil
}

type UpdateWebhookFilterRequest_UpdateEvents struct {
	Updated bool           `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Value   *Filter_Events `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdateWebhookFilterRequest_UpdateEvents) Reset() {
	*m = UpdateWebhookFilterRequest_UpdateEvents{}
}
func (m *UpdateWebhookFilterRequest_UpdateEvents) String() string { return proto.CompactTextString(m) }
func (*UpdateWebhookFilterRequest_UpdateEvents) ProtoMessage()    {}
func (*UpdateWebhookFilterRequest_UpdateEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{7, 0}
}

func (m *UpdateWebhookFilterRequest_UpdateEvents) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdateWebhookFilterRequest_UpdateEvents) GetValue() *Filter_Events {
	if m != nil {
		return m.Value
	}
	return nil
}

type UpdateWebhookFilterRequest_UpdateModems struct {
	Updated bool           `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Value   *Filter_Modems `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdateWebhookFilterRequest_UpdateModems) Reset() {
	*m = UpdateWebhookFilterRequest_UpdateModems{}
}
func (m *UpdateWebhookFilterRequest_UpdateModems) String() string { return proto.CompactTextString(m) }
func (*UpdateWebhookFilterRequest_UpdateModems) ProtoMessage()    {}
func (*UpdateWebhookFilterRequest_UpdateModems) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{7, 1}
}

func (m *UpdateWebhookFilterRequest_UpdateModems) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdateWebhookFilterRequest_UpdateModems) GetValue() *Filter_Modems {
	if m != nil {
		return m.Value
	}
	return nil
}

type UpdateWebhookFilterRequest_UpdateTags struct {
	Updated bool         `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Value   *Filter_Tags `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdateWebhookFilterRequest_UpdateTags) Reset()         { *m = UpdateWebhookFilterRequest_UpdateTags{} }
func (m *UpdateWebhookFilterRequest_UpdateTags) String() string { return proto.CompactTextString(m) }
func (*UpdateWebhookFilterRequest_UpdateTags) ProtoMessage()    {}
func (*UpdateWebhookFilterRequest_UpdateTags) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{7, 2}
}

func (m *UpdateWebhookFilterRequest_UpdateTags) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdateWebhookFilterRequest_UpdateTags) GetValue() *Filter_Tags {
	if m != nil {
		return m.Value
	}
	return nil
}

type UpdateWebhookRequest struct {
	Id      int64                               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Account string                              `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Update  *UpdateWebhookRequest_UpdateWebhook `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
	Tags    *TagSelection                       `protobuf:"bytes,4,opt,name=tags" json:"tags,omitempty"`
}

func (m *UpdateWebhookRequest) Reset()                    { *m = UpdateWebhookRequest{} }
func (m *UpdateWebhookRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateWebhookRequest) ProtoMessage()               {}
func (*UpdateWebhookRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{8} }

func (m *UpdateWebhookRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateWebhookRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *UpdateWebhookRequest) GetUpdate() *UpdateWebhookRequest_UpdateWebhook {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateWebhookRequest) GetTags() *TagSelection {
	if m != nil {
		return m.Tags
	}
	return nil
}

type UpdateWebhookRequest_UpdateWebhook struct {
	Url         string                 `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Secret      *UpdateClearableString `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	ContentType Webhook_ContentType    `protobuf:"varint,3,opt,name=content_type,json=contentType,enum=hiber.webhook.Webhook_ContentType" json:"content_type,omitempty"`
	Description *UpdateClearableString `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
}

func (m *UpdateWebhookRequest_UpdateWebhook) Reset()         { *m = UpdateWebhookRequest_UpdateWebhook{} }
func (m *UpdateWebhookRequest_UpdateWebhook) String() string { return proto.CompactTextString(m) }
func (*UpdateWebhookRequest_UpdateWebhook) ProtoMessage()    {}
func (*UpdateWebhookRequest_UpdateWebhook) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{8, 0}
}

func (m *UpdateWebhookRequest_UpdateWebhook) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *UpdateWebhookRequest_UpdateWebhook) GetSecret() *UpdateClearableString {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *UpdateWebhookRequest_UpdateWebhook) GetContentType() Webhook_ContentType {
	if m != nil {
		return m.ContentType
	}
	return Webhook_DEFAULT
}

func (m *UpdateWebhookRequest_UpdateWebhook) GetDescription() *UpdateClearableString {
	if m != nil {
		return m.Description
	}
	return nil
}

type UpdateWebhookTagsRequest struct {
	Account    string             `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	WebhookIds []int64            `protobuf:"varint,2,rep,packed,name=webhook_ids,json=webhookIds" json:"webhook_ids,omitempty"`
	Update     *UpdateTagsForItem `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
	Tags       *TagSelection      `protobuf:"bytes,4,opt,name=tags" json:"tags,omitempty"`
}

func (m *UpdateWebhookTagsRequest) Reset()                    { *m = UpdateWebhookTagsRequest{} }
func (m *UpdateWebhookTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateWebhookTagsRequest) ProtoMessage()               {}
func (*UpdateWebhookTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{9} }

func (m *UpdateWebhookTagsRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *UpdateWebhookTagsRequest) GetWebhookIds() []int64 {
	if m != nil {
		return m.WebhookIds
	}
	return nil
}

func (m *UpdateWebhookTagsRequest) GetUpdate() *UpdateTagsForItem {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateWebhookTagsRequest) GetTags() *TagSelection {
	if m != nil {
		return m.Tags
	}
	return nil
}

type UpdateWebhookTagsRequest_Response struct {
	Webhooks []*Webhook `protobuf:"bytes,1,rep,name=webhooks" json:"webhooks,omitempty"`
}

func (m *UpdateWebhookTagsRequest_Response) Reset()         { *m = UpdateWebhookTagsRequest_Response{} }
func (m *UpdateWebhookTagsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*UpdateWebhookTagsRequest_Response) ProtoMessage()    {}
func (*UpdateWebhookTagsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{9, 0}
}

func (m *UpdateWebhookTagsRequest_Response) GetWebhooks() []*Webhook {
	if m != nil {
		return m.Webhooks
	}
	return nil
}

type DeleteWebhookRequest struct {
	Id      int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
}

func (m *DeleteWebhookRequest) Reset()                    { *m = DeleteWebhookRequest{} }
func (m *DeleteWebhookRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteWebhookRequest) ProtoMessage()               {}
func (*DeleteWebhookRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{10} }

func (m *DeleteWebhookRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteWebhookRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type DeleteWebhookRequest_Response struct {
}

func (m *DeleteWebhookRequest_Response) Reset()         { *m = DeleteWebhookRequest_Response{} }
func (m *DeleteWebhookRequest_Response) String() string { return proto.CompactTextString(m) }
func (*DeleteWebhookRequest_Response) ProtoMessage()    {}
func (*DeleteWebhookRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{10, 0}
}

func init() {
	proto.RegisterType((*Webhook)(nil), "hiber.webhook.Webhook")
	proto.RegisterType((*Webhook_WebhookData)(nil), "hiber.webhook.Webhook.WebhookData")
	proto.RegisterType((*Webhook_WebhookFilters)(nil), "hiber.webhook.Webhook.WebhookFilters")
	proto.RegisterType((*WebhookSelection)(nil), "hiber.webhook.WebhookSelection")
	proto.RegisterType((*ListWebhooksRequest)(nil), "hiber.webhook.ListWebhooksRequest")
	proto.RegisterType((*ListWebhooksRequest_Response)(nil), "hiber.webhook.ListWebhooksRequest.Response")
	proto.RegisterType((*CreateWebhookRequest)(nil), "hiber.webhook.CreateWebhookRequest")
	proto.RegisterType((*GetWebhookRequest)(nil), "hiber.webhook.GetWebhookRequest")
	proto.RegisterType((*EnableWebhookRequest)(nil), "hiber.webhook.EnableWebhookRequest")
	proto.RegisterType((*DisableWebhookRequest)(nil), "hiber.webhook.DisableWebhookRequest")
	proto.RegisterType((*UpdateWebhookFilterRequest)(nil), "hiber.webhook.UpdateWebhookFilterRequest")
	proto.RegisterType((*UpdateWebhookFilterRequest_UpdateEvents)(nil), "hiber.webhook.UpdateWebhookFilterRequest.UpdateEvents")
	proto.RegisterType((*UpdateWebhookFilterRequest_UpdateModems)(nil), "hiber.webhook.UpdateWebhookFilterRequest.UpdateModems")
	proto.RegisterType((*UpdateWebhookFilterRequest_UpdateTags)(nil), "hiber.webhook.UpdateWebhookFilterRequest.UpdateTags")
	proto.RegisterType((*UpdateWebhookRequest)(nil), "hiber.webhook.UpdateWebhookRequest")
	proto.RegisterType((*UpdateWebhookRequest_UpdateWebhook)(nil), "hiber.webhook.UpdateWebhookRequest.UpdateWebhook")
	proto.RegisterType((*UpdateWebhookTagsRequest)(nil), "hiber.webhook.UpdateWebhookTagsRequest")
	proto.RegisterType((*UpdateWebhookTagsRequest_Response)(nil), "hiber.webhook.UpdateWebhookTagsRequest.Response")
	proto.RegisterType((*DeleteWebhookRequest)(nil), "hiber.webhook.DeleteWebhookRequest")
	proto.RegisterType((*DeleteWebhookRequest_Response)(nil), "hiber.webhook.DeleteWebhookRequest.Response")
	proto.RegisterEnum("hiber.webhook.Webhook_ContentType", Webhook_ContentType_name, Webhook_ContentType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WebhookService service

type WebhookServiceClient interface {
	List(ctx context.Context, in *ListWebhooksRequest, opts ...grpc.CallOption) (*ListWebhooksRequest_Response, error)
	Create(ctx context.Context, in *CreateWebhookRequest, opts ...grpc.CallOption) (*Webhook, error)
	Enable(ctx context.Context, in *EnableWebhookRequest, opts ...grpc.CallOption) (*Webhook, error)
	Disable(ctx context.Context, in *DisableWebhookRequest, opts ...grpc.CallOption) (*Webhook, error)
	UpdateFilter(ctx context.Context, in *UpdateWebhookFilterRequest, opts ...grpc.CallOption) (*Webhook, error)
	Update(ctx context.Context, in *UpdateWebhookRequest, opts ...grpc.CallOption) (*Webhook, error)
	UpdateTags(ctx context.Context, in *UpdateWebhookTagsRequest, opts ...grpc.CallOption) (*UpdateWebhookTagsRequest_Response, error)
	Get(ctx context.Context, in *GetWebhookRequest, opts ...grpc.CallOption) (*Webhook, error)
	Delete(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*DeleteWebhookRequest_Response, error)
}

type webhookServiceClient struct {
	cc *grpc.ClientConn
}

func NewWebhookServiceClient(cc *grpc.ClientConn) WebhookServiceClient {
	return &webhookServiceClient{cc}
}

func (c *webhookServiceClient) List(ctx context.Context, in *ListWebhooksRequest, opts ...grpc.CallOption) (*ListWebhooksRequest_Response, error) {
	out := new(ListWebhooksRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) Create(ctx context.Context, in *CreateWebhookRequest, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) Enable(ctx context.Context, in *EnableWebhookRequest, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/Enable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) Disable(ctx context.Context, in *DisableWebhookRequest, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/Disable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) UpdateFilter(ctx context.Context, in *UpdateWebhookFilterRequest, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/UpdateFilter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) Update(ctx context.Context, in *UpdateWebhookRequest, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) UpdateTags(ctx context.Context, in *UpdateWebhookTagsRequest, opts ...grpc.CallOption) (*UpdateWebhookTagsRequest_Response, error) {
	out := new(UpdateWebhookTagsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/UpdateTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) Get(ctx context.Context, in *GetWebhookRequest, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) Delete(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*DeleteWebhookRequest_Response, error) {
	out := new(DeleteWebhookRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.webhook.WebhookService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WebhookService service

type WebhookServiceServer interface {
	List(context.Context, *ListWebhooksRequest) (*ListWebhooksRequest_Response, error)
	Create(context.Context, *CreateWebhookRequest) (*Webhook, error)
	Enable(context.Context, *EnableWebhookRequest) (*Webhook, error)
	Disable(context.Context, *DisableWebhookRequest) (*Webhook, error)
	UpdateFilter(context.Context, *UpdateWebhookFilterRequest) (*Webhook, error)
	Update(context.Context, *UpdateWebhookRequest) (*Webhook, error)
	UpdateTags(context.Context, *UpdateWebhookTagsRequest) (*UpdateWebhookTagsRequest_Response, error)
	Get(context.Context, *GetWebhookRequest) (*Webhook, error)
	Delete(context.Context, *DeleteWebhookRequest) (*DeleteWebhookRequest_Response, error)
}

func RegisterWebhookServiceServer(s *grpc.Server, srv WebhookServiceServer) {
	s.RegisterService(&_WebhookService_serviceDesc, srv)
}

func _WebhookService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebhooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).List(ctx, req.(*ListWebhooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).Create(ctx, req.(*CreateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).Enable(ctx, req.(*EnableWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).Disable(ctx, req.(*DisableWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_UpdateFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).UpdateFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/UpdateFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).UpdateFilter(ctx, req.(*UpdateWebhookFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).Update(ctx, req.(*UpdateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_UpdateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).UpdateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/UpdateTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).UpdateTags(ctx, req.(*UpdateWebhookTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).Get(ctx, req.(*GetWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.webhook.WebhookService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).Delete(ctx, req.(*DeleteWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebhookService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.webhook.WebhookService",
	HandlerType: (*WebhookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _WebhookService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _WebhookService_Create_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _WebhookService_Enable_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _WebhookService_Disable_Handler,
		},
		{
			MethodName: "UpdateFilter",
			Handler:    _WebhookService_UpdateFilter_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WebhookService_Update_Handler,
		},
		{
			MethodName: "UpdateTags",
			Handler:    _WebhookService_UpdateTags_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _WebhookService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WebhookService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webhook.proto",
}

func init() { proto.RegisterFile("webhook.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 1077 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x57, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x5e, 0xc7, 0x4e, 0xd2, 0x1e, 0xb7, 0x55, 0x77, 0x28, 0x25, 0xb2, 0x16, 0x35, 0x0a, 0x7f,
	0x81, 0xae, 0x52, 0x36, 0x54, 0x2b, 0x2e, 0x60, 0x57, 0xbb, 0x6d, 0x5a, 0x15, 0x15, 0x5a, 0x9c,
	0xac, 0x2a, 0xe0, 0xa2, 0x9a, 0x38, 0xb3, 0x5e, 0x83, 0x63, 0x1b, 0x7b, 0x52, 0xb4, 0xef, 0x81,
	0x90, 0x78, 0x02, 0xde, 0x80, 0x17, 0xe1, 0x8e, 0x0b, 0x10, 0x6f, 0xc1, 0x05, 0x17, 0xc8, 0x33,
	0xc7, 0xb1, 0x9d, 0x38, 0x3f, 0x0d, 0x68, 0xaf, 0x1a, 0x7b, 0xbe, 0xf3, 0x9d, 0xbf, 0xcf, 0xe7,
	0x4c, 0x61, 0xf3, 0x07, 0xd6, 0x7f, 0xe1, 0xfb, 0xdf, 0xb5, 0x82, 0xd0, 0xe7, 0x3e, 0xd9, 0x7c,
	0xe1, 0xf4, 0x59, 0xd8, 0xc2, 0x97, 0x06, 0xf4, 0x69, 0xc4, 0xe4, 0x91, 0xb1, 0xce, 0xa9, 0x8d,
	0x3f, 0xf7, 0x6c, 0xdf, 0xb7, 0x5d, 0x76, 0x20, 0x9e, 0xfa, 0xa3, 0xe7, 0x07, 0xdc, 0x19, 0xb2,
	0x88, 0xd3, 0x61, 0x20, 0x01, 0x8d, 0xdf, 0x34, 0xa8, 0x5e, 0x49, 0x0e, 0xb2, 0x05, 0x25, 0x67,
	0x50, 0x53, 0xea, 0x4a, 0x53, 0x35, 0x4b, 0xce, 0x80, 0xd4, 0xa0, 0x4a, 0x2d, 0xcb, 0x1f, 0x79,
	0xbc, 0x56, 0xaa, 0x2b, 0xcd, 0x75, 0x33, 0x79, 0x24, 0x75, 0xd0, 0x07, 0x2c, 0xb2, 0x42, 0x27,
	0xe0, 0x8e, 0xef, 0xd5, 0x54, 0x71, 0x9a, 0x7d, 0x45, 0x1e, 0x82, 0x36, 0xa0, 0x9c, 0xd6, 0xb4,
	0xba, 0xd2, 0xd4, 0xdb, 0x8d, 0x56, 0x2e, 0xda, 0xd6, 0x55, 0xfe, 0xef, 0x31, 0xe5, 0xd4, 0x14,
	0x78, 0xf2, 0x18, 0xaa, 0xcf, 0x1d, 0x97, 0xb3, 0x30, 0xaa, 0x95, 0x85, 0xe9, 0x3b, 0xf3, 0x4d,
	0x4f, 0x24, 0xd8, 0x4c, 0xac, 0x48, 0x03, 0x34, 0x4e, 0xed, 0xa8, 0x56, 0xa9, 0xab, 0x4d, 0xbd,
	0xbd, 0x85, 0xd6, 0x71, 0x45, 0x7a, 0xd4, 0x36, 0xc5, 0x99, 0xf1, 0x93, 0x02, 0x7a, 0xc6, 0x35,
	0xd9, 0x06, 0x75, 0x14, 0xba, 0x22, 0xf3, 0x75, 0x33, 0xfe, 0x49, 0x76, 0xa1, 0x12, 0x31, 0x2b,
	0x64, 0x49, 0xe6, 0xf8, 0x44, 0x3a, 0xb0, 0x61, 0xf9, 0x1e, 0x67, 0x1e, 0xbf, 0xe6, 0x2f, 0x03,
	0x26, 0x32, 0xdf, 0x9a, 0x99, 0xde, 0x91, 0x84, 0xf6, 0x5e, 0x06, 0xcc, 0xd4, 0xad, 0xf4, 0x21,
	0xa6, 0xa7, 0x16, 0x77, 0x6e, 0x98, 0xa8, 0xcf, 0x9a, 0x89, 0x4f, 0xc6, 0x8f, 0x0a, 0x6c, 0xe5,
	0x13, 0x23, 0xf7, 0xa1, 0xc2, 0x6e, 0x98, 0xc7, 0x23, 0x11, 0x9e, 0xde, 0xde, 0x41, 0x5f, 0xf2,
	0xbc, 0xd5, 0x11, 0x67, 0x26, 0x62, 0x62, 0xf4, 0xd0, 0x1f, 0xb0, 0x61, 0x24, 0xe2, 0x9e, 0x42,
	0x7f, 0x2e, 0xce, 0x4c, 0xc4, 0x90, 0x77, 0xb1, 0x56, 0xaa, 0xc0, 0x92, 0x3c, 0xb6, 0x47, 0xed,
	0x48, 0xd6, 0xab, 0x71, 0x00, 0x7a, 0x26, 0x15, 0xa2, 0x43, 0xf5, 0xb8, 0x73, 0xf2, 0xe4, 0xd9,
	0x79, 0x6f, 0xfb, 0x0e, 0x59, 0x03, 0xed, 0xb3, 0xee, 0xc5, 0x17, 0xdb, 0x0a, 0x59, 0x87, 0xf2,
	0xa5, 0x79, 0xd1, 0xbb, 0xd8, 0x2e, 0x35, 0x7e, 0x51, 0x60, 0x1b, 0xf3, 0xe8, 0x32, 0x97, 0x59,
	0x42, 0x12, 0x13, 0xa2, 0x51, 0xa6, 0x45, 0x83, 0x7d, 0x28, 0xa5, 0x7d, 0x68, 0xc3, 0x1a, 0x16,
	0x35, 0x89, 0x72, 0x37, 0x1f, 0x25, 0x7a, 0x89, 0xcc, 0x31, 0x8e, 0xec, 0x63, 0x56, 0x52, 0x7a,
	0x6f, 0xe4, 0x15, 0x30, 0x0e, 0x07, 0x53, 0xfb, 0xbd, 0x04, 0xaf, 0x9d, 0x3b, 0x11, 0x1f, 0xf3,
	0xb0, 0xef, 0x47, 0x2c, 0xe2, 0x59, 0xed, 0x2b, 0x79, 0xed, 0x7f, 0x0a, 0xeb, 0x51, 0x42, 0x82,
	0x55, 0xde, 0x2b, 0xee, 0x7f, 0xea, 0x2b, 0xb5, 0x20, 0x0f, 0x00, 0x02, 0x6a, 0x3b, 0x1e, 0x1d,
	0x7f, 0x39, 0x7a, 0xfb, 0x2e, 0xda, 0x5f, 0x8e, 0x0f, 0xcc, 0x0c, 0xc8, 0xf8, 0x55, 0x81, 0x35,
	0x93, 0x45, 0x81, 0xef, 0x45, 0x2c, 0x57, 0x11, 0x45, 0x68, 0x7c, 0xb7, 0xd8, 0x7b, 0xa6, 0x22,
	0x9f, 0x40, 0x35, 0x94, 0x79, 0x61, 0xc0, 0x93, 0x82, 0x2d, 0xa8, 0x80, 0x99, 0x98, 0x90, 0x8f,
	0x0b, 0x22, 0xae, 0x4d, 0x45, 0xdc, 0x32, 0x59, 0x34, 0x72, 0x79, 0x36, 0xf0, 0xc6, 0x9f, 0x0a,
	0xec, 0x1c, 0x85, 0x8c, 0x72, 0x96, 0xc4, 0xb4, 0xb0, 0xba, 0x13, 0x22, 0x29, 0xcd, 0x9e, 0x2c,
	0xea, 0xea, 0x93, 0x45, 0x5b, 0x69, 0xb2, 0x10, 0xd4, 0x55, 0xb9, 0xae, 0x36, 0x55, 0x94, 0xcf,
	0xb7, 0x70, 0xf7, 0x94, 0xf1, 0x89, 0xec, 0x96, 0x9f, 0xa3, 0xfb, 0xb9, 0x0f, 0x70, 0x81, 0x54,
	0x87, 0xb0, 0xd3, 0xf1, 0x68, 0xdf, 0x65, 0xaf, 0xc6, 0x9d, 0x07, 0xaf, 0x1f, 0x3b, 0xd1, 0xab,
	0xf3, 0xf7, 0x8f, 0x06, 0xc6, 0xb3, 0x60, 0x90, 0x8a, 0x45, 0x36, 0xe0, 0xf6, 0x5e, 0xbf, 0x82,
	0x0d, 0x31, 0x0d, 0xaf, 0x65, 0xe3, 0xd0, 0xfb, 0xc3, 0x89, 0x6e, 0xcf, 0x76, 0x85, 0x47, 0x38,
	0x59, 0x75, 0xc1, 0x25, 0x01, 0x31, 0xb5, 0x18, 0x9d, 0x09, 0xb5, 0xb6, 0x1a, 0x35, 0x8e, 0x61,
	0x5d, 0x70, 0x21, 0x75, 0x17, 0x80, 0x53, 0x3b, 0x21, 0x96, 0xbb, 0xef, 0xf0, 0xb6, 0xc4, 0x62,
	0x66, 0xc7, 0xeb, 0x1f, 0x49, 0xf7, 0xc7, 0xcb, 0x70, 0x71, 0x03, 0x8c, 0x1e, 0x6c, 0x64, 0x33,
	0x8f, 0x2b, 0x3c, 0x12, 0xcf, 0xb2, 0xec, 0x6b, 0x66, 0xf2, 0x48, 0x3e, 0x80, 0xf2, 0x0d, 0x75,
	0x47, 0xac, 0x78, 0xc9, 0x60, 0xe1, 0x24, 0x24, 0x65, 0x95, 0x49, 0xaf, 0xcc, 0x8a, 0x35, 0x43,
	0xd6, 0x4b, 0x80, 0x34, 0xe3, 0x39, 0x9c, 0xcd, 0x3c, 0x67, 0xd1, 0x8a, 0x93, 0x80, 0xc6, 0xcf,
	0x2a, 0xec, 0xe4, 0xea, 0x7b, 0x7b, 0xe1, 0x9d, 0x41, 0x45, 0xfa, 0x45, 0xc9, 0x3d, 0x98, 0xd7,
	0xbe, 0x7c, 0xe3, 0x92, 0x97, 0x48, 0x70, 0xab, 0x1d, 0x66, 0xfc, 0xa1, 0xc0, 0x66, 0x8e, 0xa6,
	0xe0, 0x42, 0x73, 0x98, 0xbb, 0xd0, 0xe8, 0xed, 0x7b, 0x48, 0x29, 0xed, 0x8e, 0x5c, 0x46, 0xc3,
	0xf8, 0x53, 0xef, 0xf2, 0xd0, 0xf1, 0xec, 0xff, 0xfb, 0xba, 0xf3, 0x28, 0x3f, 0xd4, 0xb5, 0x25,
	0x22, 0xc8, 0x1a, 0x34, 0xfe, 0x56, 0xa0, 0x96, 0x4b, 0x50, 0x34, 0x6e, 0xe1, 0x2e, 0xd9, 0x03,
	0x1d, 0x43, 0xbc, 0x76, 0x06, 0xf1, 0x8d, 0x28, 0x9e, 0xdb, 0x80, 0xaf, 0xce, 0x06, 0x51, 0x5c,
	0x94, 0x5c, 0xc3, 0xee, 0x65, 0xea, 0x9c, 0xca, 0xeb, 0xc4, 0x0f, 0xcf, 0x38, 0x1b, 0xae, 0xd6,
	0x9b, 0x47, 0xff, 0x6d, 0x75, 0x37, 0xce, 0x61, 0xe7, 0x98, 0xb9, 0x6c, 0x75, 0x55, 0x1a, 0x90,
	0x46, 0xd0, 0xfe, 0xab, 0x3c, 0xbe, 0x5f, 0x76, 0x59, 0x78, 0xe3, 0x58, 0x8c, 0x5c, 0x81, 0x16,
	0x6f, 0x7f, 0xb2, 0xc4, 0x95, 0xc0, 0xd8, 0x5f, 0x8c, 0x69, 0x8d, 0xb3, 0xed, 0x40, 0x45, 0xee,
	0x7e, 0xf2, 0xd6, 0x84, 0x59, 0xd1, 0x95, 0xc0, 0x98, 0x51, 0x8a, 0x98, 0x46, 0x6e, 0xbd, 0x29,
	0x9a, 0xa2, 0x65, 0x38, 0x93, 0xe6, 0x14, 0xaa, 0xb8, 0xcd, 0xc8, 0xdb, 0x13, 0x90, 0xc2, 0x2d,
	0x37, 0x93, 0xe8, 0xcb, 0x64, 0x9e, 0xe1, 0x88, 0x7d, 0x7f, 0xe9, 0x19, 0x3d, 0x2f, 0x45, 0x69,
	0x35, 0x95, 0x62, 0xd1, 0xc4, 0x98, 0x49, 0x63, 0xe7, 0x66, 0xe2, 0x7b, 0xf3, 0xa8, 0x32, 0xdf,
	0x8f, 0xf1, 0xe1, 0x92, 0xc0, 0xb4, 0xb3, 0x8f, 0x41, 0x3d, 0x65, 0x9c, 0xd4, 0x27, 0x0c, 0xa7,
	0x2e, 0x42, 0x33, 0x23, 0xfd, 0x06, 0x2a, 0x52, 0xd4, 0x53, 0x09, 0x17, 0x69, 0xdd, 0xb8, 0xbf,
	0x04, 0x68, 0x1c, 0xdd, 0xd3, 0x43, 0x78, 0xd3, 0x76, 0xfd, 0x3e, 0x75, 0xd1, 0x8a, 0x06, 0x4e,
	0xcb, 0x0e, 0x03, 0x2b, 0x31, 0x7f, 0x0a, 0x68, 0xf9, 0x24, 0x70, 0x2e, 0xef, 0x7c, 0x5d, 0x16,
	0xa8, 0x7e, 0x45, 0xfc, 0x3b, 0xfc, 0xd1, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x04, 0x0c, 0x50,
	0x38, 0x66, 0x0f, 0x00, 0x00,
}
