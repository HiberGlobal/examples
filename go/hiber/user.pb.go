// Code generated by protoc-gen-go.
// source: user.proto
// DO NOT EDIT!

package hiber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UserSort int32

const (
	UserSort_EMAIL_ASC  UserSort = 0
	UserSort_EMAIL_DESC UserSort = 1
	UserSort_NAME_ASC   UserSort = 2
	UserSort_NAME_DESC  UserSort = 3
)

var UserSort_name = map[int32]string{
	0: "EMAIL_ASC",
	1: "EMAIL_DESC",
	2: "NAME_ASC",
	3: "NAME_DESC",
}
var UserSort_value = map[string]int32{
	"EMAIL_ASC":  0,
	"EMAIL_DESC": 1,
	"NAME_ASC":   2,
	"NAME_DESC":  3,
}

func (x UserSort) String() string {
	return proto.EnumName(UserSort_name, int32(x))
}
func (UserSort) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

type User struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UserSelection struct {
	ByEmail string `protobuf:"bytes,1,opt,name=by_email,json=byEmail" json:"by_email,omitempty"`
	ByName  string `protobuf:"bytes,2,opt,name=by_name,json=byName" json:"by_name,omitempty"`
}

func (m *UserSelection) Reset()                    { *m = UserSelection{} }
func (m *UserSelection) String() string            { return proto.CompactTextString(m) }
func (*UserSelection) ProtoMessage()               {}
func (*UserSelection) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *UserSelection) GetByEmail() string {
	if m != nil {
		return m.ByEmail
	}
	return ""
}

func (m *UserSelection) GetByName() string {
	if m != nil {
		return m.ByName
	}
	return ""
}

type ListUsersRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string         `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *UserSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination    `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
	Sort         UserSort       `protobuf:"varint,4,opt,name=sort,enum=hiber.user.UserSort" json:"sort,omitempty"`
}

func (m *ListUsersRequest) Reset()                    { *m = ListUsersRequest{} }
func (m *ListUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUsersRequest) ProtoMessage()               {}
func (*ListUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

func (m *ListUsersRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ListUsersRequest) GetSelection() *UserSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListUsersRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListUsersRequest) GetSort() UserSort {
	if m != nil {
		return m.Sort
	}
	return UserSort_EMAIL_ASC
}

type ListUsersRequest_Response struct {
	Users      []*User            `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	Request    *ListUsersRequest  `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListUsersRequest_Response) Reset()                    { *m = ListUsersRequest_Response{} }
func (m *ListUsersRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*ListUsersRequest_Response) ProtoMessage()               {}
func (*ListUsersRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2, 0} }

func (m *ListUsersRequest_Response) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ListUsersRequest_Response) GetRequest() *ListUsersRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListUsersRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListAccessRequestsRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string         `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Selection    *UserSelection `protobuf:"bytes,2,opt,name=selection" json:"selection,omitempty"`
	Pagination   *Pagination    `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
	Sort         UserSort       `protobuf:"varint,4,opt,name=sort,enum=hiber.user.UserSort" json:"sort,omitempty"`
}

func (m *ListAccessRequestsRequest) Reset()                    { *m = ListAccessRequestsRequest{} }
func (m *ListAccessRequestsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListAccessRequestsRequest) ProtoMessage()               {}
func (*ListAccessRequestsRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

func (m *ListAccessRequestsRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ListAccessRequestsRequest) GetSelection() *UserSelection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *ListAccessRequestsRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListAccessRequestsRequest) GetSort() UserSort {
	if m != nil {
		return m.Sort
	}
	return UserSort_EMAIL_ASC
}

type ListAccessRequestsRequest_Response struct {
	Users      []*User                    `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	Request    *ListAccessRequestsRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Pagination *Pagination_Result         `protobuf:"bytes,3,opt,name=pagination" json:"pagination,omitempty"`
}

func (m *ListAccessRequestsRequest_Response) Reset()         { *m = ListAccessRequestsRequest_Response{} }
func (m *ListAccessRequestsRequest_Response) String() string { return proto.CompactTextString(m) }
func (*ListAccessRequestsRequest_Response) ProtoMessage()    {}
func (*ListAccessRequestsRequest_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{3, 0}
}

func (m *ListAccessRequestsRequest_Response) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ListAccessRequestsRequest_Response) GetRequest() *ListAccessRequestsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListAccessRequestsRequest_Response) GetPagination() *Pagination_Result {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ApproveUserRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string   `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	UserId       []string `protobuf:"bytes,2,rep,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ApproveUserRequest) Reset()                    { *m = ApproveUserRequest{} }
func (m *ApproveUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ApproveUserRequest) ProtoMessage()               {}
func (*ApproveUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{4} }

func (m *ApproveUserRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ApproveUserRequest) GetUserId() []string {
	if m != nil {
		return m.UserId
	}
	return nil
}

type ApproveUserRequest_Response struct {
}

func (m *ApproveUserRequest_Response) Reset()                    { *m = ApproveUserRequest_Response{} }
func (m *ApproveUserRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*ApproveUserRequest_Response) ProtoMessage()               {}
func (*ApproveUserRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{4, 0} }

type RemoveUserRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string   `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	UserId       []string `protobuf:"bytes,2,rep,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *RemoveUserRequest) Reset()                    { *m = RemoveUserRequest{} }
func (m *RemoveUserRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveUserRequest) ProtoMessage()               {}
func (*RemoveUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{5} }

func (m *RemoveUserRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *RemoveUserRequest) GetUserId() []string {
	if m != nil {
		return m.UserId
	}
	return nil
}

type RemoveUserRequest_Response struct {
}

func (m *RemoveUserRequest_Response) Reset()                    { *m = RemoveUserRequest_Response{} }
func (m *RemoveUserRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*RemoveUserRequest_Response) ProtoMessage()               {}
func (*RemoveUserRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{5, 0} }

type CreateUserRequest struct {
	// Pick the organization to use (/impersonate). If unset, your default organization is used.
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Email        string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Password     string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{6} }

func (m *CreateUserRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *CreateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "hiber.user.User")
	proto.RegisterType((*UserSelection)(nil), "hiber.user.UserSelection")
	proto.RegisterType((*ListUsersRequest)(nil), "hiber.user.ListUsersRequest")
	proto.RegisterType((*ListUsersRequest_Response)(nil), "hiber.user.ListUsersRequest.Response")
	proto.RegisterType((*ListAccessRequestsRequest)(nil), "hiber.user.ListAccessRequestsRequest")
	proto.RegisterType((*ListAccessRequestsRequest_Response)(nil), "hiber.user.ListAccessRequestsRequest.Response")
	proto.RegisterType((*ApproveUserRequest)(nil), "hiber.user.ApproveUserRequest")
	proto.RegisterType((*ApproveUserRequest_Response)(nil), "hiber.user.ApproveUserRequest.Response")
	proto.RegisterType((*RemoveUserRequest)(nil), "hiber.user.RemoveUserRequest")
	proto.RegisterType((*RemoveUserRequest_Response)(nil), "hiber.user.RemoveUserRequest.Response")
	proto.RegisterType((*CreateUserRequest)(nil), "hiber.user.CreateUserRequest")
	proto.RegisterEnum("hiber.user.UserSort", UserSort_name, UserSort_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	List(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersRequest_Response, error)
	ListAccessRequests(ctx context.Context, in *ListAccessRequestsRequest, opts ...grpc.CallOption) (*ListAccessRequestsRequest_Response, error)
	Approve(ctx context.Context, in *ApproveUserRequest, opts ...grpc.CallOption) (*ApproveUserRequest_Response, error)
	Remove(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserRequest_Response, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) List(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersRequest_Response, error) {
	out := new(ListUsersRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.user.UserService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListAccessRequests(ctx context.Context, in *ListAccessRequestsRequest, opts ...grpc.CallOption) (*ListAccessRequestsRequest_Response, error) {
	out := new(ListAccessRequestsRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.user.UserService/ListAccessRequests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Approve(ctx context.Context, in *ApproveUserRequest, opts ...grpc.CallOption) (*ApproveUserRequest_Response, error) {
	out := new(ApproveUserRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.user.UserService/Approve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Remove(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserRequest_Response, error) {
	out := new(RemoveUserRequest_Response)
	err := grpc.Invoke(ctx, "/hiber.user.UserService/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/hiber.user.UserService/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	List(context.Context, *ListUsersRequest) (*ListUsersRequest_Response, error)
	ListAccessRequests(context.Context, *ListAccessRequestsRequest) (*ListAccessRequestsRequest_Response, error)
	Approve(context.Context, *ApproveUserRequest) (*ApproveUserRequest_Response, error)
	Remove(context.Context, *RemoveUserRequest) (*RemoveUserRequest_Response, error)
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.user.UserService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).List(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListAccessRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListAccessRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.user.UserService/ListAccessRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListAccessRequests(ctx, req.(*ListAccessRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.user.UserService/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Approve(ctx, req.(*ApproveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.user.UserService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Remove(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiber.user.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiber.user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _UserService_List_Handler,
		},
		{
			MethodName: "ListAccessRequests",
			Handler:    _UserService_ListAccessRequests_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _UserService_Approve_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _UserService_Remove_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x55, 0x51, 0x6f, 0x12, 0x4d,
	0x14, 0xed, 0xee, 0xd2, 0x2e, 0x5c, 0x5a, 0x02, 0x37, 0x4d, 0xba, 0x6c, 0xbe, 0xcf, 0x10, 0x92,
	0x56, 0xe2, 0xc3, 0x26, 0x62, 0xa2, 0xbe, 0x18, 0xdd, 0x22, 0x26, 0x8d, 0x6d, 0x6d, 0x86, 0xf8,
	0x62, 0x34, 0x64, 0x17, 0x26, 0x38, 0x11, 0xd8, 0x75, 0x66, 0xa9, 0xc1, 0xc4, 0x47, 0xff, 0x89,
	0x6f, 0xc6, 0x5f, 0xe7, 0x1f, 0x30, 0x33, 0x03, 0x2c, 0xb0, 0x0d, 0xa1, 0x46, 0x5f, 0x7c, 0xe3,
	0xde, 0x73, 0xee, 0x99, 0xb9, 0xf7, 0x9e, 0x61, 0x01, 0x26, 0x82, 0x72, 0x2f, 0xe6, 0x51, 0x12,
	0x21, 0xbc, 0x67, 0x21, 0xe5, 0x9e, 0xcc, 0xb8, 0x10, 0x06, 0x82, 0xea, 0x7c, 0xfd, 0x19, 0xe4,
	0x5e, 0x0b, 0xca, 0xb1, 0x04, 0x26, 0xeb, 0x3b, 0x46, 0xcd, 0x68, 0x14, 0x88, 0xc9, 0xfa, 0x78,
	0x08, 0xbb, 0x74, 0x14, 0xb0, 0xa1, 0x63, 0xaa, 0x94, 0x0e, 0x10, 0x21, 0x37, 0x0e, 0x46, 0xd4,
	0xb1, 0x54, 0x52, 0xfd, 0xae, 0xb7, 0xe0, 0x40, 0x2a, 0x74, 0xe8, 0x90, 0xf6, 0x12, 0x16, 0x8d,
	0xb1, 0x0a, 0xf9, 0x70, 0xda, 0xd5, 0xd5, 0x5a, 0xd0, 0x0e, 0xa7, 0x6d, 0x55, 0x7f, 0x04, 0x76,
	0x38, 0xed, 0x2a, 0x09, 0xad, 0xbb, 0x17, 0x4e, 0x2f, 0xa5, 0xc8, 0x4f, 0x13, 0xca, 0xe7, 0x4c,
	0x24, 0x52, 0x49, 0x10, 0xfa, 0x71, 0x42, 0x45, 0x82, 0x75, 0xd8, 0x8f, 0xf8, 0x20, 0x18, 0xb3,
	0xcf, 0x81, 0x14, 0x9e, 0x89, 0xad, 0xe4, 0xf0, 0x11, 0x14, 0xc4, 0xfc, 0x64, 0xa5, 0x59, 0x6c,
	0x56, 0xbd, 0xb4, 0x57, 0x6f, 0xe5, 0x6a, 0x24, 0xe5, 0xe2, 0x7d, 0x80, 0x38, 0x18, 0xb0, 0xb1,
	0x96, 0xb6, 0x54, 0x65, 0x65, 0x56, 0x79, 0xb5, 0x00, 0xc8, 0x12, 0x09, 0x1b, 0x90, 0x13, 0x11,
	0x4f, 0x9c, 0x5c, 0xcd, 0x68, 0x94, 0x9a, 0x87, 0x99, 0x63, 0x22, 0x9e, 0x10, 0xc5, 0x70, 0xbf,
	0x19, 0x90, 0x27, 0x54, 0xc4, 0xd1, 0x58, 0x50, 0x3c, 0x81, 0x5d, 0xc9, 0x11, 0x8e, 0x51, 0xb3,
	0x1a, 0xc5, 0x66, 0x79, 0xbd, 0x8e, 0x68, 0x18, 0x1f, 0x82, 0xcd, 0x75, 0xe7, 0xb3, 0x46, 0xfe,
	0x5b, 0x66, 0xae, 0x4f, 0x87, 0xcc, 0xc9, 0xf8, 0xf8, 0x86, 0x4e, 0x9c, 0x4c, 0x27, 0x1e, 0xa1,
	0x62, 0x32, 0x4c, 0x96, 0x1b, 0xaa, 0x7f, 0xb5, 0xa0, 0x2a, 0x75, 0xfd, 0x5e, 0x8f, 0x8a, 0xb9,
	0xf0, 0x3f, 0x30, 0xfe, 0x1f, 0xbf, 0x33, 0xfe, 0xa7, 0xeb, 0xe3, 0x3f, 0x5e, 0x1f, 0xff, 0x8d,
	0x63, 0xfa, 0x13, 0x7b, 0x78, 0x07, 0xe8, 0xc7, 0x31, 0x8f, 0xae, 0xa9, 0xba, 0xd0, 0x2d, 0xe6,
	0x7f, 0x04, 0xb6, 0xbc, 0x5e, 0x97, 0xf5, 0x1d, 0xb3, 0x66, 0xc9, 0x07, 0x25, 0xc3, 0xb3, 0xbe,
	0x0b, 0xe9, 0x04, 0xea, 0x6f, 0xa1, 0x42, 0xe8, 0xe8, 0x6f, 0xa9, 0x7f, 0x81, 0x4a, 0x8b, 0xd3,
	0x20, 0xb9, 0xb5, 0xfa, 0xd6, 0x7f, 0x31, 0xe8, 0x42, 0x3e, 0x0e, 0x84, 0xf8, 0x14, 0xf1, 0xbe,
	0xda, 0x7e, 0x81, 0x2c, 0xe2, 0x7b, 0x2f, 0x20, 0x3f, 0xdf, 0x3e, 0x1e, 0x40, 0xa1, 0x7d, 0xe1,
	0x9f, 0x9d, 0x77, 0xfd, 0x4e, 0xab, 0xbc, 0x83, 0x25, 0x00, 0x1d, 0x3e, 0x6f, 0x77, 0x5a, 0x65,
	0x03, 0xf7, 0x21, 0x7f, 0xe9, 0x5f, 0xb4, 0x15, 0x6a, 0x4a, 0xb2, 0x8a, 0x14, 0x68, 0x35, 0xbf,
	0x5b, 0x50, 0xd4, 0x6e, 0xe5, 0xd7, 0xac, 0x47, 0xf1, 0x25, 0xe4, 0xe4, 0xce, 0x71, 0xe3, 0x23,
	0x74, 0x8f, 0x37, 0xa1, 0xde, 0xc2, 0x83, 0x1f, 0x00, 0xb3, 0x06, 0xc2, 0xed, 0x0c, 0xe6, 0x7a,
	0x5b, 0xd1, 0xd2, 0xc3, 0x08, 0xd8, 0x33, 0x37, 0xe1, 0x9d, 0xe5, 0xd2, 0xac, 0xc5, 0xdc, 0xbb,
	0x9b, 0xf1, 0x54, 0xf3, 0x15, 0xec, 0x69, 0x0b, 0xe1, 0xff, 0xcb, 0x25, 0x19, 0x5b, 0xb9, 0x27,
	0x1b, 0xe1, 0x54, 0xf0, 0x09, 0x40, 0xea, 0x9a, 0x55, 0xd1, 0x8c, 0x9b, 0xdc, 0xcc, 0x9b, 0x3d,
	0xf5, 0xc0, 0x1d, 0x0c, 0xa3, 0x30, 0x18, 0xce, 0x90, 0x20, 0x66, 0xde, 0x80, 0xc7, 0x3d, 0x45,
	0x39, 0xb5, 0x25, 0xc7, 0x8f, 0xd9, 0xd5, 0xce, 0x9b, 0x5d, 0x85, 0x87, 0x7b, 0xea, 0x6b, 0xf7,
	0xe0, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xa6, 0x28, 0xf8, 0x13, 0x07, 0x00, 0x00,
}
